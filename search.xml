<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ 新知识</title>
    <url>/2021/05/09/OOP/C++%20%E6%96%B0%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="C-新知识"><a href="#C-新知识" class="headerlink" title="C++ 新知识"></a>C++ 新知识</h1><h2 id="1-main-int-argc-char-argv"><a href="#1-main-int-argc-char-argv" class="headerlink" title="1 main(int argc, char** argv)"></a>1 main(int argc, char** argv)</h2><p>这个表示在可执行文件中，传入的参数有多少，以argc表示</p>
<p>传入参数（字符串）用<code>*argv</code>来存储</p>
<p>举个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*cmdFile.cpp*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;argc; ++i)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello,&quot;</span> &lt;&lt; argv[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成可执行文件<code>cmdFile</code>后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./cmdFile daniel zoris</span><br><span class="line">Hello,daniel</span><br><span class="line">Hello,zoris</span><br></pre></td></tr></table></figure>

<h2 id="2-C库宏-va-arg"><a href="#2-C库宏-va-arg" class="headerlink" title="2 C库宏 va_arg()"></a>2 C库宏 va_arg()</h2><p>C库宏<code>type va_arg(va_list ap, type)</code>检索函数参数列表中类型为type的下一个参数，它无法判断检索到的参数是否是传给函数的最后一个参数</p>
<p><strong>为什么选择它？</strong></p>
<ul>
<li>可以在函数中加入省略号作为缺省参数</li>
</ul>
<h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>用来实现与<code>printf</code>相似的功能，如printf的声明和调用方法为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fromat, [,argument]...)</span></span>;  <span class="comment">//官方声明</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;My name is %s, age %d, &quot;</span>AnnieKim<span class="string">&quot;, 24&quot;</span>);  <span class="comment">//调用</span></span><br></pre></td></tr></table></figure>

<h4 id="1）通用的工作原理"><a href="#1）通用的工作原理" class="headerlink" title="1）通用的工作原理"></a>1）通用的工作原理</h4><p>大多数带有变长参数的函数都利用<strong>显示声明</strong>的参数中的一些信息，来获取调用中提供的其他可选实参的类型和数目。</p>
<p>比如printf函数，就是根据第一个参数推到可选实参：</p>
<ul>
<li>如果有一个<code>%</code>后有一个<code>s</code>，说明后面还有第二个类型为字符串的参数；如果还有第二个<code>%</code>，后面跟着d，说明还需要第三个类型为整数的参数。</li>
</ul>
<p><font color="red"><b>所以说，通常情况下，第一个参数是必不可少的</b></font></p>
<h4 id="2）如何获取变长参数"><a href="#2）如何获取变长参数" class="headerlink" title="2）如何获取变长参数"></a>2）如何获取变长参数</h4><p>为了解决变长参数问题，需要用到以下几个宏，并且使用这几个宏时<strong>必须至少提供一个</strong>显式的参数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">type va_arg&#123;</span><br><span class="line">  va_list arg_ptr, type</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> va_end&#123;</span><br><span class="line">  va_list arg_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> va_start&#123;</span><br><span class="line">  va_list arg_ptr, prev_param</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中，type指要获取的参数的类型，比如int，char*等，<code>arg_ptr</code>是指向参数列表的指针（<code>va_list</code>类型），<code>prev_param</code>是指向最后一个显示声明的参数，以用来获取第一个变长参数的位置。</p>
<p><strong>使用步骤：</strong></p>
<ol>
<li>定义一个va_list类型的变量，变量是指向参数的指针</li>
<li><code>va_start</code>初始化刚定义的变量，第二个参数是最后一个显示声明的参数</li>
<li><code>va_arg</code>返回变长参数的值，第二个参数是该变长参数的类型</li>
<li><code>va_end</code>将第一步定义的变量重置为NULL</li>
</ol>
<p><strong>注意事项⚠️</strong></p>
<ol>
<li>变长参数的<strong>类型和数目不能通过宏来获取</strong>，只能通过自己写程序控制</li>
<li>编译器对变长参数函数的原型检查不够严格，会影响代码质量</li>
</ol>
<h3 id="2-1-声明"><a href="#2-1-声明" class="headerlink" title="2.1 声明"></a>2.1 声明</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">type <span class="title">va_arg</span><span class="params">(va_list ap, type)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-参数"><a href="#2-2-参数" class="headerlink" title="2.2 参数"></a>2.2 参数</h3><p>$$<br>(d+2<em>m+3</em>(m+1)/5+y+y/4-y/100+y/400+1)%7<br>$$</p>
<ul>
<li><code>ap</code> - 这是一个<code>va_list</code>类型的对象，存储了有关额外参数和检索状态的信息，这个对象应该在第一次调用<code>va_arg</code>之前通过调用<code>va_start</code>进行初始化</li>
<li><code>type</code> - 这是一个类型名称，这个类型名称是作为扩展自该宏的表达式的类型来使用的</li>
</ul>
<h3 id="2-3-返回值"><a href="#2-3-返回值" class="headerlink" title="2.3 返回值"></a>2.3 返回值</h3><p>这个宏返回下一个额外的参数。类型为type</p>
<h3 id="2-4-va-list用法"><a href="#2-4-va-list用法" class="headerlink" title="2.4 va_list用法"></a>2.4 va_list用法</h3><p>回顾一下printf函数的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">char</span> *fromat, ...)</span></span>;</span><br></pre></td></tr></table></figure>

<p>第一个<code>char* format</code>是常写的带<code>%d, %f</code>这样转换单元的格式字符串，第二个参数是<code>...</code>，这个是变参函数定义时的奥秘：</p>
<ol>
<li>变参处的定义或声明，用<code>...</code>代替参数类型</li>
<li>变参<code>...</code>只能放在参数列表最末尾</li>
</ol>
<p>对于一个结构体函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">double</span> x, y;</span><br><span class="line">&#125;point;</span><br><span class="line"></span><br><span class="line"><span class="function">struct point <span class="title">barycenter</span><span class="params">(<span class="keyword">int</span> n, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">point</span> <span class="title">t</span>;</span></span><br><span class="line">  strucy point sum=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">  va_list listPointer;</span><br><span class="line">  va_start(listPointer, n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">    t = va_arg(listPointer,struct point);</span><br><span class="line">    sum.x += t.x;</span><br><span class="line">    sum.y += t.y;</span><br><span class="line">  &#125;</span><br><span class="line">  sum.x /= n;</span><br><span class="line">  sum.y /= n;</span><br><span class="line">  va_end(listPointer);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>以上用到的宏：</strong></p>
<ul>
<li><p><code>va_list</code>: 用来定义一个变量列表的指针类型</p>
</li>
<li><p><code>va_start(listPointer, n)</code>将listPointer这个指针绑定到有n个变量的传入参数列表上</p>
</li>
<li><p><code>va_arg(listPointer, type)</code>从参数列表中逐个取出数据，取出数据的类型由type决定，它返回这个type类型的值，我们可以马上把它赋值给另一个变量</p>
</li>
<li><p>当函数调用结束的时候，需要使用<code>va_end</code>来清除<code>listPointer</code>指向的空间，否则会发生内存泄漏问题</p>
<p><strong>可能存在的疑问：</strong></p>
</li>
</ul>
<ol>
<li>必须知道传入参数的个数吗？</li>
</ol>
<p>对，如果没有参数个数，va_start的时候就无法绑定</p>
<ol start="2">
<li>所有的可变参数必须都是同一个类型吗</li>
</ol>
<p>不是的，对比一下printf函数，printf通过<code>char* format</code>格式字符串，不仅确定了参数个数，还确定了每个参数的类型（通过%d这样的转换单元），这样只要在va_arg的时候采用适当的type类型就能够读出各种类型的参数。</p>
<h3 id="2-4-举个例子"><a href="#2-4-举个例子" class="headerlink" title="2.4 举个例子"></a>2.4 举个例子</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;15和56的和 = %d\n&quot;</span>, sum(<span class="number">2</span>, <span class="number">15</span>, <span class="number">56</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num_args, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">  va_list ap;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  </span><br><span class="line">  va_start(ap, num_args);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; u &lt; num_args; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    val += va_args(ap, <span class="keyword">int</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  va_end(ap);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OOP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter 1</title>
    <url>/2021/04/22/XV6-Core/Chapter%201/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h2 id="1-1进程概览"><a href="#1-1进程概览" class="headerlink" title="1.1进程概览"></a>1.1进程概览</h2><p>进程让一个程序可以假设它独占一台机器，进程让程序提供“看上去”私有的，其他进程无法读写的内存系统（或地址空间），以及一颗“看上去”仅执行该程序的CPU</p>
<p>xv6使用页表（由硬件实现）来为每个进程提供其独有的地址空间，页表将虚拟地址映射为物理地址（cpu向主存发送的地址）</p>
<img src="https://i.loli.net/2021/04/22/oXduOTlEhMbJHKs.png" alt="1.1 Layout of a virtual address space.png" style="zoom:40%;">

<p>如图所示，一片地址空间包含了从虚拟地址0开始的用户内存，它的地址最低处放置进程的指令，接下来则是<strong>全局变量，栈区</strong>，以及一个用户可按需拓展的“堆”区（malloc用）</p>
<p>和上面提到的用户内存一样，内核的<strong>指令和数据</strong>也会被进程映射到每个进程的地址空间中，当进程使用系统调用时，系统调用实际上会在进程地址空间中的内核区域执行。</p>
<p>这种设计使得内核的系统调用代码可以直接指向用户内存，为了给用户留下足够的内存空间，xv6将内核映射到了地址空间的高地址处，即从<code>0x80100000</code>开始</p>
<p>xv6使用结构体<code>struct proc</code>来维护一个进程的状态，其中最为重要的状态是进程的页表，内核栈，当前运行状态。我们接下来会用<code>p-&gt;xxx</code>来指代<code>proc</code>结构中的元素。</p>
<p>每个进程都有一个运行线程，来执行进程的指令。线程可以被暂时挂起，稍后再恢复运行，系统在进程之间切换实际上就是挂起当前运行的线程，恢复另一个进程的线程，线程的大多数状态（局部变量 &amp; 函数调用的返回地址）都保存在线程的栈上。</p>
<p>每个进程都有<strong>用户栈和内存栈</strong>（<code>p-&gt;kstack</code>），当进程运行用户指令时，只有其用户栈被使用，其内核栈则是空的，然而当进程（通过系统调用或中断）进入内核时，内核代码就在进程的内核栈中执行。</p>
<p>进程处于内核中时，其用户栈仍然保存着数据，只是暂时处于不活跃状态，进程的线程交替地使用着用户栈和内核栈。</p>
<p>需要注意内核栈是用户代码无法使用的，这样即使一个进程破坏了自己的用户栈，内核也能保持运行。</p>
<ul>
<li><p>当进程使用<strong>系统调用</strong>时，处理器转入<strong>内核栈</strong>中，提升硬件的特权级，然后运行系统调用对应的内核代码。</p>
</li>
<li><p>当<strong>系统调用完成</strong>时，又从内核空间回到用户空间，降低硬件特权级，转入用户栈，恢复执行系统调用指令后面的用户指令。线程可以在内核中“阻塞”等待I/O，在I/O结束后再恢复运行</p>
</li>
</ul>
<p><code>p-&gt;state</code>表示了进程的状态：新建、准备运行、运行、等待I/O或退出状态中</p>
<p><code>p-&gt;pgdir</code>以x86硬件要求的格式保存了进程的页表，xv6让分页硬件在进程运行时使用<code>p-&gt;pgdir</code>，进程的页表还记录了保存进程内存的物理页地址</p>
<h2 id="1-2-代码：第一个地址空间"><a href="#1-2-代码：第一个地址空间" class="headerlink" title="1.2 代码：第一个地址空间"></a>1.2 代码：第一个地址空间</h2><img src="https://i.loli.net/2021/04/22/Ym2Q53MkuACeWR4.png" alt="1.2 Layout of a virtual address space2.png" style="zoom:33%;">

<p>PC开机时，它会初始化自己然后从磁盘中载入bootloader到内存并运行，然后bootloader把xv6内核从磁盘中载入并从entry(1040)开始运行。x86分页硬件此时还没有开始工作，因此此时虚拟地址是直接映射到物理地址上的。</p>
<p>bootloader把xv6内核装载到物理地址<code>0x100000</code>处，之所以没有装载到内核指令和内核数据应该出现在的<code>0x80100000</code>处，是因为小型机器上很可能没有这么大的物理内存。而没有装载到<code>0x0</code>是因为地址<code>0xa0000</code>到<code>0x100000</code>是属于<code>I/O</code>设备的。</p>
<p>为了让内核的剩余部分能够运行，<code>entry</code>的代码设置了页表，将<code>0x80000000</code>（定义为<code>KERNBASE</code>(0207)）开始的虚拟地址映射到物理地址<code>0x0</code>处。</p>
<blockquote>
<p>⚠️ 页表经常把两段不同的虚拟内存映射到相同的一段内存</p>
</blockquote>
<p><code>entry</code>中的页表定义在<code>main.c</code>(1311)处，这里简单说明一下，页表项0将虚拟地址<code>0:0x400000</code>映射到物理地址<code>0:0x400000</code>。</p>
<p>只要<code>entry</code>的代码还运行在内存的低地址处，我们就必须这样设置，但最后这个页表项是会被移除的。</p>
<p>页表项512将虚拟地址的<code>KERNBASE:KERNBASE+0x40000</code>映射到物理地址<code>0:0x400000</code>。这个页表项将在<code>entry</code>的代码结束后被使用；它将内核指令和内核数据出现的<strong>高虚拟地址处映射到了bootloader实际将它们载入的低物理地址</strong>，这个映射限制内核的指令+代码必须在<code>4MB</code>内</p>
<p>回到<code>entry</code>继续页表的设置工作，它将<code>entrypgdir</code>的物理地址载入到<code>%cr3</code>中，分页硬件必须知道<code>entrypgdir</code>的物理地址，因为此时它还不知道如何翻译虚拟地址，它也没有页表，<code>entrypgdir</code>这个符号指向内存的高地址处，但只要用宏<code>V2P_WO</code>(0220)减去<code>KERNBASE</code>便可以找到其物理地址，为了让分页硬件运行起来，xv6会设置控制寄存器<code>%cr0</code>中的标志位<code>CR0_PG</code>。</p>
<p>现在<code>entry</code>就要跳转到内核的C代码，并在内存的高地址中执行它了，首先它将栈指针<code>%esp</code>指向被用作栈的一段内存（1054），所有的符号包括<code>stack</code>都在高地址，所以当低地址的映射被移除时，栈仍然是可用的。</p>
<p>最后<code>entry</code>跳转到高地址的<code>main</code>代码中，我们必须使用间接跳转，否则汇编器会生成PC相关的直接跳转（PC-relative-direct-jump），而跳转会运行在内存低地址处的main，main不会返回，因为栈上并没有返回PC值。</p>
<h2 id="1-3-代码：创建第一个进程"><a href="#1-3-代码：创建第一个进程" class="headerlink" title="1.3 代码：创建第一个进程"></a>1.3 代码：创建第一个进程</h2><p>在<code>main</code>初始化了一些设备和子系统后，它通过调用<code>userinit(1239)</code>建立了第一个进程。<code>userinit</code>首先调用<code>allocproc</code>，<code>allocproc</code>（2205）的工作是在页表中分配一个槽（即结构体<code>struct proc</code>）并初始化进程的状态，为其内核线程的运行做准备。</p>
<p><strong>注意：</strong> <code>userinit</code>仅仅在创建第一个进程时被调用，而<code>allocproc</code>创建每个进程时都会被调用，<code>allocproc</code>会在<code>proc</code>的表中找到一个标记为<code>UNUSED(2211-2213)</code>的槽位。</p>
<p>当它找到这样一个未使用的槽位后，<code>allocproc</code>将其状态设置为<code>EMBRYO</code>，使其被标记为被使用的并给这个进程一个独有的<code>pid</code>（2201-2219）。</p>
<p>接下来，它尝试为进程的内核线程分配内核栈，如果分配失败，<code>allocproc</code>会把这个槽位状态恢复为<code>UNUSED</code>并返回0来标记失败。</p>
<img src="https://i.loli.net/2021/04/22/T24aUySbhzsBqVW.png" alt="1.3 A new kernel stack.png" style="zoom:50%;">

<p>现在<code>allocproc</code>必须设置新进程的内核栈，<code>allocproc</code>以巧妙的方式，使其既能在创建第一个进程时被使用，又能在<code>fork</code>操作时被使用。</p>
<p><code>allocproc</code>为新进程设置好一个特别准备的内核栈和一系列内核寄存器，使得进程第一次运行时会“返回”到用户空间。</p>
<p>准备好的内核栈<strong>如上图</strong>所示，<code>allocproc</code>通过设置返回程序计数器的值，使得新进程的内核线程首先运行在<code>forkret</code>的代码中，然后返回到<code>trapnet</code>(2236-2241)中运行。</p>
<p>内核线程会从<code>p-&gt;context</code>中拷贝的内容开始运行，所以我们可以通过将<code>p-&gt;context-&gt;eip</code>指向<code>forkret</code>（2533）开头开始运行，这个函数会返回到那个时刻栈底的地址。<code>context swtch(2708)</code>的代码把栈指针指向<code>p-&gt;context</code>结尾，<code>allocproc</code>又将<code>p-&gt;context</code>放在栈上，并在其上方放一个指向<code>trapnet</code>的指针，这样运行完的<code>forknet</code>就会返回到<code>trapret</code>中，<code>trapret</code>接着从栈顶恢复用户寄存器然后跳转到<code>process(3027)</code>的代码【trapret】</p>
<blockquote>
<p>以上分析都需要结合源码和上图进行</p>
</blockquote>
<p>这样的设置对于普通的fork和建立第一个进程都是使用的，虽然后一种情况会从用户空间的地址0处开始执行而不是从<code>fork</code>返回；</p>
<p>而降控制权从用户转到内核是通过中断机制实现的，具体地说是系统调用、中断和异常。每当进程运行中要将控制权交给内核是，硬件和xv6的trap entry代码就会在进程的内核栈上保存用户寄存器。</p>
<p><code>userinit</code>把值写在新建的栈的顶部，使之就像进程是通过中断进入内核的一样（2264-2270），所以用于从内核返回到用户代码区的通用代码也适用于第一个进程。</p>
<p>这些保存的值就构成了一个结构体<code>struct trapframe</code>，其中保存的事用户寄存器，如上图所示，这样进程的内核就已经完全准备好了。</p>
<hr>
<ol>
<li>第一个进程会先运行一个小程序（<code>initcode.S</code>(7700)）,进程需要找到物理内存来报春这段程序，程序不仅需要被拷贝到内存中，还需要页表来指向那段内存</li>
<li>userinit调用setupkvm（1713）来为进程创建一个（最初）只映射内核区的页表，概括地说，<code>setupkvm &amp; userinit</code>创建了1-1的所示的地址空间</li>
</ol>
<blockquote>
<p>setupkvm主要是对内核部分的进程地址空间进行映射</p>
</blockquote>
<p>第一个进程内存中的初始内容由<code>initcode.S</code>汇编得到，作为建立内核进程的一部分，链接器将这段二进制代码嵌入内核中并定义两个特殊的符号<code>_binary_initcode_start &amp; _binary_initcode_size</code>，表示了这段二进制码的位置和大小，并把二进制码拷贝到那一页中（1803）；</p>
<p>接下来userinit把trapframe(0602)设置为初始的用户模式状态：<code>%cs</code>寄存器保存着一个段选择器，指向段<code>SET_UCODE</code>并处于特权级<code>DPL_USER</code>。<code>%eflags</code>的<code>FL_IF</code>位被设置为允许硬件中断。</p>
<p>栈指针<code>%esp</code>被设为了进程的最大有效虚拟内存，即<code>p-&gt;sz</code>，指令指针则指向初始化代码的入口点，即地址0。函数<code>userinit</code>把<code>p-&gt;name</code>设置为了<code>initcode</code>，这主要是为了方便调试，还将<code>p-&gt;cwd</code>设置为进程当前的工作目录。</p>
<blockquote>
<p>sz: size of process memory</p>
<p>tf: trap fram for current syscall</p>
<p>context: swtch() here to run process</p>
<p>cwd: current directory</p>
<p>kstack: bottom of kernel stack for this process</p>
</blockquote>
<p>一旦进程初始化完毕，<code>userinit</code>将<code>p-&gt;state</code>设置为<code>RUNNABLE</code>，使进程能够被调度。</p>
<h2 id="1-4-运行第一个进程"><a href="#1-4-运行第一个进程" class="headerlink" title="1.4 运行第一个进程"></a>1.4 运行第一个进程</h2><p>现在第一个进程的状态已经被设置好了，开始运行它。</p>
<p>在<code>main</code>调用了<code>userinit</code>后，<code>mpmain</code>调用<code>schduler</code>开始运行进程（1267），<code>scheduler</code>(2458)会找到一个<code>p-&gt;state = RUNNABLE</code>的进程<code>initproc</code>，然后将<code>per-cpu</code>的变量<code>proc</code>改为该进程，接着调用<code>switchuvm</code>通知硬件开始使用目标进程的页表（1768）。</p>
<blockquote>
<p>因为<code>setupkvm</code>使得所有进程的页表都有一份相同的映射，指向内核的代码和数据，所以当内核运行时我们改变页表是没有问题的，<code>switchuvm</code>同时还设置好任务状态段<code>SEG_TSS</code>，让硬件在进程的内核栈中执行系统调用与中断</p>
</blockquote>
<p><code>scheduler</code>接着把进程的<code>p-&gt;state = RUNNING</code>，调用<code>swtch(2708)</code>，切换上下文到目标进程到内核线程中。<code>swtch</code>会保存当前的寄存器，并把目标内核线程中保存的寄存器（<code>proc-&gt;context</code>）载入到x86的硬件寄存器中，其中也包括栈指针和指令指针。</p>
<p>当前的上下文并非是进程的，而是一个特殊的<code>per-cpu</code>调度器的上下文，所以<code>scheduler</code>会让<code>swtch</code>把当前的硬件寄存器保存在<code>per-cpu</code>的存储（<code>cpu-&gt;scheduler</code>）中，而非进程的内核线程上下文中。</p>
<p>最后的<code>ret</code>（2727）指令从栈中弹出目标进程的<code>%eip</code>，从而结束上下文切换工作，现在处理器就运行在进程<code>p</code>的内核栈上了。</p>
<hr>
<p><code>allocproc</code>通过把<code>initproc</code>的<code>p-&gt;context-&gt;eip</code>设置为<code>forkret</code>使得<code>ret</code>开始执行<code>forkret</code>的代码；第一次被使用时，<code>forkret(2533)</code>会调用一些初始化函数。</p>
<blockquote>
<p>注意：我们不能在<code>main</code>中调用他们，因为它们必须在一个拥有自己的内核栈的普通进程中运行</p>
</blockquote>
<p>接下来<code>forkret</code>返回，由于<code>allocproc</code>的设计，目前栈上在<code>p-&gt;context</code>之后即将被弹出的是<code>trapret</code>。因而接下来会运行<code>trapret</code>，此时<code>%esp</code>保存着<code>p-&gt;tf</code>，<code>trapret(3027)</code>用弹出指令从<code>trap frame(0602)</code>中恢复寄存器，就像<code>swtch</code>对内核上下文的操作一样：<code>popal</code>恢复通用寄存器，<code>popl</code>恢复<code>%gs, %fs, %es, %ds</code>.<code>addl</code>跳过<code>trapno</code>和<code>errnode</code>两个数据，最后<code>iret</code>弹出<code>%cs, %eip, %flags, %esp, %ss</code>。trap frame的内容已经转移到CPU状态中，所以处理器会从<code>trap frame</code>中<code>%eip</code>的值继续执行，对于<code>initproc</code>来说，这个值就是虚拟地址0，即<code>initcoude.S</code>的第一个指令。</p>
<p>这时<code>%eip</code>和<code>%esp</code>的值为0和4096，这时进程地址空间中的虚拟地址，处理器的分页硬件会把它们翻译为物理地址，<code>allocuvm</code>为进程建立了页表，所以现在虚拟地址0会指向为该进程分配的物理地址处。</p>
<p><code>allocuvm</code>还会设置<code>PTE_U</code>来让分页硬件允许用户代码访问内存，<code>userinit</code>设置了<code>%cs</code>的低位，使得进程的用户代码运行在<code>CPL = 3</code>的情况下，这意味着用户代码只能使用带有<code>PTE_U</code>设置的页，并且无法修改像<code>%cr3</code>这样的敏感硬件寄存器，这样，处理器就受限只能使用自己的内存了。</p>
<h2 id="1-5-第一个系统调用"><a href="#1-5-第一个系统调用" class="headerlink" title="1.5 第一个系统调用"></a>1.5 第一个系统调用</h2><p><code>initcode.S</code>做的第一件事为出触发<code>exec</code>系统调用，如在第0章看到的一样，<code>exec</code>用一个新的程序来代替当前进程的内存和寄存器，但是其文件描述符、进程id和父进程都是不变的。</p>
<p><code>initcode.S(7708)</code>刚开始会将<code>$argv, $init, $0</code>三个值推入栈中，接下来把<code>%eax</code>设置为<code>SYS_exec</code>然后执行<code>int T_SYSCALL</code>:这样做是告诉内核运行<code>exec</code>这个系统调用，如果运行正常的话，<code>exec</code>不会返回：它会运行名为<code>$init</code>的程序，<code>$init</code>是一个以空字符结尾的字符串，即<code>/init(7721-7723)</code>。如果<code>exec</code>失败并且返回了，<code>initcode</code>会不断调用一个不会返回的系统调用<code>exit</code></p>
<p>系统调用<code>exec</code>的参数是<code>$init\$argv</code>。最后的0让这个手动创建的系统调用看起来就像普通的系统调用一样。</p>
<p>这样做是xv6努力避免为第一个进程的运行单独写一段代码，而是尽量使用通用于普通操作的代码。</p>
<p>对于exec的具体实现，概括地讲，它会用从文件系统中获取的<code>/init</code>的二进制代码代替<code>initcode</code>的代码，现在<code>initcode</code>已经执行完了，进程将要运行<code>/init</code>。<code>/init(7810)</code>会在需要的情况下创建一个新的控制台设备文件，然后把它作为描述符0，1，2打开。接下来它将不断循环，开启的控制台shell，处理没有父进程的僵尸进程，直到shell退出，然后再反复，系统就这样建立起来了。</p>
<h2 id="Homework-答疑点"><a href="#Homework-答疑点" class="headerlink" title="Homework 答疑点"></a>Homework 答疑点</h2><ul>
<li>什么是EFLF二进制文件？</li>
</ul>
<p>当把<code>.c</code>文件转换为一个对象<code>.o</code>文件时，这个文件为汇编语言指令，链接器会讲所有已编译的目标文件组合成单个二进制映像，如<code>obj/kern/kernel</code>，此时的<code>ELF</code>为可执行和可链接格式。其中比较重要的程序部分是：</p>
<ol>
<li><code>.text:</code> 程序的可执行指令</li>
<li><code>.rodate:</code> 只读数据，如C编译器生成的ASCII字符串常量</li>
<li><code>.data:</code> 数据部分保存程序的<strong>初始化数据</strong>,如用<code>int x=5</code>等初始化程序声明的全局变量</li>
<li><code>VMA链接地址：</code> 该节期望从中执行的内存地址</li>
<li><code>LMA加载地址</code></li>
</ol>
<p>C要求“未初始化的”全局变量以零值开头，不需要在ELF文件中存储<code>.bss</code>的内容，链接器仅记录<code>.bss</code>节的地址和大小，加载程序或程序本身必须将<code>.bss</code>节清零。</p>
<p>BIOS将引导扇区从地址<code>0x7c00</code>开始加载到内存中，这是引导扇区的加载地址，这也是从中执行引导扇区的位置，因此这也是其链接地址，通过将<code>-Ttext 0x7c00</code>传递给<code>boot/Makefrag</code>中的链接器来设置链接地址，因此链接器将在生成的代码中生成正确的内存地址。</p>
<p><strong>查看内核可执行文件中所有部分的名称、大小和链接地址的完整列表：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objdump -h obj/kern/kernel</span><br><span class="line">-h: 显示目标文件各个section的头部摘要信息</span><br></pre></td></tr></table></figure>

<p><strong>检查程序头</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objdump -x obj/kern/kernel</span><br><span class="line">-x: 显示可用的头信息</span><br></pre></td></tr></table></figure>

<p>之后程度头会在objdump的输出中的“程序头”下列出，ELF对象需要加载到内存中的区域是标记为“LOAD”的区域，会给出每个程序头的信息：</p>
<table>
<thead>
<tr>
<th align="center">vaddr</th>
<th align="center">paddr</th>
<th align="center">memsz</th>
<th align="center">filesz</th>
</tr>
</thead>
<tbody><tr>
<td align="center">虚拟地址</td>
<td align="center">物理地址</td>
<td align="center">内存大小</td>
<td align="center">文件大小</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看内核可执行文件中所有部分的名称，大小和链接地址的完整列表</span></span><br><span class="line"><span class="variable">$objdump</span> -h obj/kern/kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看引导加载程序的.text部分</span></span><br><span class="line"><span class="variable">$objdump</span> -h obj/boot/boot.out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查程序头,ELF对象需要加载到内存中区域标记为“LOAD”的区域</span></span><br><span class="line"><span class="variable">$objdump</span> -x obj/kern/kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核程序的入口点</span></span><br><span class="line"><span class="variable">$objdump</span> -f obj/kern/kernel</span><br></pre></td></tr></table></figure>

<h3 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise 5"></a>Exercise 5</h3><p>问：再一次追踪boot loader的指令，找出第一条会中断或以其他方式执行错误操作的指令。然后将boot/Makefrag中的链接地址<strong>更改为错误的地址</strong>，运行make clean，后进行重新编译make，然后再次跟踪到引导加载程序来查看发生了什么，注意每一次都需要使用make clean一次又一次地<strong>更改链接地址</strong></p>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a><strong>解答</strong></h4><p>这里引入了两个概念，一个是链接地址，一个是加载地址。</p>
<p><strong>链接地址</strong>可以理解为通过编译器链接器处理形成的可执行程序中指令的地址，即<strong>逻辑地址</strong></p>
<p><strong>加载地址</strong>则是可执行文件真正被装入内存后运行的地址，即<strong>物理地址</strong></p>
<p>在bootloader中，由于在bootloader运行时还没有任何的分段处理机制，或分页处理机制，所以bootloader可执行程序中的链接地址就应该等于加载地址，在lab中作者说，BIOS默认把bootloader加载到0x7C00内存地址处，因此要求bootloader的链接地址也要在0x7c00处。</p>
<p>而bootloader的地址设定在<code>boot/Makefrag</code>中完成的，根据题目要求，我们需要改动这个文件的值。</p>
<p>首先根据题目要求，在lab目录下输入make clean，清除掉之前编译出来的内核可执行文件，在清楚之前可以先把<code>obj/boot/boot.asm</code>文件拷贝出来，之后可以用来比较，然后打开这个<code>boot/Makefrag</code>文件，会发现下列语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(OBJDIR)/boot/boot : $(BOOT_OBJS)</span><br><span class="line">	@<span class="built_in">echo</span> + ld boot/boot</span><br><span class="line">	$(V)$(LD) $(LDFLAGS) -N -3 start -Ttext 0x7C00 -o <span class="variable">$@</span>.out $^</span><br><span class="line">	$(V)$(OBJDUMP) -S <span class="variable">$@</span>.out&gt;<span class="variable">$@</span>.asm</span><br><span class="line">	$(V)$(OBJCOPY) -S -O binary -j .text <span class="variable">$@</span>.out <span class="variable">$@</span></span><br><span class="line">	$(V)perl boot/sign.pl $(OBJDIR)/boot/boot</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-Ttext 0x7C00</code>，为指定链接地址</li>
<li><code>obj/boot/boot.asm</code>，和之前的文件做比较</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个联系想让我们了解链接地址出错会产生的影响，正常的bootloader的链接地址为<code>0x7C00</code>，如果修改成<code>0x7E00</code>，则会导致<code>lgdt gdtdesc</code>和<code>ljmp $PROT_MODE_CSEG, $protcseg</code>两句指令出错，<font color="red"><b>两者都需要计算地址，计算方法为链接地址加上偏移，因此将链接地址修改成加载地址不一样后，会导致地址计算失败。</b></font></p>
<p>现在，将映射前4MB的物理内存，足以使我们</p>
<h3 id="Exercise-7"><a href="#Exercise-7" class="headerlink" title="Exercise 7"></a>Exercise 7</h3><p><strong>问题：</strong>使用了QEMU和GDB跟踪到JOS内核并处停止<code>movl %eax, %cr0</code>，检查<code>0x00100000</code>和<code>0xf0100000</code>，现在使用stepiGDB命令单步执行该指令，同样检查内存为<code>0x00100000</code>和<code>0xf0100000</code></p>
<p>What is the first instruction after the new mapping is established that would fail to work properly if the mapping weren’t in place? Comment out the <code>movl %eax, %cr0</code> in <code>kern/entry.S</code>, trace into it, and see if you were right.</p>
<h4 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h4><p>题目包括两个部分</p>
<ul>
<li>一是观察内存地址映射瞬间的状态</li>
<li>二是分析内存地址映射失败的影响</li>
</ul>
<h5 id="观察内存地址映射瞬间的状态"><a href="#观察内存地址映射瞬间的状态" class="headerlink" title="观察内存地址映射瞬间的状态"></a>观察内存地址映射瞬间的状态</h5><p>题目要求观察执行命令<code>movl %eax, %cr0</code>前后<code>0x00100000</code>和<code>0xf0100000</code>两个地址的内容，在执行前地址映射尚未完成，因此两个位置的内容不同，执行后地址映射完成，两个位置的内容将会相同</p>
<ol>
<li>启动qemu和gdb，在<code>mov %eax %cr0</code>所在的地址<code>0x100025</code>处加断点，运行至此，使用<code>x/16xw</code>查看两个地址往后16个word的内容</li>
</ol>
<blockquote>
<p>会发现此时<code>0xf0100000</code>还没有得到映射，此时<code>0x00100000</code></p>
</blockquote>
<ol start="2">
<li>继续往下执行，再次查看会发现此时已经映射成功</li>
</ol>
<h5 id="分析地址映射失败的影响"><a href="#分析地址映射失败的影响" class="headerlink" title="分析地址映射失败的影响"></a>分析地址映射失败的影响</h5><p>这里要判断内存地址失败后哪些指令会运行失败，判断为<code>mov $relocated, %eax</code>和<code>jmp %eax</code>会失败。因为<code>relocated</code>这个地址是由段地址加上偏移地址得到的，段地址是<code>0xf0100008</code>，如果地址映射失败，那么<code>jmp %eax</code>就会跳到<code>0xf0100008</code>加上偏移量的物理地址，导致出错</p>
<p>将<code>kern/entry.S</code>的<code>movl %eax, %cr0</code>注释掉，重新启动qemu和gdb，在<code>jmp %eax</code>加断点，使用c命令运行到这里，使用<code>x/16xw</code>查看两个地址往后16word的内容，会发现两者不同，后者依然是全0，说明地址映射却是失败了</p>
<p>继续往下执行，发现<code>gdb</code>报错，因为<code>0xf010002c</code>地址后面的数据全为0，导致把空指针赋值给寄存器而报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) si</span><br><span class="line">=&gt; 0xf010002c &lt;relocated&gt;:  add    %al,(%eax)</span><br><span class="line">relocated () at kern/entry.S:74</span><br><span class="line">74      movl    <span class="variable">$0x0</span>,%ebp           <span class="comment"># nuke frame pointer</span></span><br><span class="line">(gdb) </span><br><span class="line">Remote connection closed</span><br></pre></td></tr></table></figure>

<p>此时qemu也会打印一堆错误信息而终止运行。</p>
<h3 id="Exercise-8"><a href="#Exercise-8" class="headerlink" title="Exercise 8"></a>Exercise 8</h3><h4 id="1-补全打印八进制整数"><a href="#1-补全打印八进制整数" class="headerlink" title="1 补全打印八进制整数"></a>1 补全打印八进制整数</h4><blockquote>
<p>在kern/console.c 中补全</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">  num = getuint(&amp;ap, lflag);</span><br><span class="line">  base = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">goto</span> number;</span><br></pre></td></tr></table></figure>

<h4 id="2-解释console-c的部分代码"><a href="#2-解释console-c的部分代码" class="headerlink" title="2. 解释console.c的部分代码"></a>2. 解释console.c的部分代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(crt_pos &gt;= CRT_SIZE)&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  memmove(crt_buf, crt_buf + CRT_TOLS, (CRT_SIZE-CRT_COLS)*<span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>));</span><br><span class="line">  <span class="keyword">for</span>(i = CRT_SIZE - CRT_COLS; i&lt;CRT_SIZE; ++i)&#123;</span><br><span class="line">    crt_buf[i] = <span class="number">0x0700</span>|<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  crt_pos -= CRT_COLS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，<code>CRT(cathode raytube)</code>为阴极射线显示器，根据<code>console.h</code>中的定义，<code>CRL_COLS</code>为显示器每行的字长（1个字占2个字节），取值为80；</p>
<p><code>CRT_ROWS</code>为显示器的行数，取值为25；</p>
<p>而<code>#define CRT_SIZE(CRT_ROWS*CRT_COLS)</code>是显示器屏幕能够容纳的字数，即2000。</p>
<p>当<code>CRT_POS &gt;= CRT_SIZE</code>时，说明显示器屏幕已经写满，因此将屏幕的内容上移一行，即将第2行到最后1行（即第25行）的内容覆盖第1行至倒数第2行(即第24行)，接下来将最后1行的内容用黑色的空格填满。</p>
<p>用空格字符、0x0700进行或操作的目的是让空格的颜色为黑色。最后更新<code>crt_pos</code>的值，总的来说，这段代码的作用是当屏幕写满内容时将其上移1行，并将最后一行用黑色空格塞满。</p>
<h4 id="3-跟踪以下代码并回答问题"><a href="#3-跟踪以下代码并回答问题" class="headerlink" title="3. 跟踪以下代码并回答问题"></a>3. 跟踪以下代码并回答问题</h4><ul>
<li>In the call to cprintf(), to what does fmt point.To what does ap point?</li>
<li>List each call to <code>cons_putc</code>, va_arg, and vcprintf.For cons_putc, list its argument as well. For va_arg, list what ap points to before and after the call. For vcprintf list the values of its two arguments</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>, y=<span class="number">3</span>, z=<span class="number">4</span>;</span><br><span class="line">cprintf(<span class="string">&quot;x %d, y %x, z %d\n&quot;</span>, x, y, z);</span><br></pre></td></tr></table></figure>

<ol>
<li>fmt 指向格式化字符串<code>x %d, y %x, z %d\n</code>的内存地址，ap指向第一个要打印的参数的内存地址，即x的地址</li>
<li>列出每次调用<code>cons_putc</code>, <code>va_arg</code>, 和<code>vcprintf</code>的状态：</li>
</ol>
<ul>
<li>cprintf首先调用vcprintf，调用时传入的第一个参数fmt的值为格式化字符串<code>&quot;x %d, y %x, z %d\n&quot;</code>的地址，第2个参数ap指向x的地址</li>
<li>vcprintf调用vprintfmt，vprintfmt函数中多次调用va_arg和putch, putch调用cputchar，而cputchar调用cons_putc， putch的第一个参数最终会传到cons_putc， 接下来按代码执行顺序列出每次调用这些函数的状态</li>
</ul>
]]></content>
      <categories>
        <category>XV6-Core</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>xv6</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System -- Pipeline</title>
    <url>/2021/04/21/OS/Operating%20System%20--%20Pipeline/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Operating-System-–-Pipeline"><a href="#Operating-System-–-Pipeline" class="headerlink" title="Operating System – Pipeline"></a>Operating System – Pipeline</h1><p>解决问题：</p>
<ul>
<li>什么是管道以及为什么要有管道</li>
<li>管道怎么分类</li>
<li>管道的实现是什么样的</li>
<li>管道有多大</li>
<li>管道的大小是不是可以调整及如何调整</li>
</ul>
<h2 id="1-什么是pipe"><a href="#1-什么是pipe" class="headerlink" title="1 什么是pipe"></a>1 什么是pipe</h2><p>在UNIX早期shell发明人道格拉斯·麦克罗伊发现，系统操作执行命令的时候，经常需要要将一个程序的输出交给另一个程序进行处理</p>
<p>这类操作通常使用<code>输入输出重定向+文件</code>搞定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -l /etc/ &gt; etc.txt</span><br><span class="line">$ wc -l etc.txt</span><br><span class="line">128 etc.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>wc</code>（word count）用来统计文件包含的字节数、单词数及文件的行数（即换行符的个数）</p>
<p><code>-l</code>表示<code>--list</code>，前者为短选项，后者为长选项。<code>-h</code>对应于<code>--help</code></p>
</blockquote>
<p>但是这样的操作有些麻烦，于是出现了<strong>管道</strong></p>
<p>在任何一个shell中，都可以使用<code>|</code>连接两个命令，shell会将前后两个进程的输入输出用一个pipeline相连，达到进程间通信的目的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -l /etc/ | wc -l</span><br><span class="line">128</span><br></pre></td></tr></table></figure>

<p>对比上述两种方法，可以理解为，管道本质就是一个文件，前面的进程<strong>以写方式</strong>打开文件，后面的进程<strong>以读方式</strong>打开。</p>
<p>这样前面写完后面读，这样就形成了通信。</p>
<p>实际上管道的设计也是遵循UNIX“一切皆文件”的设计原则的，它本质上就是一个文件，LINUX直接把管道实现成了一种文件系统，借助VFS（Virtual File System）给应用程序提供操作接口。</p>
<p>虽然pipeline实现形态上是文件，但是它本身并不占用磁盘或者其他外部存储的空间</p>
<p>在LINUX的实现上，它占用的是内存空间，所以LINUX上的管道就是一个操作方式</p>
<h2 id="2-管道的分类和使用"><a href="#2-管道的分类和使用" class="headerlink" title="2 管道的分类和使用"></a>2 管道的分类和使用</h2><p>LINUX上的管道分两种类型：<code>匿名管道</code> &amp; <code>命名管道</code>，也叫有名&amp;无名管道</p>
<ul>
<li><strong>匿名管道</strong></li>
</ul>
<p>匿名管道最常见的形态即上述的<code>&quot;|&quot;</code>，特点是只能在父子进程中使用，父进程在产生子进程前必须打开一个管道文件，然后fork产生子进程；</p>
<p>这样子进程通过拷贝父进程的进程地址空间获得同一个管道文件的描述符，达到使用同一个管道通信的目的；</p>
<p>此时除了父子进程外，没人知道这个管道文件的描述符，因此通过这个管道中的信息无法传递给其他进程，保证了传输数据的安全性，但是也降低了管道的通道性。</p>
<p>因此出现了命名管道</p>
<ul>
<li><strong>命名管道</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用mkfifo 或 mknod命令来创建一个命名管道，与创建一个文件没有什么区别</span></span><br><span class="line">$ mkfifo pipe</span><br><span class="line">$ ls -l pipe</span><br><span class="line">prw-r--r--  1 zoriswang  staff  0  4 21 21:39 pipe</span><br></pre></td></tr></table></figure>

<p>创建出来的文件类型为p类型，表示为pipeline文件；</p>
<p>有了这个管道文件，系统中就有了对一个管道的全局名称，于是任何两个不相关的进程都可以通过这个管道文件进行通信。</p>
<p>比如让一个进程写这个管道文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> xxxxxx &gt; pipe</span><br></pre></td></tr></table></figure>

<p>此时写操作会阻塞，因为管道另一端没人读，这是内核对管道文件定义的默认行为，此时如果有进程读这个pipeline，阻塞才会解除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat pipe</span><br><span class="line">xxxxxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当使用读操作也会发生<strong>阻塞</strong>现象</p>
</blockquote>
<hr>
<p>LINUX中对于命名管道和匿名管道，底层用的都是同一文件系统（pipefs）的操作行为，可以在<code>/etc/proc/filesystems</code>中找你的系统是否支持这种文件系统</p>
<blockquote>
<p>QwQ，但是unix上面好像没有这个文件</p>
</blockquote>
<p>来看看系统编程中如何使用管道</p>
<h2 id="3-PIPE"><a href="#3-PIPE" class="headerlink" title="3 PIPE"></a>3 PIPE</h2><p>把匿名管道和命名管道分别叫做PIPE和FIFO，因为在系统编程中，创建匿名管道的系统调用是<code>pipe()</code>，而创建命名管道的函数是<code>mkfifo()</code>。</p>
<p>使用<code>mknod()</code>系统调用并制定文件类型为<code>S_IFIFO</code>也可以创建一个<code>FIFO</code></p>
<p>使用<code>pipe()</code>系统调用可以创建一个匿名管道，这个系统调用的原型为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> pipefd[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure>

<p>这个方法会创建出两个文件描述符，可以使用<code>pipefd</code>这个数组来引用这两个描述符进行文件操作</p>
<p><code>pipefd[0]</code>以读方式打开，作为管道的读描述符，<code>pipefd[1]</code>以写方式打开，作为管道的写描述符</p>
<p>从管道写端写入的数据会被内核缓存知道有人从另一端读取为止</p>
<p><strong>举个例子</strong></p>
<ul>
<li><strong>用到的函数</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perror</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>; <span class="comment">//打印输入字符串和发生错误的errno信息</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> handle, <span class="keyword">void</span> *buf, <span class="keyword">int</span> nbyte)</span></span>; <span class="comment">//handle为文件描述符；buf为指定的缓冲区（指针），指向一段内存单元</span></span><br><span class="line">                                                <span class="comment">//nbyte是写入文件制定的字节数；</span></span><br><span class="line">                                                <span class="comment">//返回值：成功写入：写的字节数，错误返回-1</span></span><br><span class="line">------</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span>                             <span class="comment">//fd[0]读端,fd[1]写端</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>同理<code>read</code>函数parameters与write相同</p>
<p>其中BUFSIZE为系统默认的缓存区大小</p>
</blockquote>
<ul>
<li><strong>创建管道</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRING <span class="meta-string">&quot;hello,world!&quot;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * perror在&lt;stdlib.h&gt;中定义</span></span><br><span class="line"><span class="comment"> * 用来将上一个函数发生错误的原因输出到标准设备</span></span><br><span class="line"><span class="comment"> * 参数s所指的字符串会先打印出，后面再加上错误原因字符串</span></span><br><span class="line"><span class="comment"> * 库函数中有errno变量，每个errno值对应字符串表示的错误类型</span></span><br><span class="line"><span class="comment"> * perror函数将输入的信息与errno所对应的错误一起输出</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> buf[BUFSIZ];</span><br><span class="line">    <span class="keyword">if</span>(pipe(pipefd) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe()&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(write(pipefd[<span class="number">1</span>], STRING, <span class="built_in">strlen</span>(STRING) &lt; <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;write()&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(read(pipefd[<span class="number">0</span>], buf, BUFSIZ) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;read()&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个程序创建了一个管道，并且对管道写了一个字符串之后从管道读取，并打印在标准输出上</p>
<img src="https://i.loli.net/2021/04/22/ZMHXWOrjDdIG8YR.png" alt="管道创建过程.png" style="zoom:33%;">

<p>如图所示，fork产生的子进程会继承父进程所对应的文件描述符</p>
<p>利用这个特性，父进程先pipe创建管道之后，子进程也会得到同一个管道的读写文件描述符，从而实现父子两个进程使用一个管道完成<strong>半双工通信</strong></p>
<p>此时，父进程可以通过fd[1]给子进程发消息，子进程通过fd[0]读；</p>
<p>同样，子进程通过fd[1]给父进程发消息，父进程用fd[0]读</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRING <span class="meta-string">&quot;hello world!&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">pid_t</span> pid;          <span class="comment">//定义的是管道号类型</span></span><br><span class="line">    <span class="keyword">char</span> buf[BUFSIZ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pipe(pipefd) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe()&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork()!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*this is a child*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child&#x27;s pid is: %d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="keyword">if</span>(read(pipefd[<span class="number">0</span>], buf, BUFSIZ) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;read()&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">        bzero(buf, BUFSIZ);</span><br><span class="line">        <span class="built_in">snprintf</span>(buf, BUFSIZ, <span class="string">&quot;Message from child: My pid is: %d&quot;</span>, getpid());</span><br><span class="line">        <span class="keyword">if</span>(write(pipefd[<span class="number">1</span>], buf, <span class="built_in">strlen</span>(buf)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;write()&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Parent pid is: %d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">snprintf</span>(buf, BUFSIZ, <span class="string">&quot;Message from parent: My pid is: %d&quot;</span>, getpid());</span><br><span class="line">        <span class="keyword">if</span> (write(pipefd[<span class="number">1</span>], buf, <span class="built_in">strlen</span>(buf)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;write()&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        bzero(buf, BUFSIZ);</span><br><span class="line">        <span class="keyword">if</span> (read(pipefd[<span class="number">0</span>], buf, BUFSIZ) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;write()&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>父进程先给子进程发一个消息，子进程接收到之后打印消息，之后再给父进程发消息，父进程再打印从子进程接收到的消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Parent pid is: 64964</span><br><span class="line">child<span class="string">&#x27;s pid is: 64965</span></span><br><span class="line"><span class="string">Message from parent: My pid is: 64964</span></span><br><span class="line"><span class="string">Message from child: My pid is: 64965</span></span><br></pre></td></tr></table></figure>

<p>这个例子说明管道实际上可以实现一个半双工通信的机制，使用同一个管道的父子进程可以分时给对方发送消息，这个也体现了对管道读写的一些特点：</p>
<ul>
<li>管道中如果没有数据，读操作会阻塞到直到有数据为止</li>
<li>当一次写的数据量不超过管道容量时，写操作一般不会阻塞，写数据会直接写入管道缓冲区</li>
</ul>
<p><strong>那么写操作什么情况下发生阻塞呢？</strong></p>
<p>因为管道实际上是由内核控制的一个内存缓冲区，既然是缓冲区，就有容量上限。</p>
<p>我们把管道一次最多可以缓存的数据量大小叫做PIPESIZE。</p>
<p>内核在处理管道数据的时候，底层也要调用类似read和write方法进行数据拷贝，这种内核操作每次可以操作的数据量也是有限的；</p>
<p>一般的操作长度为一个page，默认为4k字节，把每次可操作的数据量长度叫做PIPEBUF</p>
<blockquote>
<p>POSIX标准下，PIPEBUF最小长度不得低于512字节</p>
<p>PIPEBUF作用：在处理管道时，如果读操作长度没有大于PIPESIZE，则保证操作是原子的</p>
</blockquote>
<p>而PIPESIZE的影响为，<strong>大于</strong>其长度的写操作会被<strong>阻塞</strong>，直到当前管道中的数据被读取为止</p>
<h2 id="4-小贴士"><a href="#4-小贴士" class="headerlink" title="4 小贴士"></a>4 小贴士</h2><h3 id="4-1-单工模式"><a href="#4-1-单工模式" class="headerlink" title="4.1 单工模式"></a>4.1 单工模式</h3><p>在半双工管道的情况下，管道两端可能有多个进程进行读写处理，如果再加上线程，会更加复杂</p>
<p>实际运用上，推荐使用的方法是<strong>单工模式：</strong> 一个进程只写管道，一个进程只读管道</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRING <span class="meta-string">&quot;hello world!&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> buf[BUFSIZ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pipe(pipefd) == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe()&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;fork()&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/*this is a child*/</span></span><br><span class="line">        close(pipefd[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child&#x27;s pid is:%d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="keyword">if</span>(read(pipefd[<span class="number">0</span>], buf, BUFSIZ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;read()&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/*this is a parent*/</span></span><br><span class="line">        close(pipefd[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent&#x27;s pid is:%d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="keyword">if</span>(write(pipefd[<span class="number">1</span>], STRING, <span class="built_in">strlen</span>(STRING)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">&quot;write()&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上，父进程关闭管道的读断，只写管道；子进程关闭管道的写道，只读管道</p>
<p>表示为：</p>
<img src="https://i.loli.net/2021/04/22/s3IRHrcibWqPBUE.png" alt="单工模式管道.png" style="zoom:33%;">

<p>注意处理管道时也要加入越界判断&amp;错误检查</p>
<h3 id="4-2-FIFO"><a href="#4-2-FIFO" class="headerlink" title="4.2 FIFO"></a>4.2 FIFO</h3><p>命名管道在底层的实现与匿名管道完全一致，区别是命名管道会有一个全局可见的文件供别人open打开使用</p>
<p>程序中创建一个命名管道文件的方法有两种：mkfifo 与 mknod</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* pathname, <span class="keyword">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure>

<p><code>mkfifo()</code>会依参数<code>pathname</code> 建立特殊的FIFO 文件, 该文件必须不存在, 而参数mode 为该文件的权限 <code>(mode%~umask)</code>, 因此umask 值也会影响到FIFO 文件的权限. <code>Mkfifo()</code>建立的FIFO 文件其他进程都可以用读写一般文件的方式存取. 当使用<code>open()</code>来打开FIFO 文件时, <code>O_NONBLOCK </code>旗标会有影响：</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Chapter 0</title>
    <url>/2021/04/21/XV6-Core/Chapter-0/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Chapter-0"><a href="#Chapter-0" class="headerlink" title="Chapter 0"></a>Chapter 0</h1><h2 id="0-1-操作系统接口"><a href="#0-1-操作系统接口" class="headerlink" title="0.1 操作系统接口"></a>0.1 操作系统接口</h2><p><strong>操作系统的工作：</strong></p>
<ul>
<li>资源共享</li>
<li>管理并抽象底层硬件，如，word不用关心自己使用的是哪种硬盘</li>
<li>多路复用硬件，使程序看起来是并行的</li>
<li>对程序提供受控的交互方式，使得程序之间可以共享数据、共同工作</li>
</ul>
<img src="https://i.loli.net/2021/04/21/7b3NmXovpCMwEls.png" alt="0.1 A kernel and two user processes.png" style="zoom:33%;">

<p>上图所示即传统的内核，<code>sys call</code>会进入内核，让内核执行服务然后返回，所以进程总是在用户空间和内核空间之间交替运行</p>
<ul>
<li><strong>进程（运行中的程序）</strong>都拥有包含<strong>指令、数据、栈</strong>的内存空间<ul>
<li><strong>指令</strong>实现了程序的运算</li>
<li><strong>数据</strong>是用于运算过程的变量</li>
<li><strong>栈</strong>管理程序的过程调用</li>
</ul>
</li>
<li><strong>shell</strong>为普通的程序，接受用户输入的命令并执行它们，也是传统UNIX系统中最基本的用户界面<ul>
<li>shell是普通程序，不是内核的一部分</li>
<li>这也说明了shell是可替代的</li>
</ul>
</li>
</ul>
<p>内核使用CPU的<strong>硬件保护机制</strong>来保证用户进程只能访问自己的内存空间，<strong>内核</strong>拥有实现保护机制所需要的硬件权限（Hardware Privileges），但是用户程序没有这些权限。</p>
<p>当一个用户程序进行一次系统调用时，硬件会提升<strong>特权级</strong>并且开始执行一些内核中预定义的功能</p>
<p>在这里，提供的用户程序可见的OS接口为：</p>
<table>
<thead>
<tr>
<th align="center">系统调用</th>
<th align="center">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">fork()</td>
<td align="center">创建进程</td>
</tr>
<tr>
<td align="center">Exit()</td>
<td align="center">结束进程</td>
</tr>
<tr>
<td align="center">Wait()</td>
<td align="center">等待子进程结束</td>
</tr>
<tr>
<td align="center">Kill(pid)</td>
<td align="center">结束pid所指进程</td>
</tr>
<tr>
<td align="center">Getpid()</td>
<td align="center">获取当前pid所指进程</td>
</tr>
<tr>
<td align="center">Sleep()</td>
<td align="center">睡眠n秒</td>
</tr>
<tr>
<td align="center">Exec(filename, *argv)</td>
<td align="center">加载并执行一个文件</td>
</tr>
<tr>
<td align="center">Sbrk(n)</td>
<td align="center">为进程空间增加n个字节</td>
</tr>
<tr>
<td align="center">Open(filename, flags)</td>
<td align="center">打开文件，flags制定R/W模式</td>
</tr>
<tr>
<td align="center">Read(fd, buf, n)</td>
<td align="center">从文件fd中读取n个字节到buf中</td>
</tr>
<tr>
<td align="center">Write(fd, buf, n)</td>
<td align="center">从buf中写n个字节到文件</td>
</tr>
<tr>
<td align="center">close(fd)</td>
<td align="center">关闭打开的文件fd</td>
</tr>
<tr>
<td align="center">Dup(fd)</td>
<td align="center">复制文件fd</td>
</tr>
<tr>
<td align="center">Pipe(p)</td>
<td align="center">创建管道，把读和写的fd返回到p</td>
</tr>
<tr>
<td align="center">Chdir(dirname)</td>
<td align="center">改变当前目录</td>
</tr>
<tr>
<td align="center">Mkdir(dirname)</td>
<td align="center">创建新的目录</td>
</tr>
<tr>
<td align="center">mknod(name, major, minor)</td>
<td align="center">创建设备文件</td>
</tr>
<tr>
<td align="center">fstat(fd)</td>
<td align="center">返回文件信息</td>
</tr>
<tr>
<td align="center">link(f1, f2)</td>
<td align="center">给f1创建一个新名字f2</td>
</tr>
<tr>
<td align="center">Unlink(filename)</td>
<td align="center">删除文件</td>
</tr>
</tbody></table>
<h2 id="0-2-进程和内存"><a href="#0-2-进程和内存" class="headerlink" title="0.2 进程和内存"></a>0.2 进程和内存</h2><p>xv6由两部分组成：用户内存空间（指令，数据，栈）&amp; 仅对内核可见的进程状态</p>
<p>其也提供了<strong>分时</strong>特性，能在可用CPU之间不断切换，决定了哪一个等待中的进程被执行</p>
<p>当进程不执行时，xv6保存它的CPU寄存器，当他们再次被执行时，会恢复这些寄存器的值，内核将每个进程和一个pid关联起来</p>
<p>一个进程可以通过系统调用<code>fork</code>来创建一个新的进程，<code>fork</code>创建的新进程被称为子进程，子进程的内存内容同创建他的进程（父进程）一样</p>
<p><code>fork</code>在父进程、子进程中都返回（一次调用两次返回），对于父进程它返回子进程的pid，子进程则返回0.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pid;</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;parent: child=%d\n&quot;</span>, pid);</span><br><span class="line">  pid = wait();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;child %d id done&quot;</span>, pid);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;child: existing\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>系统调用<code>exit</code>会导致调用它的进程停止运行，并且释放如内存和打开文件在内的资源。系统调用<code>wait</code>会返回一个<strong>当前进程</strong>已退出的子进程，如果没有子进程退出，<code>wait</code>会等候直到有一个子进程退出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">parent: child=<span class="number">1234</span>;</span><br><span class="line">child: existing</span><br></pre></td></tr></table></figure>

<p>可能以任意顺序被打印，这种顺序由父进程或子进程谁先结束<code>printf</code>决定。当子进程退出时，父进程的<code>wait()</code>也就返回了，于是父进程打印</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">parent:child <span class="number">1234</span> is done</span><br></pre></td></tr></table></figure>

<p>系统调用<code>exec</code>将从某个文件（通常是<strong>可执行文件</strong>）里读取内存镜像，并将其替换到调用它的<strong>进程的内存空间</strong>，这份文件必须符合特定的格式，规定文件的那一部分是<strong>指令</strong>，那一部分是<strong>数据</strong>，哪里是指令的开始等</p>
<p>xv6使用ELF文件格式，当<code>exec</code>执行成功后，它并不返回到原来的调用进程，而是从ELF头中声明的入口开始，执行从文件中加载的指令</p>
<blockquote>
<p><code>exec(char *file, char *argc[])</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *argv[<span class="number">3</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;echo&quot;</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">argv[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">exec(<span class="string">&quot;/bin/echo&quot;</span>, argv);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;exec error\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里将调用程序<code>/bin/echo</code>，参数列表为<code>echo hello</code>，大部分的程序都忽略第一个参数，这个参数管理上为程序的名字（此例是<code>echo</code>）</p>
<p>以（8001）<code>main</code>为例</p>
<blockquote>
<p>Sheet 80 中的第8001行</p>
</blockquote>
<p>主循环通过<code>getcmd</code>读取命令行的输入，调用<code>fork</code>生成一个shell进程的副本。父shell调用<code>wait</code>，子进程执行用户命令</p>
<p>如当在cmd中输入<code>echo hello</code>，<code>runcmd</code>将调用<code>exec</code>。</p>
<p>如果<code>exec</code>被成功调用，子进程会转而去执行<code>echo</code>程序里的指令</p>
<p>在某个时刻<code>echo</code>会调用<code>exit</code>，此时父进程将从<code>wait</code>返回</p>
<blockquote>
<p>插个眼：为什么fork和exec没有被合并成一个调用呢？</p>
</blockquote>
<p>xv6隐式分配用户的内存空间</p>
<p><code>fork</code>在子进程需要装入父进程的内存拷贝时分配空间</p>
<p><code>exec</code>在需要装入可执行文件时分配空间</p>
<p>一个进程在需要额外内存时可以通过调用<code>sbrk(n)</code>来增加<code>n</code>字节的数据内存，由<code>sbrk</code>返回新的内存的地址</p>
<p><strong>xv6中没有用户的概念，因此没有设置不同用户间的保护隔离措施，即所有xv6进程都以root用户执行</strong></p>
<h2 id="0-3-I-O-和-文件描述符"><a href="#0-3-I-O-和-文件描述符" class="headerlink" title="0.3 I/O 和 文件描述符"></a>0.3 I/O 和 文件描述符</h2><p><strong>文件描述符</strong>为一个整数，它代表了一个进程可以读写的被内核管理的对象。</p>
<p>进程可以通过多种方式获得一个文件描述符，如打开文件、目录、设备或者创建一个<a href="https://warmchay.github.io/2021/04/21/OS/Operating%20System%20--%20Pipeline/">管道(pipe)</a>，或者复制已经存在的文件描述符。</p>
<p>简单描述，我们常常把文件描述符指向的对象称为“文件”，文件描述符的接口是对文件、管道、设备等的抽象，这类抽象使得他们看上去就是字节流</p>
<p>每个进程都有一张表，而xv6内核就以文件描述符作为这张表的索引，所以每个进程都有一个从0开始的文件描述符空间。</p>
<p>按照惯例，进程从文件描述符0读入（标准输入），从文件描述符1输出（标准输出），从文件描述符2输出错误（标准错误输出）；</p>
<p>我们会看到shell利用了这种惯例来实现I/O重定向，shell保证了在任何时候都有3个打开的文件描述符<code>fd[3]</code>（8007），为console的默认文件描述符；</p>
<p>系统调用<code>read</code>和<code>write</code>从文件描述符所指的文件中读或者写n个字节</p>
<ul>
<li><code>read(fd, buf, n)</code></li>
</ul>
<p>read表示从fd读最多n个字节，将它们拷贝到<code>buf</code>中，然后返回读出的字节数。</p>
<p>每一个指向文件的文件描述符和一个偏移关联，<code>read</code>从当前文件偏移处读取数据，然后把偏移增加读出字节数。之后read会从新的起点开始读数据，当没有数据可读时，read返回0表示文件读取结束。</p>
<ul>
<li><code>write(fd, buf, n)</code></li>
</ul>
<p>write表示写buf中的n个字节到fd，并且返回实际写出的字节数。如果返回值小于n说明可能发生了错误。</p>
<p>与read相同，write也从当前文件的偏移处开始写，在写的过程中增加这个偏移。</p>
<hr>
<p>如下面这段程序（为cat的本质实现），表示将数据从标准输入复制到标准输出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    n = read(<span class="number">0</span>, buf, <span class="keyword">sizeof</span> buf);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;read error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(write(<span class="number">1</span>, buf, n) != n)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="number">2</span>, <span class="string">&quot;write error\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>系统调用close会释放一个文件描述符，使得它未来可以被open，pipe，dup等调用重用。一个新分配的文件描述符永远都是当前进程的最小的未被使用的文件描述符</p>
<p>文件描述符和fork的交叉使用使得I/O重定向能够轻易实现，<code>fork</code>会复制父进程的文件描述符和内存，因此子进程与父进程的文件描述符一样.<code>exec</code>会替换调用它的进程的内存但是会保留它的文件描述符表。</p>
<p>这种行为使得shell可以这样实现重定向：fork一个进程，重新打开指定文件的文件描述符，然后执行新的程序，下面是一个简化版的shell执行<code>cat&lt;input.txt</code>的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">  close(<span class="number">0</span>);</span><br><span class="line">  open(<span class="string">&quot;input.txt&quot;</span>, O_RDONLY);</span><br><span class="line">  exec(<span class="string">&quot;cat&quot;</span>, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子进程关闭文件描述符0后，可以保证open会使用0作为新打开的文件<code>input.txt</code>的文件描述符（因为0是open执行时的最小可用文件描述符）。之后cat就会在标准输入指向<code>input.txt</code>的情况下运行。</p>
<p>在（7930）中shell的代码中，此时fork出了子进程，在子进程中<code>runcmd</code>会调用<code>exec</code>加载新的程序。这体现了为何<code>fork</code>和<code>exec</code>是单独的两种系统调用，这种区分使得shell可以在子进程执行指定程序之前对子进程进行修改。</p>
<p>虽然<code>fork</code>复制了文件描述符，但每一个文件当前的<strong>偏移</strong>仍然是在父子进程之间共享的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;hello &quot;</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wait();</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;world\n&quot;</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码表示，父进程的write会在子进程write结束的地方继续写（因为<code>wait</code>）</p>
<p>这种行为有利于顺序执行的shell命令的顺序输出，如:<code>(echo hello;echo world)&gt;output.txt</code></p>
<p><code>dup</code>复制一个已有的文件描述符，返回一个指向同一个输入/输出对象的新描述符，这两个描述符共享一个文件偏移，正如被fork复制的文件描述符一样。这里有另一种打印“hello world”的方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd = dup(<span class="number">1</span>);</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">6</span>);</span><br><span class="line">write(fd, <span class="string">&quot;world/n&quot;</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<p>这个过程中，通过一系列fork和dup调用产生的文件描述符都共享同一个文件偏移，而其他情况下产生的文件描述符就不是这样了</p>
<p>即使它们打开的都是同一份文件，dup允许shell像这样实现命令：<code>ls existing-file non-exsiting-file&gt;tmp1 2&gt;&amp;1</code>, <code>2&gt;&amp;1</code>告诉shell这条命令一个复制描述符1的描述符2，这样<code>existing-file</code>和<code>non-exsiting-file</code>的错误输出都将出现在他tmp1中，</p>
<blockquote>
<p><strong>这一块我有点懵，为什么复制了描述符后能显示错误输出呢</strong></p>
</blockquote>
<h2 id="0-4-管道"><a href="#0-4-管道" class="headerlink" title="0.4 管道"></a>0.4 管道</h2><p>管道作为小的内核缓冲区，以文件描述符对的形式提供给进程，一个用于写操作，一个用于读操作，管道提供了一种进程间交互的方式。</p>
<p>结下来的代码运行了程序<code>wc</code>（word count），其标准输出绑定到了一个管道的读端口</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> p[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">&quot;wc&quot;</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">pipe(p);</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">    close(<span class="number">0</span>);</span><br><span class="line">    dup(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">    exec(<span class="string">&quot;/bin/wc&quot;</span>, argv);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    write(p[<span class="number">1</span>], <span class="string">&quot;hello world\n&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    close(p[<span class="number">0</span>]);</span><br><span class="line">    close(p[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段程序调用<code>pipe</code>，创建一个新的管道并且将读写描述符记录在数组<code>p</code>中。</p>
<p>在fork之后，父进程和子进程都有了指向管道的文件描述符，子进程将<strong>管道的读端口拷贝在描述符0上</strong>，关闭p中的描述符，然后执行<code>wc</code>，当<code>wc</code>从标准输入读取时，它实际上是从管道读取的。父进程向管道的写端口写入然后关闭它的两个文件描述符。</p>
<p>如果数据没有准备好，那么对管道执行的<code>read</code>会一直等待，直到有数据了或者其他绑定在这个管道写端口的描述符都已经关闭了。</p>
<p>在后一种情况中，read会返回0，就像是一份文件读到了最后，读操作会一直阻塞直到不可能再有新数据到来，这就是为什么我们在执行<code>wc</code>之前要关闭子进程的写端口。</p>
<p>如果wc指向了一个管道的写端口，那么wc永远也看不到EOF了。</p>
<p>Xv6 shell对管道的实现（如<code>fork sh.c | wc -l</code> )（7950）与上面的描述类似，子进程创建一个管道连接管道左右两端，为管道左右两端都调用<code>runcmd</code>，然后通过两个<code>wait</code>等待左右两端结束，管道右端可能也是一个带有管道的指令，如<code>a|b|c</code>，它<code>fork</code>两个新的子进程（一个<code>b</code>一个<code>c</code>），因此shell可能创建出一个进程树。</p>
<p>树的叶子节点是命令，中间节点是进程，他们会等待左子树和右子树执行结束。</p>
<blockquote>
<p>理论上，可以让中间节点都运行在管道的左端都运行在管道的左端，但做的这么精确会使得实现变得复杂。</p>
</blockquote>
<p>pipe可能看上去和临时文件没有什么两样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello world | wc</span><br></pre></td></tr></table></figure>

<p>也可以用无管道的方式实现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello world&gt;/tmp/xyz; wc &lt; /tmp/xyz</span><br></pre></td></tr></table></figure>

<p>管道和临时文件有三个关键的不同点：</p>
<ul>
<li>管道会进行自我清扫，如果是shell重定向的话，我们必须要在任务完成后删除<code>/tmp/xyz</code></li>
<li>管道可以传输任意长度的数据</li>
<li>管道允许<strong>同步</strong>，两个进程可以使用一个管道来进行二者之间的信息传递，每一个读操作都阻塞调用进程，直到另一个进程用write完成数据的发送</li>
</ul>
<h2 id="0-5-文件系统"><a href="#0-5-文件系统" class="headerlink" title="0.5 文件系统"></a>0.5 文件系统</h2><p>xv6文件系统提供文件和目录，文件就是一个简单的字节数组，而目录包含指向文件和其他目录的引用。</p>
<p>xv6把目录实现为一种特殊的文件，目录是一棵树，根节点是一个特殊的目录<code>root</code>。</p>
<p>不从<code>/</code>开始的目录表示的是相对调用进程当前目录的目录，调用进程的当前目录可以通过<code>chdir</code>这个系统调用进行改变，如下面的代码都能打开同一个文件<code>/a/b/c</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chdir</span>(<span class="string">&quot;/a&quot;</span>);</span><br><span class="line"><span class="built_in">chdir</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">open(<span class="string">&quot;c&quot;</span>, O_RDONLY);</span><br><span class="line"></span><br><span class="line">open(<span class="string">&quot;/a/b/c&quot;</span>, O_RDONLY);</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">O_RDONLY</th>
<th align="center">READ ONLY</th>
</tr>
</thead>
<tbody><tr>
<td align="center">O_WRONLY</td>
<td align="center">WRITE ONLY</td>
</tr>
<tr>
<td align="center">O_RDWR</td>
<td align="center">READ &amp; WRITE ONLY</td>
</tr>
<tr>
<td align="center">O_TRUNC</td>
<td align="center">若文件存在则长度被截为0</td>
</tr>
<tr>
<td align="center">O_CREATE</td>
<td align="center">文件不存在则建立新的文件</td>
</tr>
<tr>
<td align="center">O_EXCL</td>
<td align="center">废弃</td>
</tr>
</tbody></table>
<p>mknod在文件系统中创建一个文件，但是这个文件没有任何内容。相反，这个文件的元信息标识它是一个设备文件，记录了主设备号和辅设备号（<code>mknod</code>的两个参数），这<strong>两个设备号</strong>唯一确定一个内核设备，当一个进程之后打开这个文件的时候，内核将<strong>读、写的系统调用转发到内核设备</strong>的实现上，而不是传递给<strong>文件系统</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fstat</span><span class="params">(<span class="keyword">int</span> fd, struct stat *st)</span></span>; <span class="comment">//返回文件信息</span></span><br></pre></td></tr></table></figure>

<p><code>fstat</code>可以获取一个文件描述符指向的文件的信息，它填充一个名为<code>stat</code>的结构体，它在<code>stat.h</code>中定义为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DIR 1 <span class="comment">// directory</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_FILE 2 <span class="comment">// file</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DEV 3 <span class="comment">// device</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span>&#123;</span></span><br><span class="line">  <span class="keyword">short</span> type;   <span class="comment">// Type of file</span></span><br><span class="line">  <span class="keyword">int</span> dev;      <span class="comment">// File systems&#x27;s disk device</span></span><br><span class="line">  uint ino;     <span class="comment">// Inode number</span></span><br><span class="line">  <span class="keyword">short</span> nlink;  <span class="comment">// Number of links to file</span></span><br><span class="line">  uint size;    <span class="comment">// Size of file in bytes</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>文件名和这个文件本身有很大的区别，同一个文件（称为<code>inode</code>）可能有多个名字，称为<strong>连接（links）</strong>.</p>
<p>系统调用link创建另一个文件系统的名称，它指向同一个<code>inode</code>.下面的代码创建了一个既叫做a又叫做b的新文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open(<span class="string">&quot;a&quot;</span>, O_CREATE|O_WRONGLY);</span><br><span class="line">link(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>读写a相当于读写b，每一个<code>inode</code>都由唯一的<code>inode</code>号直接确定，在上面的代码中，可以通过<code>fstat</code>知道a和b都指向同样的内容：</p>
<blockquote>
<p><code>a</code> 和 <code>b</code>都会返回同样的inode号（<code>ino</code>），并且<code>nlink</code>数会设置为2</p>
</blockquote>
<p>系统调用unlink从文件系统移除<strong>一个文件名，一个文件的inode和磁盘空间</strong></p>
<p>一个文件的inode和磁盘空间只有当它的链接数变为0的时候才会被清空，也就是没有一个文件再指向它，因此在上面创建了a后，如果要删除：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">unlink(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们同样可以通过<code>b</code>来访问到它。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fd = open(<span class="string">&quot;/tmp/xyz&quot;</span>, O_CREATE|O_RDWR);</span><br><span class="line">unlink(<span class="string">&quot;/tmp/xyz&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如上，也是创建一个临时inode的最佳方式，这个inode会在进程关闭fd或者推出的时候被清空。</p>
]]></content>
      <categories>
        <category>XV6-Core</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>xv6</tag>
      </tags>
  </entry>
  <entry>
    <title>Lab 2 物理内存管理</title>
    <url>/2021/04/11/uCore/Lab%202%20%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>这个lab目的是完成一个简单的物理内存管理系统</p>
</blockquote>
<h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1 实验目的"></a>1 实验目的</h1><ul>
<li>理解基于段页式内存地址的转换机制</li>
<li>理解页表的建立和使用方法</li>
<li>理解物理内存的管理方法</li>
</ul>
<h1 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2 实验内容"></a>2 实验内容</h1><ol>
<li>了解如何发现系统中的物理内存</li>
<li>了解如何建立对物理内存的初步管理，即了解<strong>连续物理内存管理</strong></li>
<li>最后了解页表的相关操作，即如何<strong>建立页表</strong>来实现虚拟内存到物理内存之间的映射，对段页式内存管理机制有全面的了解</li>
</ol>
<h2 id="2-2-1-练习"><a href="#2-2-1-练习" class="headerlink" title="2.2.1 练习"></a>2.2.1 练习</h2><p>一共3个基本练习和2个扩展练习</p>
<h2 id="2-2-2-项目组成"><a href="#2-2-2-项目组成" class="headerlink" title="2.2.2 项目组成"></a>2.2.2 项目组成</h2><p>实验二在实验一基础上增加和修改的文件有：</p>
<ul>
<li><code>boot/bootasm.S</code>: 增加了对计算机系统中物理内存布局的探测功能</li>
<li><code>kern/init/entry.S:</code> 根据临时段表重新暂时建立好新的段空间，为进行分页做准备</li>
<li><code>kern/mm/default_pmm.[ch]:</code> 提供基于链表方法的物理内存管理</li>
<li><code>kern/mm/pmm.[ch]:</code> pmm.h定义物理内存管理类框架<code>struct pmm_manager，</code> 基于这个通用框架可以实现不同的物理内存管理策略和算法，来实现一个基于此框架的简单物理内存管理策略；<code>pmm.c</code>包含了对此物理内存管理类框架的访问，以及与建立、修改、访问页表相关的各种函数实现</li>
<li><code>kern/sync/sync.h:</code> 提供两个功能，一是保存eflag寄存器中的中断屏蔽位信息并屏蔽中断的功能，另一个是根据保存的中断屏蔽位信息来使能中断的功能</li>
<li><code>libs/list.h:</code> 定义了通用双向链表结构以及相关的查找、插入等基本操作，建立基于链表方法的物理内存管理（以及其他内核功能）的基础</li>
<li><code>libs/atomic.h:</code> 定义了对一个变量进行读写的原子操作，确保相关操作不被中断打断</li>
<li><code>tools/kernel.ld:</code> <code>ld</code>形成执行文件的地址所用到的链接脚本，修改了ucore的起始入口和代码段的起始地址</li>
</ul>
<h1 id="3-前置知识"><a href="#3-前置知识" class="headerlink" title="3 前置知识"></a>3 前置知识</h1><h2 id="3-1-x86-特权级（Privilege-Levels）"><a href="#3-1-x86-特权级（Privilege-Levels）" class="headerlink" title="3.1 x86 特权级（Privilege Levels）"></a>3.1 x86 特权级（Privilege Levels）</h2><ul>
<li>RING 0(内核)</li>
<li>RING 1(服务)</li>
<li>RING 2(服务)</li>
<li>RING 3(应用程序)</li>
</ul>
<p>当前os一般只用到了RING 0&amp;3, 如<strong>LINUX</strong>， 在访问数据段页表进入中断服务例程（ISR）CPU会检查特权级</p>
<h2 id="3-2-x86-特权级检查失败"><a href="#3-2-x86-特权级检查失败" class="headerlink" title="3.2 x86 特权级检查失败"></a>3.2 x86 特权级检查失败</h2><p>会提示<code>General Protection Fault</code>一般保护错误</p>
<h2 id="3-3-x86-特权级检查"><a href="#3-3-x86-特权级检查" class="headerlink" title="3.3 x86 特权级检查"></a>3.3 x86 特权级检查</h2><p><code>RPL</code> <strong>请求</strong>特权级 <code>DS ES GS FS</code>数据段</p>
<p><code>CPL</code> 当前特权级 存在于<code>CS/SS</code>的低2位</p>
<p><strong>选择子结构：</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412084055852.png" alt="image-20210412084055852" style="zoom:50%;">

<p><strong>DPL段或者门的特权级</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412084158645.png" alt="image-20210412084158645" style="zoom:50%;">

<p>访问门时<code>CPL &lt;= DPL[门]&amp;&amp; CPL &gt;= DPL[段]</code></p>
<p>访问段时<code>MAX(CPL, RPL) &lt;= DPL[段]</code>，具体看附录A</p>
<h2 id="3-3-x86-通过中断切换特权级"><a href="#3-3-x86-通过中断切换特权级" class="headerlink" title="3.3 x86 通过中断切换特权级"></a>3.3 x86 通过中断切换特权级</h2><p>首先在<strong>IDT</strong>建立好<strong>中断门</strong>来实现中断切换特权级</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412084400481.png" alt="image-20210412084400481" style="zoom:50%;">

<h2 id="3-4-RING-0-–-gt-RING-3"><a href="#3-4-RING-0-–-gt-RING-3" class="headerlink" title="3.4 RING 0 –&gt; RING 3"></a>3.4 RING 0 –&gt; RING 3</h2><p>当<code>RING 0</code>内核态发生中断的时候，首先因为发生中断的时候还是在<code>RING 0</code>所以不会将<code>ss esp</code>压入堆栈中，只会压入<code>Eflags cs eip</code>和中断错误码</p>
<p>因此，为了实现从<code>RING 0</code>到<code>RING 3</code>的特权级转换，将其<code>ss</code>改成特权级3的栈<code>CS</code>改为用户代码段，最后通过<code>IRET</code>将这些信息<code>POP</code>出栈，此时运行环境就进入了用户态中了</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412162659335.png" alt="image-20210412162659335" style="zoom:50%;">

<h2 id="3-5-RING-3-–-gt-RING-0"><a href="#3-5-RING-3-–-gt-RING-0" class="headerlink" title="3.5 RING 3 –&gt; RING 0"></a>3.5 RING 3 –&gt; RING 0</h2><p>当<code>RING 3</code>用户态发生中断时，会将<code>ss esp</code>压入堆栈中，这是为了跳出中断的时候，还能返回到这个用户态中，但目前是为了实现从<code>RING 3</code>到<code>RING 0</code>的特权级转换</p>
<p>因此<code>ss esp</code>是不需要的，将它们去掉同时将<code>CS</code>改为内核态代码段，最后还是通过<code>IRET</code>将这些信息<code>POP</code>出栈，就回到了<code>RING 0</code>内核态中</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412162914362.png" alt="image-20210412162914362" style="zoom:50%;">

<h2 id="3-6-TSS-任务状态段-Task-State-Segment"><a href="#3-6-TSS-任务状态段-Task-State-Segment" class="headerlink" title="3.6 TSS 任务状态段(Task State Segment)"></a>3.6 TSS 任务状态段(Task State Segment)</h2><p>TSS的位置能够从GDT中的<code>任务状态描述符表(Task State Descriptor)</code>中找到</p>
<p>因为IDT中的中断门有代码段选择子可以用它作为索引从GDT中找到实际的代码段的内存地址，但是ss和esp是不存在于中断门中的</p>
<p>他们存在于TSS中，TR（Task Register）寄存器会缓存TSS从而实现任务的切换</p>
<p>TSS在里面只会保存<code>RING 0~RING 2</code>的ss和esp，但是不会保存<code>RING 3</code>的<code>ss</code>和<code>esp</code>，因为CPU仅默认支持从<strong>低特权级跳转到高特权级</strong>，而RING 3是最低的特权级，不会有其他的特权级跳过去了，因此不再保存RING 3的SS和ESP</p>
<h2 id="3-7-x86-内存管理单元-MMU"><a href="#3-7-x86-内存管理单元-MMU" class="headerlink" title="3.7 x86 内存管理单元 MMU"></a>3.7 x86 内存管理单元 MMU</h2><p><strong>段机制</strong></p>
<p>首先通过<strong>段选择子</strong>作为索引在 GDT中找到段描述符，如果没有启动页机制的话，那么现在就找到线性地址</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412165915653.png" alt="image-20210412165915653" style="zoom:50%;">

<p>GDT存在于内存当中，因为它所占空间比较大，但是由于内存比较慢，每次去访问段表的时候，耗费比较大，因此硬件会将GDT中的描述信息放在CPU中来加快段的映射过程</p>
<p><strong>页机制</strong></p>
<p><strong>如何开启页机制</strong></p>
<ol>
<li>准备好页目标表和页表</li>
<li>页目录表物理地址，写入CR3寄存器</li>
<li>CR0最高位PG位置1</li>
</ol>
<p><strong>段机制和页机制都能作为映射机制，怎么选择？</strong></p>
<ul>
<li>选择页机制有助于硬件机制对其进行有效的处理</li>
<li>段机制和页机制结合成段页式的存储管理，从而既能便于程序的共享和保护，又能高效率利用存储空间</li>
</ul>
<p><strong>各种地址</strong></p>
<ul>
<li>保护模式：<code>段机制+段偏移 = 线性地址</code>， <code>若没有分页机制，则为物理地址</code></li>
<li><strong>实模式/保护模式：</strong> <code>段偏移 = 有效地址（逻辑地址）</code></li>
<li>开启分页后: <code>线性地址 == 虚拟地址</code></li>
</ul>
<h1 id="附录-中断"><a href="#附录-中断" class="headerlink" title="附录 中断"></a>附录 中断</h1><h2 id="附录A-调用门与特权级（CPL-amp-DPL-amp-RPL）"><a href="#附录A-调用门与特权级（CPL-amp-DPL-amp-RPL）" class="headerlink" title="附录A 调用门与特权级（CPL &amp; DPL &amp; RPL）"></a>附录A 调用门与特权级（CPL &amp; DPL &amp; RPL）</h2><blockquote>
<p>这个为保护模式下($CR_{0}=1$)的调用门与特权级</p>
</blockquote>
<h3 id="1-特权级"><a href="#1-特权级" class="headerlink" title="1 特权级"></a>1 特权级</h3><blockquote>
<p>从0(kern)-3(user)，数字越小表示特权级别越大</p>
<p>有时也把高特权级称为内层，低特权级称为外层</p>
</blockquote>
<h4 id="1-1-CPL"><a href="#1-1-CPL" class="headerlink" title="1.1 CPL"></a>1.1 CPL</h4><p>CPL表示当前执行的程序或任务所处的特权级，存储在<code>CS</code>和<code>SS</code>第0位和第1位上。当程序转移到不同特权级的代码段时，处理器将改变CPL，<strong>只有0和3两个值，分别表示用户态和内核态</strong></p>
<h4 id="1-2-DPL（Descriptor-Privilege-Level）"><a href="#1-2-DPL（Descriptor-Privilege-Level）" class="headerlink" title="1.2 DPL（Descriptor Privilege Level）"></a>1.2 DPL（Descriptor Privilege Level）</h4><p>DPL表示段或门的特权级，它被存储在段描述符或门描述符的DPL字段中，DPL将会和CPL及段/门选择子的RPL相比较，根据段或者门类型的不同，DPL将会区别对待</p>
<h4 id="1-3-RPL（Request-Privilege-Level）"><a href="#1-3-RPL（Request-Privilege-Level）" class="headerlink" title="1.3 RPL（Request Privilege Level）"></a>1.3 RPL（Request Privilege Level）</h4><p>RPL根据代码中不同段跳转而确定，以动态刷新CS里的CPL，在代码段选择符中，而且RPL对每个段来说都<strong>不是固定</strong>的，两次访问同一段时的RPL可以不同，os通过用RPL来避免低特权级应用程序访问高特权级段内的数据</p>
<p>即便提出访问请求的段有足够的特权级，RPL不够也不行，当RPL值大于CPL值时，RPL起决定性作用，即RPL相当于附加的一个权限控制</p>
<p>但只有当<code>RPL&gt;DPL</code>，才能起到实际的限制作用</p>
<h3 id="2-调用门"><a href="#2-调用门" class="headerlink" title="2 调用门"></a>2 调用门</h3><h4 id="2-1-结构"><a href="#2-1-结构" class="headerlink" title="2.1 结构"></a>2.1 结构</h4><p>调用门用于<strong>在不同特权级之间实现受控的程序控制转移</strong>，通常仅用于使用特权级保护机制的os中。本质上，它只是一个描述符，一个不同于代码段和数据段的描述符，可以安装在GDT/LGT中，但是不能安装在IDT中。</p>
<p>它主要定义了目标代码对应段的选择子、入口地址的偏移和一些属性等</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412154333664.png" alt="image-20210412154333664" style="zoom:50%;">

<p>一个门描述了由一个选择子和一个偏移所制定的线性地址，程序通过这个地址进行转移</p>
<h4 id="2-2-通过调用门访问代码段"><a href="#2-2-通过调用门访问代码段" class="headerlink" title="2.2 通过调用门访问代码段"></a>2.2 通过调用门访问代码段</h4><p>调用门的访问一般通过<code>call、jmp</code>指令的操作数提供的一个远指针，该指针中的段选择子用于指定调用门，CPU会使用调用门中的偏移值实现跳转</p>
<p>通过<strong>调用门进行程序的转移控制</strong>时，CPU会检查以下这几个字段：</p>
<ol>
<li>当前代码段的CPL</li>
<li>调用门描述符中的DPL</li>
<li>调用门描述符中的RPL</li>
<li>目的代码描述符的DPL</li>
<li>目标代码段描述符中的一致性标志C</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210412154930311.png" alt="image-20210412154930311" style="zoom:50%;">

<p>对于call和jmp指令，有不同的优先级检查规则：</p>
<p><strong>对于call</strong></p>
<ul>
<li>当前<code>CPL&lt;=调用门描述符DPL</code>， <code>RPL&lt;=调用门描述符DPL</code>， 当前<code>CPL&gt;=目的代码段描述符DPL</code></li>
</ul>
<p><strong>对于jmp</strong></p>
<ul>
<li>除了跟call的<code>“当前CPL&lt;=调用门描述符DPL，RPL&lt;=调用门描述符DPL”</code>一样外，如果目的代码段一致的话，<code>CPL&gt;=目的代码段的DPL</code>， 而如果目的代码段是非一致的话，<code>CPL = 目的代码段的DPL</code></li>
</ul>
<p><strong>调用门的作用是，让一个代码段中的过程被不同特权级的程序访问。</strong> 通常用于低特权级代码来访问高特权级的代码段</p>
<h4 id="2-3-一致代码段-amp-非一致代码段"><a href="#2-3-一致代码段-amp-非一致代码段" class="headerlink" title="2.3 一致代码段 &amp; 非一致代码段"></a>2.3 一致代码段 &amp; 非一致代码段</h4><ul>
<li><strong>一致代码段</strong></li>
</ul>
<p>即os拿出来被共享的代码段，可以被低特权级的用户直接调用访问的代码，向特权级更高的一致性代码段的控制转移，允许程序以当前特权级继续执行。</p>
<p><font color="red"><b>通常这些共享代码，是“不访问”受保护的资源和某些类型异常处理，对于一致性代码来说，特权级高的程序不允许访问特权级低的数据；即是说核心态不允许调用用户态的数据，而特权级低的程序可以访问到特权级高的数据，但是特权级不会改变，用户态还是用户态</b></font></p>
<ul>
<li><strong>非一致代码段</strong></li>
</ul>
<p>不同特权级的非一致代码段转移将导致一般保护异常，除非使用了任务门或调用门。</p>
<p><font color="red"><b>对于非一致代码段来说，只允许同级间访问，绝对禁止不同级访问，核心态不能用用户态，用户态也不能使用核心态</b></font></p>
<p>通常低特权级代码必须通过“门”来实现对高特权代码的访问和调用，不访问保护措施的系统工具和某些异常类型的处理过程需要放在一致性代码段中，需要防止低特权级程序访问的工具要放在非一致代码段中</p>
<p>当调用门用于把<strong>程序控制转移到一个更高级别</strong>的非一致性代码段中，CPU会自动切换到目的代码段特权级的堆栈去。</p>
<p><font color="red"><b>每个任务最多定义4个栈，分别对应4个特权级，每个栈都位于不同的段中，</b></font>并且使用段选择符和段中偏移值指定。</p>
]]></content>
      <categories>
        <category>uCore</category>
      </categories>
      <tags>
        <tag>uCore</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP 4 -- 基础语法III</title>
    <url>/2021/04/10/OOP/%E5%9B%9B%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%20III/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="四-基础语法-III"><a href="#四-基础语法-III" class="headerlink" title="四 基础语法 III"></a>四 基础语法 III</h1><h2 id="4-1-继承"><a href="#4-1-继承" class="headerlink" title="4.1 继承"></a>4.1 继承</h2><ul>
<li>在已有类的基础上，通过“继承”来定义新的类，实现对已有代码的复用</li>
<li>常见继承方式：public， private<ol>
<li><code>class Derived:[private]Base&#123;..&#125;;</code> 缺省继承方式为private继承</li>
<li><code>class Derived:public Base&#123;...&#125;;</code></li>
</ol>
</li>
<li><strong>被继承</strong>的已有类，被称为基类(base class)， 也称为“父类”</li>
<li>通过继承得到的新类，称为派生类（derived class，即“子类”， “扩展类”）</li>
</ul>
<h3 id="4-1-1-派生类对象的构造与析构过程"><a href="#4-1-1-派生类对象的构造与析构过程" class="headerlink" title="4.1.1 派生类对象的构造与析构过程"></a>4.1.1 派生类对象的构造与析构过程</h3><ol>
<li>基类中的数据成员，通过继承称为派生类对象的一部分，需要在构造派生类对象的过程中调用<strong>基类构造函数来正确初始化</strong><ul>
<li>如果没有显式调用，则编译器会自动生成一个对基类的默认构造函数的调用</li>
<li>如果想要显式调用，则只能在<strong>派生类构造函数的初始化成员列表</strong>中进行，既可以<strong>调用基类中不带参数</strong>的默认构造函数，也可以<strong>调用合适的带参数</strong>的其他构造函数</li>
</ul>
</li>
<li>先执行基类的构造函数来初始化继承来的数据，再执行派生类的构造函数</li>
<li>对象析构时，<strong>先执行派生类析构函数</strong>，<strong>再执行</strong>由编译器自动调用的<strong>基类的析构函数</strong></li>
</ol>
<h3 id="4-1-2-继承基类构造函数（1）"><a href="#4-1-2-继承基类构造函数（1）" class="headerlink" title="4.1.2 继承基类构造函数（1）"></a>4.1.2 继承基类构造函数（1）</h3><p>在派生类中使用<code>using Base::Base</code>；来继承基类构造函数，相当于给派生类“定义”了相应参数的构造函数</p>
<p>编译器会根据Base的构造函数给其基类相应的构造函数</p>
<blockquote>
<p>敲了好多次demo，都是错的，我也不知道为啥，这里就没有举例了</p>
</blockquote>
<h3 id="4-1-3-继承基类构造函数（2）"><a href="#4-1-3-继承基类构造函数（2）" class="headerlink" title="4.1.3 继承基类构造函数（2）"></a>4.1.3 继承基类构造函数（2）</h3><ol>
<li>虽然基类构造函数的<strong>参数默认值不会被派生类继承</strong>，但由默认参数导致的多个构造函数版本都会被派生类继承</li>
<li>如果基类的<strong>某个构造函数被声明为私有成员函数</strong>，则<strong>不能</strong>在派生类中声明继承该构造函数</li>
<li>如果派生类使用了继承基类构造函数，编译器就不会再为派生类生成默认构造函数</li>
</ol>
<p><strong>总结：</strong> 即子类会继承基类的默认函数（非私有函数</p>
<p><strong>思考一下：</strong> 根据Derive类的定义，这个语句能通过编译码？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Derive d1;</span><br><span class="line">Derive <span class="built_in">array</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<h2 id="4-2-函数重写"><a href="#4-2-函数重写" class="headerlink" title="4.2 函数重写"></a>4.2 函数重写</h2><blockquote>
<p><strong>非重载！！！</strong></p>
</blockquote>
<h3 id="4-2-1-派生类（对象）中的基类成员"><a href="#4-2-1-派生类（对象）中的基类成员" class="headerlink" title="4.2.1 派生类（对象）中的基类成员"></a>4.2.1 派生类（对象）中的基类成员</h3><ol>
<li>派生类对象包含从基类继承来的数据成员，构成了“基类子对象”</li>
<li><strong>基类中的私有成员</strong>，不允许在派生类成员函数中被访问，也不允许派生类的对象访问他们<ul>
<li>真正体现“基类私有”， 对派生类也不开放其权限</li>
</ul>
</li>
<li><strong>基类中的公有成员：</strong> <ul>
<li>使用public继承方式，则成为派生类的公有成员，既可以在派生类成员函数中访问，也可以被派生类的对象访问</li>
<li>使用private继承方式，只能<strong>供派生类成员函数</strong>访问，不能被派生类对象访问</li>
</ul>
</li>
</ol>
<h3 id="4-2-2-派生类重写基类成员函数"><a href="#4-2-2-派生类重写基类成员函数" class="headerlink" title="4.2.2 派生类重写基类成员函数"></a>4.2.2 派生类重写基类成员函数</h3><ol>
<li>基类已定义的成员函数，在派生类中可以重新定义它，这被称为函数<strong>重写（override）</strong></li>
<li>重写发生时，基类中该成员函数的其他重载函数都将被屏蔽掉，不能提供给派生类对象使用</li>
<li>可以在派生类中通过<code>using 类名::成员函数名</code>;在派生类中“恢复”指定的基类成员函数（即去掉屏蔽），使其重新可用</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210410193818499.png" alt="image-20210410193818499" style="zoom:50%;">

<blockquote>
<p><code>4.9</code>被强制转换为<code>4</code>，依旧没有使用基类</p>
</blockquote>
<p>当在<code>D1</code>中定义使用<code>B::f</code>后即可使用基类<code>B</code>中关于<code>f</code>的重载函数</p>
<h2 id="4-3-虚函数"><a href="#4-3-虚函数" class="headerlink" title="4.3 虚函数"></a>4.3 虚函数</h2><h3 id="4-3-1-向上映射-amp-向下映射"><a href="#4-3-1-向上映射-amp-向下映射" class="headerlink" title="4.3.1 向上映射 &amp; 向下映射"></a>4.3.1 向上映射 &amp; 向下映射</h3><ol>
<li>派生类对象转换成基类对象，为<strong>向上映射</strong>。基类对象转换成派生类对象，称为<strong>向下映射</strong></li>
<li>向上映射（派生类$\rightarrow$基类）可以由编译器自动完成，为隐式的<strong>自动类型转换</strong></li>
<li>凡接受<strong>基类对象</strong>的地方（如函数参数），都可以使用派生类对象，编译器会自动将派生类对象转换为基类对象以便使用</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">overWriteTest</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    overWriteTest()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is father&#x27;s func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span>:</span><span class="keyword">public</span> overWriteTest</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    child()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        data = <span class="number">1234</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is child&#x27;s func:&quot;</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(overWriteTest tmp)</span></span>&#123;</span><br><span class="line">    tmp.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    child tmp;</span><br><span class="line">    tmp.print();</span><br><span class="line">    func(tmp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* this is child&#x27;s func:1234</span></span><br><span class="line"><span class="comment">* this is father&#x27;s func</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*相当于运行：*/</span></span><br><span class="line">child::print()</span><br><span class="line">father::print()</span><br></pre></td></tr></table></figure>

<h3 id="4-3-2-虚函数"><a href="#4-3-2-虚函数" class="headerlink" title="4.3.2 虚函数"></a>4.3.2 虚函数</h3><blockquote>
<p>类似于<strong>多态</strong></p>
</blockquote>
<p>对于被派生类重写的成员函数，若它在基类中被声明为虚函数，则通过<strong>基类指针或引用</strong>调用该成员函数时，编译器将<strong>根据所指（或引用）对象的实际类型</strong>决定是调用基类中的函数，还是调用派生类重写的函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> 返回类型函数名（形式参数）; <span class="comment">//虚函数</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若某成员函数在基类中声明为<strong>虚函数</strong>，当<strong>派生类重写</strong>它时，无论是否声明为虚函数，该成员函数都仍然是<strong>虚函数</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B()&#123;&#125;;<span class="comment">//构造函数不是必要的</span></span><br><span class="line">    <span class="keyword">virtual</span> ~B()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;释放B类内存&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is B!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C()&#123;&#125;</span><br><span class="line">    ~C()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;释放C类内存&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is C!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(B* ptr)</span></span>&#123;</span><br><span class="line">    ptr-&gt;print();</span><br><span class="line">    <span class="keyword">delete</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;B.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B* ptr = <span class="keyword">new</span> C; <span class="comment">// ptr指向C类地址</span></span><br><span class="line">    ptr-&gt;print();</span><br><span class="line">    display(ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> is C!</span><br><span class="line"><span class="keyword">this</span> is C!</span><br><span class="line">释放C类内存</span><br><span class="line">释放B类内存</span><br></pre></td></tr></table></figure>

<h3 id="4-3-3-禁止重写的虚函数"><a href="#4-3-3-禁止重写的虚函数" class="headerlink" title="4.3.3 禁止重写的虚函数"></a>4.3.3 禁止重写的虚函数</h3><ol>
<li>使用<code>final</code>关键字修饰的虚函数，派生类不可对它进行<strong>重写</strong> – 改变函数定义（行为）</li>
<li>在派生过程中，<code>final</code>可以在<strong>继承关系链的“中途”</strong>进行设定，禁止后续派生类对指定虚函数重写</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> <span class="keyword">final</span></span>; <span class="comment">// 到此为止，后续子类不可重写此接口</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>; <span class="comment">//无法通过编译</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对于全是虚函数的基类，可以看成全为接口的类</p>
<h2 id="4-4-自动类型转换"><a href="#4-4-自动类型转换" class="headerlink" title="4.4 自动类型转换"></a>4.4 自动类型转换</h2><p>对于用户自定义的类类型，编译系统需要定义专门的函数来告诉编译系统该如何转换，需要用到：</p>
<ul>
<li>带参数的构造函数（基本数据类型=》自定义数据类型）</li>
<li>转换函数（自定义数据类型=〉基本数据类型）</li>
</ul>
<p>来进行抽象数据类型和基本数据类型之间的转换</p>
<h3 id="4-4-1-自定义类型转换"><a href="#4-4-1-自定义类型转换" class="headerlink" title="4.4.1 自定义类型转换"></a>4.4.1 自定义类型转换</h3><h4 id="lt-1-gt-在源类中定义“目标类型转换运算符”"><a href="#lt-1-gt-在源类中定义“目标类型转换运算符”" class="headerlink" title="&lt;1&gt; 在源类中定义“目标类型转换运算符”"></a>&lt;1&gt; 在源类中定义“目标类型转换运算符”</h4><blockquote>
<p>进行目标类重载</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dst</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Dst()&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Dst::Dst()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Src() &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Src::Src()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Src::operator Dst() called&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> Dst();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="lt-2-gt-在目标类中定义“源类对象作参数的构造函数”"><a href="#lt-2-gt-在目标类中定义“源类对象作参数的构造函数”" class="headerlink" title="&lt;2&gt; 在目标类中定义“源类对象作参数的构造函数”"></a>&lt;2&gt; 在目标类中定义“源类对象作参数的构造函数”</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span>;</span> <span class="comment">//前置类型声明，因为Dst中要用到Src类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dst</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Dst() &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Dst::Dst()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">  Dst(<span class="keyword">const</span> Src&amp; s) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Dst::Dst(const Src&amp;)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Src() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Src::Src()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="lt-3-gt-单参数的构造函数「基本数据类型-》自定义数据类型」"><a href="#lt-3-gt-单参数的构造函数「基本数据类型-》自定义数据类型」" class="headerlink" title="&lt;3&gt; 单参数的构造函数「基本数据类型=》自定义数据类型」"></a>&lt;3&gt; 单参数的构造函数「基本数据类型=》自定义数据类型」</h4><ul>
<li>能够将一个标准类型数据转换成类对象，也能够将另一个类的对象转换成构造函数所在的类对象</li>
<li>如果不希望转换构造函数生效，拒绝其他类型通过转换构造函数转换为本类型，可以在转换构造函数前面加上<code>explicit</code></li>
</ul>
<p>举个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    Complex():ele1(<span class="number">0.0</span>),imag(<span class="number">0.0</span>)&#123;&#125;;</span><br><span class="line">    Complex(<span class="keyword">double</span> r, <span class="keyword">double</span> i):ele1(r),ele2(i)&#123;&#125;;  </span><br><span class="line">    Complex(<span class="keyword">double</span> r) <span class="comment">//  转换构造函数</span></span><br><span class="line">    &#123;  </span><br><span class="line">        ele1=r;  </span><br><span class="line">        ele2=<span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="keyword">double</span> ele1;  </span><br><span class="line">    <span class="keyword">double</span> ele2;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Complex c;</span><br><span class="line">    c=<span class="number">1.2</span>;<span class="comment">//调用转换构造函数将1.2转换为Complex类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="lt-4-gt-类型转换「自定义数据类型-gt-基本数据类型」"><a href="#lt-4-gt-类型转换「自定义数据类型-gt-基本数据类型」" class="headerlink" title="&lt;4&gt; 类型转换「自定义数据类型 -&gt; 基本数据类型」"></a>&lt;4&gt; 类型转换「自定义数据类型 -&gt; 基本数据类型」</h4><p>类型转换函数的一般形式为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">operator</span> 类型名()&#123;</span><br><span class="line">	实现转换的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ...;</span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">//定义类型转换函数</span></span><br><span class="line">    <span class="keyword">return</span> ele1;</span><br><span class="line">  &#125;</span><br><span class="line">  ...;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>返回值的类型由类型名确定</li>
<li>只能作为成员函数</li>
<li>与运算符重载函数相似，都使用operator开头，只是被重载的是类型名</li>
</ul>
<p>在这里，double类型经过重载后，除了原有的含义外，还有新的含义（将一个Complex类对象转换为double类型数据，并指定了转换方法）。</p>
<p>这样，编译系统不仅能识别原有的<code>double</code>型数据，还会把<code>Complex</code>类对象作为<code>double</code>型数据处理，即程序中的<code>Complex</code>类对象具有双重身份，既是<code>Complex</code>对象，也是<code>double</code>类型数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( )</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1.2</span>, <span class="number">2.3</span>)</span></span>;  </span><br><span class="line">    <span class="keyword">double</span> d;  </span><br><span class="line">    d = c1 + <span class="number">1.1</span>; <span class="comment">// 调用类型转换函数将c1转换为double</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="4-5-禁止自动类型转换"><a href="#4-5-禁止自动类型转换" class="headerlink" title="4.5 禁止自动类型转换"></a>4.5 禁止自动类型转换</h2><h3 id="4-5-1-explicit"><a href="#4-5-1-explicit" class="headerlink" title="4.5.1 explicit()"></a>4.5.1 explicit()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span>;</span> <span class="comment">//前置类型声明，因为Dst中要用到Src类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dst</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Dst() &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Dst::Dst()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">explicit</span> <span class="comment">//&lt;1&gt; 不准用于自动类型转换</span></span><br><span class="line">  Dst(<span class="keyword">const</span> Src&amp; s) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Dst::Dst(const Src&amp;)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Src() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Src::Src()&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">  <span class="keyword">explicit</span> <span class="comment">//&lt;2&gt; 不准用于自动类型转换</span></span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Src::operator Dst() called&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> Dst();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当操作遇到转换时，此时即视为<strong>自动类型转换</strong></p>
</blockquote>
<h3 id="4-5-2-delete"><a href="#4-5-2-delete" class="headerlink" title="4.5.2 delete"></a>4.5.2 delete</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用=delete修饰的成员函数，不允许被调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  T(<span class="keyword">int</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">/// 若没有下一条语句，则main函数中所有语句均可以编译通过</span></span><br><span class="line">  T(<span class="keyword">char</span>) = <span class="keyword">delete</span>; <span class="comment">// 可以消除自动转换带来的隐患</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">(T t)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Fun(<span class="number">1</span>); </span><br><span class="line">  <span class="comment">/// Fun(&#x27;A&#x27;); 自动类型转换失败（char-&gt;int）， 编译不通过</span></span><br><span class="line">  <span class="function">T <span class="title">ci</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>也可以采用delete删除普通函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fun</span><span class="params">(<span class="keyword">char</span> c)</span> </span>= <span class="keyword">delete</span>;	<span class="comment">///显示删除char版本</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Fun(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">///Fun(&#x27;A&#x27;); ///编译不通过</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>转换构造函数</strong>和类<strong>型构造函数</strong>都有一个共同的功能：当用户自定义后，当需要时编译系统会自动调用</p>
<h2 id="4-6-强制类型转换"><a href="#4-6-强制类型转换" class="headerlink" title="4.6 强制类型转换"></a>4.6 强制类型转换</h2><h3 id="4-6-1-显式转换"><a href="#4-6-1-显式转换" class="headerlink" title="4.6.1 显式转换"></a>4.6.1 显式转换</h3><ul>
<li><p><code>dynamic_cast&lt;Dst_Type&gt;(Src_var)</code></p>
<ul>
<li><code>Src_var</code>必须是<strong>引用或指针类型</strong>，<code>Dst_Type</code>类中含有<strong>虚函数</strong>，否则会有编译错误</li>
</ul>
<p><font color="red"><strong>dynamic只能转指针</strong></font></p>
<ul>
<li>如果<strong>目标类与源类</strong>之间没有<strong>继承</strong>关系，则转换失败，返回空指针</li>
</ul>
</li>
<li><p><code>static_cast&lt;Dst_Type&gt;(Src_var)</code></p>
<ul>
<li><font color="red"><b>基类对象不能转换成派生类对象</b></font>，但是基类<strong>指针</strong>可以转换成派生类<strong>指针</strong></li>
</ul>
<blockquote>
<p>对象不可向下转，指针可以向下转</p>
</blockquote>
<ul>
<li><strong>派生类对象（指针）</strong>可以转换成<strong>基类对象（指针）</strong></li>
<li>没有继承关系的类之间，必须具有转换途径才能进行转换（要么自定义，要么语言语法支持）</li>
</ul>
</li>
</ul>
<h2 id="4-7-函数模板"><a href="#4-7-函数模板" class="headerlink" title="4.7 函数模板"></a>4.7 函数模板</h2><ul>
<li><p>有些算法实现与类型无关，可以将函数的参数类型定义为一种特殊的“参数”，这样就得到了“函数模板”</p>
</li>
<li><p>定义函数模板的方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">返回类型 函数名称(函数参数)；</span><br></pre></td></tr></table></figure>
</li>
<li><p>E.g. 任意两个类型的变量相加的“函数模板”：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T a, T b)</span></span>&#123;<span class="keyword">return</span> a+b;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>函数模板在调用时，因为编译器能自动推导出实际参数的类型，所以形式上调用一个函数模版与普通函数没有区别</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a=<span class="number">3</span>, b=<span class="number">4</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; sum(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似函数重载，但是这里模版只写了一次，而重载写了许多次，简化了很多。</p>
<ul>
<li><strong>函数模板参数也可以赋默认值，如</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> To=<span class="keyword">float</span>, <span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2=<span class="keyword">float</span>, <span class="keyword">typename</span> T3, <span class="keyword">typename</span> T4&gt;</span><br><span class="line">To func(T1 v1, T2 v2, T3 v3, T4 v4)&#123;...&#125;</span><br><span class="line">...</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">func(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&quot;cde&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-8-类模板"><a href="#4-8-类模板" class="headerlink" title="4.8 类模板"></a>4.8 类模板</h2><h3 id="lt-1-gt-模板1"><a href="#lt-1-gt-模板1" class="headerlink" title="&lt;1&gt; 模板1"></a>&lt;1&gt; 模板1</h3><p>在定义类时也可以讲一些类型信息抽取出来，用模板参数来替换，从而使类更具有通用性，这种类被称为“类模板”。如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//类模板成员函数的定义方式一：在类模板中定义</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义方式二：在类模板外定义</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">A::print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br></pre></td></tr></table></figure>

<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210414213734167.png" alt="image-20210414213734167" style="zoom:50%;">

<ul>
<li>依次实例化的过程</li>
</ul>
<h3 id="lt-2-gt-模板2"><a href="#lt-2-gt-模板2" class="headerlink" title="&lt;2&gt; 模板2"></a>&lt;2&gt; 模板2</h3><p><strong>类模板的“模板参数”</strong></p>
<ol>
<li><p><strong>类型参数</strong>：使用<code>typename</code>或<code>class</code>标记</p>
</li>
<li><p><strong>非类型参数</strong>：<strong>整数，</strong> 枚举，指针（指向对象或函数），引用（引用对象或引用函数）。其中，整数类型是比较常用的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">unsigned</span> size&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">array</span>&#123;</span></span><br><span class="line">  T elems[size];</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">char</span>, 10&gt; array0;<span class="comment">//用类模板实例定义对象</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="lt-3-gt-模板3"><a href="#lt-3-gt-模板3" class="headerlink" title="&lt;3&gt; 模板3"></a>&lt;3&gt; 模板3</h3><p><strong>模板参数是另一个类模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> TTo, <span class="keyword">typename</span> TT1&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span>&#123;</span></span><br><span class="line">  A&lt;T, T&gt; bar;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>比较复杂的类模板，用bar来实例化</li>
</ul>
<h2 id="4-9-成员函数模板"><a href="#4-9-成员函数模板" class="headerlink" title="4.9 成员函数模板"></a>4.9 成员函数模板</h2><h3 id="lt-1-gt-模板1-1"><a href="#lt-1-gt-模板1-1" class="headerlink" title="&lt;1&gt;  模板1"></a>&lt;1&gt;  模板1</h3><p><strong>普通类的成员函数，</strong> 也可以定义为函数模板，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal_class</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">  <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">set</span><span class="params">(T <span class="keyword">const</span>&amp;v)</span></span>&#123;</span><br><span class="line">    value=<span class="keyword">int</span>(v);</span><br><span class="line">  &#125;<span class="comment">//在类内定义</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function">T <span class="title">normal_class::get</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> T(value);&#125;<span class="comment">//在类外定义</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-2-gt-模板2-1"><a href="#lt-2-gt-模板2-1" class="headerlink" title="&lt;2&gt;  模板2"></a>&lt;2&gt;  模板2</h3><p><strong>类模板的成员函数，</strong> 也可以有<strong>额外</strong>的模板参数，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> To&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  To value;</span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1&gt;<span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(T1 <span class="keyword">const</span>&amp;v)</span></span>&#123;value=To(v);&#125;<span class="comment">//类内定义</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1&gt;<span class="function">T1 <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> To&gt; <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1&gt; T1 <span class="title">A::get</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> T1(value);&#125;<span class="comment">///类外定义</span></span><br></pre></td></tr></table></figure>

<h2 id="4-10-模板转换"><a href="#4-10-模板转换" class="headerlink" title="4.10 模板转换"></a>4.10 模板转换</h2><h3 id="4-10-1-模板参数的具体化-特殊化"><a href="#4-10-1-模板参数的具体化-特殊化" class="headerlink" title="4.10.1 模板参数的具体化/特殊化"></a>4.10.1 模板参数的具体化/特殊化</h3><ul>
<li><p>有时类型并不适用，需要对模板进行特殊化处理，称为“模板特化”</p>
</li>
<li><p>对函数模板，如果有多个模板参数，则特化时必须提供所有参数的特例类型，<strong>不能部分</strong>特化</p>
</li>
<li><p>如：<code>char* sum(char *, char *);</code></p>
<ul>
<li><p>在函数名后用<code>&lt;&gt;</code>括号括起具体类型</p>
<p><code>template&lt;&gt;</code></p>
<p><code>char* sum&lt;char*&gt;(char* a, char* b)&#123;...&#125;</code></p>
</li>
<li><p>由编译器推导出具体类型，函数名为普通类型</p>
</li>
</ul>
<p><code>template&lt;&gt;</code></p>
<p><code>char* sum(char* a, char* b)&#123;...&#125;</code></p>
</li>
</ul>
<h3 id="4-10-2-类模板的部分转化（偏特化）"><a href="#4-10-2-类模板的部分转化（偏特化）" class="headerlink" title="4.10.2 类模板的部分转化（偏特化）"></a>4.10.2 类模板的部分转化（偏特化）</h3><ul>
<li>对于类模版，允许部分特化，即<strong>部分限制模板的通用性</strong>，如：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用模板类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">Tw</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span>...&#125;;</span><br><span class="line"><span class="comment">//部分特化的模板类：第2个类型参数指定为int</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;</span>T1,<span class="keyword">int</span>&gt;&#123;...&#125;;</span><br><span class="line"><span class="comment">//若指定所有类型，则&lt;&gt;内将为空</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;</span><span class="keyword">int</span>, <span class="keyword">int</span>&gt;&#123;...&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-11-C-模板"><a href="#4-11-C-模板" class="headerlink" title="4.11 C++模板"></a>4.11 C++模板</h2><blockquote>
<p>如果上面的模板理解起来有点懵，来看看这个吧～</p>
</blockquote>
<p>模板是泛型编程的基础，泛型编程以一种独立于任何特定类型的方式编写代码。</p>
<p>模板用于创建泛型类或函数，库容器如迭代器和算法，都是泛型编程的例子，都使用了模版的概念</p>
<p>每个容器都有一个单一的定义，比如<strong>向量</strong>，我们可以定义许多不同类型的向量，比如<code>vector&lt;int&gt; | vector&lt;string&gt;</code></p>
<h3 id="4-11-1-函数模板"><a href="#4-11-1-函数模板" class="headerlink" title="4.11.1 函数模板"></a>4.11.1 函数模板</h3><p><strong>定义：</strong></p>
<p><code>template&lt;class 形参名1, class 形参名2, ...&gt;返回类型 函数名(参数列表)&#123;函数体&#125;</code></p>
<p><strong>举个例子：</strong></p>
<p><code>template&lt;class T&gt; void swap(T&amp; a, T&amp; b)&#123;&#125;</code></p>
<p>当调用这样的模板函数时，类型T会被调用时的类型所代替，如果<code>swap(a,b)</code>中a，b都是int类型，那么模板函数swap中的形参T就会被int所代替，模板函数swap中的形参T就会被double所代替，模板函数就会变成<code>swap(double &amp;a, double &amp;b)</code>，这样我们的程序中交换变量就不再受限于类型了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <span class="keyword">const</span>&amp; <span class="title">Max</span><span class="params">(T <span class="keyword">const</span>&amp; a, T <span class="keyword">const</span>&amp; b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?b:a;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>, j =<span class="number">4</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Max(i, j) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">double</span> tmp=<span class="number">3.14</span>, tmp1 = <span class="number">3.33</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Max(tmp, tmp1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 4</span></span><br><span class="line"><span class="comment">* 3.33</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="4-11-2-类模板"><a href="#4-11-2-类模板" class="headerlink" title="4.11.2 类模板"></a>4.11.2 类模板</h3><p>如同我们定义函数模板一样，我们也可以定义类模板，泛型类声明的一般形式如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> 形参名, <span class="keyword">class</span> 形参名, ...&gt;</span> <span class="class"><span class="keyword">class</span> 类名 &#123;</span>...&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>举个例子：</strong> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  T a;</span><br><span class="line">  T b;</span><br><span class="line">	<span class="function">T <span class="title">hy</span><span class="params">(T c, T &amp;d)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类A中声明了两个类型为T的成员变量a和b，还声明了一个返回类型为T带两个参数类型为T的函数hy</p>
<p><strong>举个例子：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">T <span class="title">g</span><span class="params">(T a, T b)</span></span>;</span><br><span class="line">  A();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TemplateDemo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> A&lt;T&gt;::A()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> T A&lt;T&gt;::g(T a, T b)&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; a.g(<span class="number">2</span>,<span class="number">3.2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="1-operator关键字-重载操作符-用法"><a href="#1-operator关键字-重载操作符-用法" class="headerlink" title="1 operator关键字(重载操作符)用法"></a>1 operator关键字(重载操作符)用法</h2><blockquote>
<p><code>operator</code>是C++中的关键字，它和运算符一起使用，表示为一个运算符函数。</p>
<p>C++中使用operator可以视为<strong>函数</strong>使用</p>
</blockquote>
<p>作为C++扩展运算符功能的方法，可以理解为：</p>
<ul>
<li>一方面使运算符的使用方法和原来一致</li>
<li>一方面通过函数方式扩展其功能</li>
</ul>
<hr>
<p><strong>为什么使用操作符重载？</strong></p>
<p>对于系统所有操作符，一般情况下，只支持基本数据类型和标准库中提供的class，对于用户自定义的class，如果想支持基本操作，如比较大小，判断是否相等等，需要用户<strong>自定义关于这个操作符</strong>的具体实现。</p>
<hr>
<p><strong>如何声明一个重载的操作符？</strong></p>
<ol>
<li><strong>操作符重载实现为类成员函数</strong></li>
</ol>
<p>重载的操作符在类体中被声明，声明方式和普通成员函数相同，不过他的名字包含关键字<code>operator</code>，及紧跟其后的<code>c++</code>预定义的操作符</p>
<p><strong>举个例子：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	CDBTask&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> CDBTask&amp; r)</span><br></pre></td></tr></table></figure>

<ol>
<li><p>后载操作符首先需要确定他的返回值是左值，还是右值，如果是左值则<strong>返回引用</strong>，如果是右值则直接<strong>返回返回值</strong></p>
</li>
<li><p>+号等这样的操作符，没有对象可以容纳改变后的值，对于这样的情况最好返回数值，否则只能在操作符体内<strong>创建临时对象用于容纳改变后的值</strong>，在操作符函数体外还需要释放它</p>
<p>如果返回的是数值，最好在该类的构造函数中增加对该类型数值的转换函数。如：返回值是int类型，那么最好有一个int类型作为参数的构造函数</p>
</li>
<li><p>在增量运算符中，放上一个整数形参，即后增量运行符，作为值返回。对于前增量没有形参，而是引用返回</p>
</li>
</ol>
<p><strong>举个例子：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test(x=<span class="number">3</span>)&#123; m_value = x&#125;</span><br><span class="line">    Test &amp;<span class="keyword">operator</span> ++();  <span class="comment">//前增量</span></span><br><span class="line">    Test &amp;<span class="keyword">operator</span> ++(<span class="keyword">int</span>);<span class="comment">//后增量</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Int m_value:</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">Test &amp;Test::<span class="keyword">operator</span> ++()</span><br><span class="line">&#123;</span><br><span class="line">  m_value ++;  <span class="comment">//先增量</span></span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回当前对象</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Test Test::<span class="keyword">operator</span> ++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">Test <span class="title">tmp</span><span class="params">(*<span class="keyword">this</span>)</span></span>; <span class="comment">//创建临时对象</span></span><br><span class="line">  m_value ++;    <span class="comment">//再增量</span></span><br><span class="line">  <span class="keyword">return</span> temp;   <span class="comment">//返回临时对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OOP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP 3 -- 基础语法II</title>
    <url>/2021/04/10/OOP/%E4%B8%89%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%20II/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="三-基础语法-II"><a href="#三-基础语法-II" class="headerlink" title="三 基础语法 II"></a>三 基础语法 II</h1><h2 id="3-1-构造函数-amp-析构函数"><a href="#3-1-构造函数-amp-析构函数" class="headerlink" title="3.1 构造函数 &amp; 析构函数"></a>3.1 构造函数 &amp; 析构函数</h2><h3 id="3-1-1-构造函数"><a href="#3-1-1-构造函数" class="headerlink" title="3.1.1 构造函数"></a>3.1.1 构造函数</h3><ol>
<li>由编译器自动调用，用于对象数据成员的初始化及其他初始化工作</li>
<li>没有返回值，函数名与类名相同</li>
<li>构造函数可以<strong>重载</strong>，可以使用不同的函数参数进行对象初始化</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">  <span class="keyword">long</span> ID;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Student(<span class="keyword">long</span> id) &#123; ID = id; &#125;</span><br><span class="line">  Student(<span class="keyword">int</span> year, <span class="keyword">int</span> order) &#123;</span><br><span class="line">    ID = year*<span class="number">10000</span> + order;</span><br><span class="line">  &#125;</span><br><span class="line">  ...;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不带任何参数的构造函数，称为“默认构造函数”，也称“缺省构造函数”</li>
<li>定义<strong>元素为对象的数组</strong>（<code>ClassName array_var[NUM];</code>）时，类必须提供默认构造函数的定义</li>
<li>使用默认构造函数生成对象时，对象定义格式为：<code>ClassName obj;</code>,而不是<code>ClassName obj();</code></li>
</ul>
<h3 id="3-1-2-构造函数的初始化列表"><a href="#3-1-2-构造函数的初始化列表" class="headerlink" title="3.1.2 构造函数的初始化列表"></a>3.1.2 构造函数的初始化列表</h3><ul>
<li>构造函数可以初始化列表来<strong>初始化成员数据</strong></li>
<li>该列表在定义构造函数时使用，位置出现在函数题左花括号<code>&#123;</code>之前，以冒号<code>:</code>作为开头</li>
<li>使用“数据成员（初始值）”的形式</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">  <span class="keyword">long</span> ID;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Student(<span class="keyword">long</span> id) : ID(id) &#123; &#125;<span class="comment">//相当于对ID初始化</span></span><br><span class="line">  Student(<span class="keyword">int</span> year, <span class="keyword">int</span> order) &#123;</span><br><span class="line">    ID = year*<span class="number">10000</span> + order;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>委派构造函数</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Info() &#123; Init(); &#125;</span><br><span class="line">  Info(<span class="keyword">int</span> i) : Info()&#123; id = i; &#125;</span><br><span class="line">  Info(<span class="keyword">char</span> c) : Info()&#123; gender = c; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123; .... &#125; <span class="comment">//其他初始化</span></span><br><span class="line">  <span class="keyword">int</span> id &#123;<span class="number">2016</span>&#125;;</span><br><span class="line">  <span class="keyword">char</span> gender &#123;<span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-3-析构函数"><a href="#3-1-3-析构函数" class="headerlink" title="3.1.3 析构函数"></a>3.1.3 析构函数</h3><ul>
<li>一个类只有一个析构函数，名称是“～类名”， 没有函数返回值，没有函数参数</li>
<li>编译器在<strong>对象生命期结束时自动调用类的析构函数</strong>，以便释放对象占用的资源或其它后处理</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="keyword">long</span>* ID_list;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ClassRoom() : num(<span class="number">0</span>), ID_list(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">  ...</span><br><span class="line">  ~ClassRoom()&#123;	<span class="comment">//析构函数</span></span><br><span class="line">    <span class="keyword">if</span> (ID_list) <span class="keyword">delete</span>[] ID_list; <span class="comment">//释放内存</span></span><br><span class="line">    <span class="comment">//如果ID_list不为空，则需要释放</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-1-4-拷贝构造函数"><a href="#3-1-4-拷贝构造函数" class="headerlink" title="3.1.4 拷贝构造函数"></a>3.1.4 <strong>拷贝构造函数</strong></h3><ul>
<li>函数调用时以类的对象为形参或返回类对象时，编译器会生成自动调用“拷贝构造函数”，在<strong>已有对象基础上生成新对象</strong></li>
<li>拷贝构造函数是一种特殊的构造函数，是<strong>同类对象</strong>的常量引用</li>
<li>语义上：用<strong>参数对象的内容初始化当前对象</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Person(<span class="keyword">const</span> Person&amp; src) &#123; id = src.id; ... &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>拷贝构造函数</strong>通常用于：</p>
<ul>
<li>通过使用另一个同类型的对象初始化新创建的对象</li>
<li>复制对象并把它<strong>作为参数传递给函数</strong></li>
<li>复制对象，并从函数返回这个对象</li>
</ul>
<h2 id="3-2-赋值运算符重载"><a href="#3-2-赋值运算符重载" class="headerlink" title="3.2 赋值运算符重载"></a>3.2 赋值运算符重载</h2><ul>
<li>赋值运算符为在类中定义的特殊成员函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ClassName&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> ClassName&amp; right)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;right)&#123;<span class="comment">//避免自己赋值给自己(判断内存空间是否相同)</span></span><br><span class="line">		<span class="comment">// 将right对象中内容复制到当前对象中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个例子</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Test(<span class="keyword">int</span> i) : id(i) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj_&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;created\n&quot;</span>;&#125;</span><br><span class="line">	Test&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Test&amp; right)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> == &amp;right) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;same obj!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj_&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; = obj_&quot;</span> &lt;&lt; right.id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">this</span>-&gt;id = right.id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Test a(1), b(2);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; a = a: &quot;</span>;</span><br><span class="line">  a = a;	<span class="comment">/// a.operator = (a);</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; a = b: &quot;</span>;</span><br><span class="line">  a = b;	<span class="comment">/// a.operator = (b);</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*	obj_1 created</span></span><br><span class="line"><span class="comment">*	obj_2 created</span></span><br><span class="line"><span class="comment">*	a = a: same obj!</span></span><br><span class="line"><span class="comment">*	a = b: obj1 = obj2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-流运算符重载"><a href="#3-3-流运算符重载" class="headerlink" title="3.3 流运算符重载"></a>3.3 流运算符重载</h2><blockquote>
<p>对象输入输出 </p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in, Test&amp; dst);</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &gt;&gt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>函数名为：<code>operator&gt;&gt;</code> 和 <code>operator&lt;&lt;</code></p>
<blockquote>
<p>流提取运算符&gt;&gt;, 流插入运算符&lt;&lt;来输入和输出内置的数据类型，可以重载流提取运算符和流插入运算符来操作对象等用户自定义的数据类型</p>
</blockquote>
</li>
<li><p>返回值为：<code>istream&amp;</code> 和 <code>ostream&amp;</code>， 均为引用，<strong>需要把运算符重载函数声明为类的友元函数，这样就能不用创建对象而直接调用函数</strong></p>
</li>
<li><p>参数分别为：流对象的引用、目标对象的引用。对于输出流，目标对象还是常量</p>
</li>
</ul>
<p><strong>将流运算符函数声明为类的友元</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Test(<span class="keyword">int</span> i) : id(i) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj_&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; created\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst);</span><br><span class="line">  <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>以上类中声明了Test类的两个友元函数 – <strong>全局流运算符重载函数</strong></li>
<li>使得这两个函数在实现时可以访问对象的私有成员（如int id）</li>
</ul>
<p>举个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Test(<span class="keyword">int</span> i) : id(i) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;obj_&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; created\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst);</span><br><span class="line">  <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src);</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst) &#123;</span><br><span class="line">  in &gt;&gt; dst.id;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src) &#123;</span><br><span class="line">  out &lt;&lt; src.id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">Test <span class="title">obj</span><span class="params">(<span class="number">1</span>)</span></span>;	<span class="built_in">cout</span> &lt;&lt; obj;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; obj;	<span class="built_in">cout</span> &lt;&lt; obj;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* obj_1 created</span></span><br><span class="line"><span class="comment">* 1</span></span><br><span class="line"><span class="comment">* 2	// 修改obj.id = 2</span></span><br><span class="line"><span class="comment">* 2 // 打印obj.id = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-函数运算符重载"><a href="#3-4-函数运算符重载" class="headerlink" title="3.4 函数运算符重载"></a>3.4 函数运算符重载</h2><ul>
<li>函数运算符<code>()</code>也能重载，使对象看上去像是一个函数名</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ReturnType <span class="title">operator</span><span class="params">()</span> <span class="params">(Parameters)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassName obj;</span><br><span class="line">Obj(real_parameters);</span><br><span class="line"><span class="comment">//-&gt;Obj.operator() (real_parameters);</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;operator() called.&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Test sum;</span><br><span class="line">  <span class="keyword">int</span> s = sum(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">/// sum对象看上去像是一个函数，故也称&quot;函数对象&quot;</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a+b=&quot;</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>再来一个例子</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Less</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> thres_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Less(<span class="keyword">int</span> th) : thres_(th) &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Less::operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (value&lt;thres_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>应用：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Filter</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> num, Less l)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; ++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(l(arr[i]))&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> tmp;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;tmp:&quot;</span>; <span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">  <span class="function">Less <span class="title">l</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">  Filter(arr, <span class="number">5</span>, l);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-下标-amp-自增减-运算符重载"><a href="#3-5-下标-amp-自增减-运算符重载" class="headerlink" title="3.5 下标&amp;自增减 运算符重载"></a>3.5 下标&amp;自增减 运算符重载</h2><h3 id="3-5-1-数组运算符-重载"><a href="#3-5-1-数组运算符-重载" class="headerlink" title="3.5.1 数组运算符[]重载"></a>3.5.1 数组运算符[]重载</h3><ul>
<li>函数声明 ：<code>返回类型 operator[](参数);</code></li>
<li>如果返回类型是引用，则数组运算符调用可以出现在等号左边，接受赋值，即</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Obj[index] = value;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果返回类型不是引用，则只能出现在等号右边</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Var = Obj[index];</span><br></pre></td></tr></table></figure>

<h3 id="3-5-2-重载前缀-后缀–"><a href="#3-5-2-重载前缀-后缀–" class="headerlink" title="3.5.2 重载前缀++/后缀–"></a>3.5.2 重载前缀++/后缀–</h3><ul>
<li><p><strong>前缀运算符重载声明</strong></p>
<ul>
<li><code>ReturnType operator++();</code></li>
<li><code>ReturnType operator--();</code></li>
</ul>
</li>
<li><p><strong>后缀运算符重载声明</strong></p>
<ul>
<li><code>ReturnType operator++(int dummy);</code></li>
<li><code>ReturnType operator--(int dummy);</code></li>
</ul>
</li>
<li><p>通过在函数参数中的哑元参数dummy来区分前缀与后缀的同名重载</p>
</li>
</ul>
<blockquote>
<p>哑元：函数体语句中没有使用该参数</p>
</blockquote>
<h2 id="3-6-静态成员与常量成员"><a href="#3-6-静态成员与常量成员" class="headerlink" title="3.6 静态成员与常量成员"></a>3.6 静态成员与常量成员</h2><h3 id="3-6-1-类中的静态成员"><a href="#3-6-1-类中的静态成员" class="headerlink" title="3.6.1 类中的静态成员"></a>3.6.1 类中的静态成员</h3><ol>
<li>在类型前面加上static修饰的数据成员，隶属于类，称为类的静态成员变量，也称“类变量”<ul>
<li>静态数据成员<strong>被该类的所有对象共享（</strong>即所有对象中的数据与实际上处于同一内存位置</li>
<li>静态数据需要在实现文件中赋初值：<code>Type ClassName::static_var = Value;</code></li>
</ul>
</li>
<li>返回值类型前面加上static修饰的成员函数，为静态成员函数，他们调用非静态成员函数</li>
<li>类的静态成员（数据、函数）可以通过对象类访问，也可以通过类名来访问</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Test() &#123;count++;&#125;</span><br><span class="line">  ~Test() &#123;count--;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">how_many</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> count;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Test::count = <span class="number">0</span>; 	<span class="comment">//定义静态变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Test t)</span></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;in print(), Test#:&quot;</span> &lt;&lt; t.how_many() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Test t1;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Test#: &quot;</span> &lt;&lt; Test::how_many() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// Test#:1</span></span><br><span class="line">  </span><br><span class="line">  Test t2;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Test#: &quot;</span> &lt;&lt; Test::how_many() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// TEst#:1</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Test#:&quot;</span> &lt;&lt; t1.how_many &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; t2.how_many(); <span class="comment">//0 0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构造：count++，但是这里因为没有<strong>拷贝构造函数</strong>，使最后出现的值相同</p>
<p><strong>析构：</strong> count–， 所以最后都为0</p>
</blockquote>
<h3 id="3-6-2-类中的常量成员"><a href="#3-6-2-类中的常量成员" class="headerlink" title="3.6.2 类中的常量成员"></a>3.6.2 类中的常量成员</h3><ol>
<li>使用const修饰的数据成员，称为类的常量数据成员，在对象的整个生命周期都不可更改<ul>
<li>常量数据成员<strong>只能在构造的初始化列表</strong>中被设置，不允许在函数体中通过复制来设置</li>
</ul>
</li>
<li>如果用const来修饰成员函数，则该成员函数在实现时<strong>不能修改类的数据成员–即函数体中不能有改变对象状态的语句</strong><ul>
<li>如果对象被定义为<strong>常量</strong>，则它只能调用以const修饰的成员函数，其他普通成员函数不允许调用</li>
</ul>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> ID;   <span class="comment">//ID常量，不可修改</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Test(<span class="keyword">int</span> tmp) : ID(tmp)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MyID</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> ID;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">who</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> ID;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Test.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">obj1</span><span class="params">(<span class="number">1233</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;static: &quot;</span> &lt;&lt; obj1.MyID() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;non-static: &quot;</span> &lt;&lt; obj1.who() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> Test <span class="title">obj2</span><span class="params">(<span class="number">1234</span>)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;static: &quot;</span> &lt;&lt; obj2.MyID() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;non-static:&quot;</span> &lt;&lt; <span class="string">&quot;no output&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*static: 1233</span></span><br><span class="line"><span class="comment">*non-static: 1233</span></span><br><span class="line"><span class="comment">*static: 1234</span></span><br><span class="line"><span class="comment">*non-static:no output</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="3-7-对象组合"><a href="#3-7-对象组合" class="headerlink" title="3.7 对象组合"></a>3.7 对象组合</h2><h3 id="3-7-1-包含其他类的对象"><a href="#3-7-1-包含其他类的对象" class="headerlink" title="3.7.1 包含其他类的对象"></a>3.7.1 包含其他类的对象</h3><ol>
<li><p>可以在类中使用其他类来定义数据成员，通常称之为“子对象”。这种<strong>包含与被包含</strong>的对象间的关系称为“组合”， <strong>组合关系可以嵌套</strong></p>
<blockquote>
<p>如同“俄罗斯套娃”</p>
</blockquote>
</li>
<li><p>子对象<strong>构造时如果需要参数</strong>，<strong>则</strong>应该在当前类的构造函数的<strong>初始化列表</strong>中进行。如果<strong>使用默认构造函数来构造子对象</strong>，则不用做任何处理</p>
</li>
<li><p>对象的构造与析构次序</p>
<ul>
<li><p>先完成子对象构造，再完成当前对象的构造</p>
<blockquote>
<p>先从最内部开始构造</p>
</blockquote>
</li>
<li><p><strong>对象析构的次序与对象构造的次序</strong>是相反的</p>
<blockquote>
<p>先从最外部析构</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="3-8-移动构造函数（C-11）"><a href="#3-8-移动构造函数（C-11）" class="headerlink" title="3.8 移动构造函数（C++ 11）"></a>3.8 移动构造函数（C++ 11）</h2><ol>
<li><p>语法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ClassName(ClassName&amp;&amp;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>目的</p>
<ul>
<li><p>来偷<strong>“临时变量”</strong>中的资源（如内存</p>
</li>
<li><p>临时变量被编译器设置为常量形式，使用“拷贝构造”函数无法将资源“<strong>偷</strong>出来”</p>
<blockquote>
<p>“偷”是对原对象的一种改动，违反常量的限制</p>
</blockquote>
</li>
<li><p>基于“右值引用”「&amp;&amp;」定义的“移动构造”函数支持接受临时变量，能“偷”出临时变量中的资源</p>
</li>
</ul>
</li>
</ol>
<p>通过增加<code>-fno-elide-constructors</code>可以避免编译器优化而忽略部分过程的问题</p>
<h2 id="3-9-default修饰符"><a href="#3-9-default修饰符" class="headerlink" title="3.9 default修饰符"></a>3.9 default修饰符</h2><p><strong>编译器自动生成的成员函数：</strong></p>
<p>如果以下<strong>成员函数用户</strong>都没有被类实现，则编译器会自动为类生成他们的缺省实现</p>
<ul>
<li>默认构造函数 – 空函数，什么也不做</li>
<li>析构函数 – 空函数，什么也不做</li>
<li>拷贝构造函数 – 按bit位复制对象所占内存的内容</li>
<li>移动构造函数 – 与默认拷贝构造函数一样</li>
<li>赋值运算符重载 – 与默认拷贝构造函数一样</li>
</ul>
<p>如果用户定义了上述某个成员函数，则编译器不再自动提供相应的默认实现</p>
]]></content>
      <categories>
        <category>OOP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP 2 -- 基础语法I</title>
    <url>/2021/04/08/OOP/%E4%BA%8C%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%20I/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="二-基础语法-I"><a href="#二-基础语法-I" class="headerlink" title="二 基础语法 I"></a>二 基础语法 I</h1><h2 id="2-1-变量定义"><a href="#2-1-变量定义" class="headerlink" title="2.1 变量定义"></a>2.1 变量定义</h2><ol>
<li><p><strong>auto</strong>变量</p>
<p>由编译器根据上下文自动确定变量的类型，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> i=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">auto</span> f=<span class="number">4.0f</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>指针变量的动态生成与删除</p>
<ul>
<li>通过new/delete来动态生成和释放内存</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="keyword">int</span>;	<span class="comment">//开辟一个可以放int型的内存空间</span></span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];	</span><br><span class="line"><span class="keyword">delete</span> prt;	<span class="comment">//删除指针变量所指向的内存单元</span></span><br><span class="line"><span class="keyword">delete</span>[] <span class="built_in">array</span>;	<span class="comment">//删除多个单元组成的内存块(删除指向该内存的地址的值)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>左值引用</strong></p>
<p>在定义的时候先初始化，给另一个变量起别名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> v0;</span><br><span class="line"><span class="keyword">int</span> &amp;v1 = v0;<span class="comment">//v1为v0的别名，在内存中是同一单元的两个不同名字</span></span><br></pre></td></tr></table></figure>

<ul>
<li>引用必须在定义时进行初始化</li>
<li>函数的参数也可以是引用类型，改变形参将改变实参</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tmp = b;</span><br><span class="line">	b = a;</span><br><span class="line">	a = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数返回值可以是引用类型，但是不能是函数里面定义的临时变量</li>
</ul>
</li>
<li><p><strong>右值引用</strong></p>
<ul>
<li>不能<strong>取地址的、没有名字</strong>的就是右值【匿名变量】</li>
<li><code>int &amp;&amp;sum = 3+4;</code>即让sum保存3+4的结果</li>
<li>典型应用是在函数参数中：<code>void AcceptRvalueRef(T &amp;&amp; s)&#123;...&#125;</code>。目的是减少临时变量传给函数时，把内容复制过去带来的时间上的开销</li>
</ul>
</li>
</ol>
<h2 id="2-2-变量初始化、类型推导及基于范围的循环"><a href="#2-2-变量初始化、类型推导及基于范围的循环" class="headerlink" title="2.2 变量初始化、类型推导及基于范围的循环"></a>2.2 变量初始化、类型推导及基于范围的循环</h2><h3 id="2-2-1-变量初始化"><a href="#2-2-1-变量初始化" class="headerlink" title="2.2.1 变量初始化"></a>2.2.1 变量初始化</h3><ol>
<li>初始化列表</li>
</ol>
<ul>
<li><p><code>int a[] = &#123;1, 3, 5&#125;;</code></p>
</li>
<li><p>或：<code>int a[]&#123;1, 3, 5&#125;</code>与上句等效</p>
</li>
</ul>
<ol start="2">
<li>变量的初始化方式</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a = &#123;<span class="number">3</span>+<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a&#123;<span class="number">3</span>+<span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(<span class="number">3</span>+<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> *i = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);<span class="comment">//分配一个内存空间能放int,这个空间存着10</span></span><br><span class="line"><span class="keyword">double</span> *d = <span class="keyword">new</span> <span class="keyword">double</span>&#123;<span class="number">1.2f</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-类型推导"><a href="#2-2-2-类型推导" class="headerlink" title="2.2.2 类型推导"></a>2.2.2 类型推导</h3><p>使用<code>decltype</code>对变量/表达式结果的类型进行推导</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span> <span class="keyword">char</span>* name; &#125;anou_u;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">decltype</span>(anou_u) id;</span><br><span class="line">	<span class="keyword">int</span> score</span><br><span class="line">&#125;anou_s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">decltype</span>(anou_s) as;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; as[<span class="number">0</span>].id.name;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-基于范围的for循环"><a href="#2-2-3-基于范围的for循环" class="headerlink" title="2.2.3 基于范围的for循环"></a>2.2.3 基于范围的for循环</h3><p>用“:”分为两部分：(迭代变量 : 遍历数组)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> e:arr)&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-3-函数重载"><a href="#2-3-函数重载" class="headerlink" title="2.3 函数重载"></a>2.3 函数重载</h2><p>同一个名字，有不同的函数体，要求传入参数类型不一样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *msg)</span></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; msg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多个同名的函数实现之间，必须保证至少有一个函数参数类型有区别。</p>
<p>返回值、参数名称等不能作为区分标识。</p>
<h2 id="2-4-函数参数缺省-amp-追踪返回类型"><a href="#2-4-函数参数缺省-amp-追踪返回类型" class="headerlink" title="2.4 函数参数缺省 &amp; 追踪返回类型"></a>2.4 函数参数缺省 &amp; 追踪返回类型</h2><h3 id="2-4-1-函数参数缺省"><a href="#2-4-1-函数参数缺省" class="headerlink" title="2.4.1 函数参数缺省"></a>2.4.1 函数参数缺省</h3><p>函数参数在定义时设置默认值（缺省值），这样在调用时，如果没有设置参数，函数会自动赋值给参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *msg = <span class="string">&quot;hello&quot;</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; msg &lt;&lt; <span class="string">&quot;#&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  print(<span class="string">&quot;HaHa...&quot;</span>);</span><br><span class="line">  print();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HaHa...#hello#</span></span><br></pre></td></tr></table></figure>

<ul>
<li>有缺省的函数参数，必须写在最后一个</li>
<li>如果带有多个，都只能在没有缺省值的参数后面出现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name, <span class="keyword">int</span> score, <span class="keyword">char</span> *msg = <span class="string">&quot;hello&quot;</span>)</span></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; score &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt; msg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-追踪返回类型"><a href="#2-4-2-追踪返回类型" class="headerlink" title="2.4.2 追踪返回类型"></a>2.4.2 追踪返回类型</h3><p>可以将函数返回类型的声明信息放到函数参数列表的后面进行声明</p>
<ul>
<li>普通函数声明：<code>int func(char *ptr, int val);</code></li>
<li><strong>追踪返回类型的函数声明：</strong> <code>auto func(char *ptr, int val) -&gt; int</code></li>
</ul>
<blockquote>
<p>追踪返回类型在原本函数返回值的位置使用auto，箭头由编译器找寻</p>
</blockquote>
<h2 id="2-5-类的定义"><a href="#2-5-类的定义" class="headerlink" title="2.5 类的定义"></a>2.5 类的定义</h2><p>用户自定义类型 – 类CLASS</p>
<ul>
<li>一种用户自定义的类型，包含函数与数据的特殊“结构体”</li>
<li>类中包含的函数，称为“成员函数”；包含的数据，称为“数据成员”</li>
<li>类中函数既可以在类中给出定义，也可以在类外给出定义</li>
<li>类的成员（数据、函数）可以根据需要分成组，不同族设置不同的访问权限</li>
</ul>
<blockquote>
<p>Public(公有)， private（私有）， protected（保护）</p>
</blockquote>
<p>通过<code>“对象名.成员名”</code>的形式，可以使用对象的数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MATRIX_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MATRIX_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-1-在实现文件中定义类"><a href="#2-5-1-在实现文件中定义类" class="headerlink" title="2.5.1 在实现文件中定义类"></a>2.5.1 在实现文件中定义类</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// matrix.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;matrix.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Matrix::fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>&#123;</span><br><span class="line">  ...<span class="comment">//函数实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通常，类的声明放在头文件中，而类的成员函数放在实现文件中</li>
<li>为了便于管理和代码复用，一般将不同的类分别保存为不同的头文件和实现文件</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>&#123;</span><br><span class="line">    ...;	<span class="comment">// &lt;1&gt;类内定义成员函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">-------------</span><br><span class="line">  <span class="comment">//一般放在单独的cpp文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Matrix::fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>&#123;</span><br><span class="line">  ...;	<span class="comment">// &lt;2&gt;类外定义成员函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-2-this指针"><a href="#2-5-2-this指针" class="headerlink" title="2.5.2 this指针"></a>2.5.2 this指针</h3><blockquote>
<p>所有成员函数的参数重，隐含一个只想当前对象的指针变量<code>this</code></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>&#123;</span><br><span class="line">    ...;	<span class="comment">// &lt;1&gt;类内定义成员函数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//等价于data[0][0]=1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">-------------</span><br><span class="line">  <span class="comment">//一般放在单独的cpp文件中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Matrix::fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;	<span class="comment">// &lt;2&gt;类外定义成员函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-6-类成员的访问权限与友元"><a href="#2-6-类成员的访问权限与友元" class="headerlink" title="2.6 类成员的访问权限与友元"></a>2.6 类成员的访问权限与友元</h2><h3 id="2-6-1-类成员的访问权限"><a href="#2-6-1-类成员的访问权限" class="headerlink" title="2.6.1 类成员的访问权限"></a>2.6.1 类成员的访问权限</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matric</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> data[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">&#125;; <span class="comment">//&lt;1&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[<span class="number">6</span>][<span class="number">6</span>];	<span class="comment">//class中成员的缺省属性为private</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">char</span> dir)</span></span>;</span><br><span class="line">&#125;; <span class="comment">//&lt;2&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>访问对象的成员（数据、函数）</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;matrix.h&quot;</span>	<span class="comment">// Matrix类的声明</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Matrix obj;	<span class="comment">//定义变量（对象）</span></span><br><span class="line">  obj.fill(<span class="string">&#x27;u&#x27;</span>);	<span class="comment">//访问公有成员</span></span><br><span class="line">  <span class="comment">//可以使用：obj-&gt;fill(&#x27;u&#x27;);</span></span><br><span class="line">  obj.data[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">23</span>;	<span class="comment">//私有！Error！</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不允许用<code>.</code>访问对象的私有/保护成员，只能访问公有属性</p>
</blockquote>
<h3 id="2-6-2-友元"><a href="#2-6-2-友元" class="headerlink" title="2.6.2 友元"></a>2.6.2 友元</h3><blockquote>
<p>当需要允许某些函数访问对象的私有成员，可以通过声明该函数类的<strong>“友元”</strong>来实现</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Test obj)</span></span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Test obj)</span></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; obj.id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test类中声明了Test类的友元函数print</span></span><br><span class="line"><span class="comment">// 函数在实现时可以访问Test类定义对象的私有成员（如int id）</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OOP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP 1 -- 头文件&amp;make</title>
    <url>/2021/04/08/OOP/%E4%B8%80%20%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83&amp;%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="一-编程环境-amp-简介"><a href="#一-编程环境-amp-简介" class="headerlink" title="一 编程环境&amp;简介"></a>一 编程环境&amp;简介</h1><h2 id="1-1-编程环境-amp-工具"><a href="#1-1-编程环境-amp-工具" class="headerlink" title="1.1 编程环境 &amp; 工具"></a>1.1 编程环境 &amp; 工具</h2><p>源代码的基本接口：头文件与编译指令 + 函数「辅助/主函数」定义</p>
<p><strong>编译、链接：</strong>gcc -c：<strong>编译</strong>—-&gt; <code>.o</code>文件。或者直接<code>g++</code>, 直接生成<code>.out</code>文件，编译链接一步完成</p>
<h2 id="1-2-源程序拆分"><a href="#1-2-源程序拆分" class="headerlink" title="1.2 源程序拆分"></a>1.2 源程序拆分</h2><p>源代码变复杂时—》 拆开，将一个cpp分成多个cpp，便于维护和交流</p>
<p>通常把辅助函数抽取出来，自己编写的一般用””包括起来，&lt;&gt;为系统含有的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//func.h </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//func.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;func.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>防止重复包含导致的编译错误</strong></p>
<p><strong>传统：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//func.h</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure>

<p>增加预编译指令：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ADD </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ADD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>这样多次出现func.h，也不会出现编译错误,这样是防止头文件被重复引用，在头文件中定义了全局变量时会引起重复定义</p>
<blockquote>
<p>不是一定要加，但是不管怎样，使用#ifndef xxx #define xxx #endif或者其他方式避免头文件重复包含，只有好处没有坏处～</p>
</blockquote>
<h2 id="1-3-多文件编程链接的方法"><a href="#1-3-多文件编程链接的方法" class="headerlink" title="1.3 多文件编程链接的方法"></a>1.3 多文件编程链接的方法</h2><p>make工具</p>
<ul>
<li>编写专门格式的MakeFile文件</li>
<li>大型编译自动化的一种工具<ul>
<li>减少编译花费的时间，确保使用正确的选项进行编译</li>
</ul>
</li>
</ul>
<p><strong>格式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任务名： 前提条件「源代码的名字」</span><br></pre></td></tr></table></figure>

<p><strong>执行MakeFile的基本方法</strong></p>
<ul>
<li><p>1: make </p>
<blockquote>
<p>执行第一个任务</p>
</blockquote>
</li>
<li><p>2：make 任务名</p>
<ul>
<li>make clean； make </li>
</ul>
</li>
<li><p>3:make 其他任务： make -f makefile的文件名</p>
</li>
<li><p>4:<code>make -f makefileName</code>: make -f my_mkfile.exe</p>
</li>
</ul>
<h2 id="2-main函数的命令行参数"><a href="#2-main函数的命令行参数" class="headerlink" title="2 main函数的命令行参数"></a>2 main函数的命令行参数</h2><h3 id="2-1-命令行参数"><a href="#2-1-命令行参数" class="headerlink" title="2.1 命令行参数"></a>2.1 命令行参数</h3><p>通常情况下，return 0表示没有错误， return 1 表示出现错误</p>
<p>给出<code>#ifndef/#define/#endif</code>格式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> A_H  <span class="comment">//	if not degine a.h</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A_H	 <span class="comment">//	接下来就需要引入a.h</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>			 <span class="comment">//	否则不需要引入</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OOP</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>uCore Lab 1</title>
    <url>/2021/04/05/uCore/Lab%201/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="1-实验准备"><a href="#1-实验准备" class="headerlink" title="1 实验准备"></a>1 实验准备</h1><p>os需要通过某种机制加载并运行它，在这里我们通过更加简单的软件–boot loader来完成这些工作，为此，我们需要一个能够切换到x86的保护模式并显示字符的bootloader，为启动ucore作准备。lab1提供了一个非常小的bootloader和ucore OS，整个bootloader执行代码小于512字节，这样才能放到硬盘的主引导扇区中。</p>
<h1 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2 实验内容"></a>2 实验内容</h1><p>lab1中包含一个bootloader和一个OS，这个bootloader可以切换到x86保护模式，能够读磁盘并加载ELF执行文件格式，并显示字符。</p>
<h2 id="练习一：make生成执行文件"><a href="#练习一：make生成执行文件" class="headerlink" title="练习一：make生成执行文件"></a>练习一：make生成执行文件</h2><h3 id="1-1-ucore-img镜像文件是如何生成的（需要详细的解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果）"><a href="#1-1-ucore-img镜像文件是如何生成的（需要详细的解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果）" class="headerlink" title="1.1 ucore.img镜像文件是如何生成的（需要详细的解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果）"></a>1.1 ucore.img镜像文件是如何生成的（需要详细的解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果）</h3><ol>
<li>GCC编译选项</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	-g 增加gdb调试信息</span><br><span class="line">	-Wall 显示警告信息</span><br><span class="line">	-O2 优化处理（有0， 1， 2， 3， 0为不优化）</span><br><span class="line">	-fno-builtin 只接受以“__”开头的内建函数</span><br><span class="line">	-ggdb 让gcc为gdb生成更丰富的调试信息</span><br><span class="line">	-m32 编译32位程序</span><br><span class="line">	-gstabs 这个选项以stabs格式生成调试信息，但是不包括gdb调试信息</span><br><span class="line">	-nostdinc 不在标准系统目录中搜索头文件，只在-l指定的目录中搜索</span><br><span class="line">	-fstack-protector-all 启用堆栈保护，为所有函数插入保护代码</span><br><span class="line">	-E 仅做预处理，不尽心编译、汇编和链接</span><br><span class="line">	-x c 指明使用的语言为C语言</span><br><span class="line"></span><br><span class="line">LDD Flags</span><br><span class="line">	-nostdlib	不链接系统标准启动文件和标准库文件，只把指定的文件传递给连接器</span><br><span class="line">	-m elf\_i386 使用elf_i386模拟器</span><br><span class="line">	-N 把text和data节设置为可读写，同时取消数据节的页对齐，取消对共享库的链接</span><br><span class="line">	-e func	以符号func的位置作为程序开始运行的位置</span><br><span class="line">	-Ttext addr	连接时将初始地址重定向为addr</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编译bootloader</li>
</ol>
<blockquote>
<p>用来加载Kernel </p>
<p>先把bootasm.S, bootmain.c 编译成目标文件</p>
<p>再使用连接器链接到一起，使用start符号作入口，并且指定text段在程序中的绝对位置为0x7c00，0x7c00为os一开始加载的地址</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//bootasm.o</span><br><span class="line">+ cc boot/bootasm.S</span><br><span class="line">gcc -Iboot/ -fno-builtin  -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o</span><br><span class="line"></span><br><span class="line">//生成bootmain.o</span><br><span class="line">+ cc boot/bootmain.c</span><br><span class="line">gcc -Iboot/ -fno-builtin  -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o</span><br><span class="line"></span><br><span class="line">//ld bin/bootblock</span><br><span class="line">ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;obj/bootblock.out&#x27;</span> size: 468 bytes</span><br><span class="line">build 512 bytes boot sector: <span class="string">&#x27;bin/bootblock&#x27;</span> success!</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>编译Kernel</strong></li>
</ol>
<blockquote>
<p>操作系统本身</p>
<p>先把.c文件和.S汇编文件生成目标文件，之后使用链接起生成Kernel</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ cc kern/init/init.c</span><br><span class="line">gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o</span><br><span class="line">+ cc kern/libs/readline.c</span><br><span class="line">gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/libs/readline.c -o obj/kern/libs/readline.o</span><br><span class="line">+ cc kern/libs/stdio.c</span><br><span class="line">gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/libs/stdio.c -o obj/kern/libs/stdio.o</span><br><span class="line">+ cc kern/debug/kdebug.c</span><br><span class="line">gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/debug/kdebug.c -o obj/kern/debug/kdebug.o</span><br><span class="line">+ cc kern/debug/kmonitor.c</span><br><span class="line">gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/debug/kmonitor.c -o obj/kern/debug/kmonitor.o</span><br><span class="line">+ cc kern/debug/panic.c</span><br><span class="line">gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/debug/panic.c -o obj/kern/debug/panic.o</span><br><span class="line">+ cc kern/driver/clock.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/driver/clock.c -o obj/kern/driver/clock.o</span><br><span class="line">+ cc kern/driver/console.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/driver/console.c -o obj/kern/driver/console.o</span><br><span class="line">+ cc kern/driver/intr.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/driver/intr.c -o obj/kern/driver/intr.o</span><br><span class="line">+ cc kern/driver/picirq.c</span><br><span class="line">gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/driver/picirq.c -o obj/kern/driver/picirq.o</span><br><span class="line">+ cc kern/<span class="built_in">trap</span>/trap.c</span><br><span class="line">gcc -Ikern/<span class="built_in">trap</span>/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/<span class="built_in">trap</span>/trap.c -o obj/kern/<span class="built_in">trap</span>/trap.o</span><br><span class="line">+ cc kern/<span class="built_in">trap</span>/trapentry.S</span><br><span class="line">gcc -Ikern/<span class="built_in">trap</span>/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/<span class="built_in">trap</span>/trapentry.S -o obj/kern/<span class="built_in">trap</span>/trapentry.o</span><br><span class="line">+ cc kern/<span class="built_in">trap</span>/vectors.S</span><br><span class="line">gcc -Ikern/<span class="built_in">trap</span>/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/<span class="built_in">trap</span>/vectors.S -o obj/kern/<span class="built_in">trap</span>/vectors.o</span><br><span class="line">+ cc kern/mm/pmm.c</span><br><span class="line">gcc -Ikern/mm/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/<span class="built_in">trap</span>/ -Ikern/mm/ -c kern/mm/pmm.c -o obj/kern/mm/pmm.o</span><br><span class="line">+ cc libs/printfmt.c</span><br><span class="line">gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/printfmt.c -o obj/libs/printfmt.o</span><br><span class="line">+ cc libs/string.c</span><br><span class="line">gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/string.c -o obj/libs/string.o</span><br><span class="line"></span><br><span class="line">+ ld bin/kernel</span><br><span class="line">ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/<span class="built_in">trap</span>/trap.o obj/kern/<span class="built_in">trap</span>/trapentry.o obj/kern/<span class="built_in">trap</span>/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>编译sign</strong></li>
</ol>
<blockquote>
<p>用于生成一个复合规范的硬盘主引导扇区</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+ cc tools/sign.c</span><br><span class="line">gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o</span><br><span class="line">gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign</span><br></pre></td></tr></table></figure>

<p><strong>在这里也有第二问的答案，我们来看看sign.c</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">less tools/sign.c</span><br></pre></td></tr></table></figure>

<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210405213234119.png" alt="image-20210405213234119" style="zoom:50%;">

<p>第一个扇区为bootloader的位置，通过0x7c00指向这，前510个字节全部为0（用于初始化），后面第511和512个字节必须为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">buf[<span class="number">510</span>] = <span class="number">0x55</span>;</span><br><span class="line">buf[<span class="number">511</span>] = <span class="number">0xAA</span>;</span><br></pre></td></tr></table></figure>

<p>否则硬盘启动会失败</p>
<ol start="5">
<li><strong>生成ucore.img</strong></li>
</ol>
<ul>
<li>dd - 转换和拷贝文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>	表示输入文件，如果不指定<span class="keyword">if</span>，默认会从stdin中读取输入</span><br><span class="line">of	表示输出文件，如果不指定of，默认会将stdout作为默认输出</span><br><span class="line">bs	代表字节为单位的块大小</span><br><span class="line">count 	表示被复制的块数</span><br><span class="line">/dev/zero	是一个字符设备，会不断返回0值字节(\0)</span><br><span class="line">conv=notrunc	输入文件的时候，源文件不会被截断</span><br><span class="line">seek=blocks		从输出文件开头跳过blocks（512字节）个块后再开始复制</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>过程：</strong> 生成一个空的软盘镜像，然后把bootloader以不截断的方式填充到开始的块中，然后kernel会跳过bootloader所在的块，再填充</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=bin/ucore.img count=10000</span><br><span class="line">dd <span class="keyword">if</span>=bin/bootblock of=bin/ucore.img conv=notrunc</span><br><span class="line">dd <span class="keyword">if</span>=bin/kernel of=bin/ucore.img seek=1 conv=notrunc</span><br></pre></td></tr></table></figure>

<h3 id="1-2-主引导扇区的特征是什么"><a href="#1-2-主引导扇区的特征是什么" class="headerlink" title="1.2 主引导扇区的特征是什么"></a>1.2 主引导扇区的特征是什么</h3><p>上面提过的，一个磁盘主引导扇区只有512个字节，并且<code>buf[510] = 0x55</code>, <code>buf[511] = 0xAA</code></p>
<h2 id="练习2：使用qemu执行并调试lab1中的软件"><a href="#练习2：使用qemu执行并调试lab1中的软件" class="headerlink" title="练习2：使用qemu执行并调试lab1中的软件"></a>练习2：使用qemu执行并调试lab1中的软件</h2><ol>
<li>从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行</li>
<li>在初始化位置0x7c00设置实地址断点，测试断点正常</li>
<li>在调用qemu时增加<code>-d </code></li>
</ol>
<h3 id="2-1-qemu-system-i386"><a href="#2-1-qemu-system-i386" class="headerlink" title="2.1 qemu-system-i386"></a>2.1 qemu-system-i386</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-hda file	硬盘选项</span><br><span class="line">-parallel dev	重定向虚拟并口到主机设备，最多可虚拟3个并口</span><br><span class="line">-serial dev	重定向虚拟串口到主机设备</span><br><span class="line">	vc: 虚拟控制台</span><br><span class="line">	pty: 仅仅linux有效，虚拟tty（一个虚拟伪终端会被立刻分配）</span><br><span class="line">	none: 没有设备被分配</span><br><span class="line">  null: 无效设备</span><br><span class="line">-S	启动的时候不直接从CPU启动，需要在窗口中按c来继续</span><br><span class="line">-s	shorthand <span class="keyword">for</span> -gdb tcp::1234，打开端口1234，供gdb来调试</span><br></pre></td></tr></table></figure>

<h3 id="2-2-gdb"><a href="#2-2-gdb" class="headerlink" title="2.2 gdb"></a>2.2 gdb</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-x	从文件中执行gdb命令</span><br><span class="line">-q	不打印介绍和版权信息</span><br><span class="line">-tui	将终端屏幕分成原文本窗口和控制台的多个子窗口，能够一边看源码一边调试</span><br><span class="line"></span><br><span class="line">-S -s 使得qemu在执行第一条指令之前停下来，然后sleep两秒给qemu充分的时间准备等待连接，接下来使用gdb调试工具，-tui提供代码与命令行分屏查看的界面，tools/gdbinit中存放的事gdb调试</span><br></pre></td></tr></table></figure>

<p>一开始进入<code>tools\gdbinit</code>文件夹下修改<code>gdbinit</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> arch i8086</span><br><span class="line">target post: 1234</span><br></pre></td></tr></table></figure>

<h2 id="练习3-分析bootloader进入保护模式的过程"><a href="#练习3-分析bootloader进入保护模式的过程" class="headerlink" title="练习3:分析bootloader进入保护模式的过程"></a>练习3:分析bootloader进入保护模式的过程</h2><ul>
<li><strong>BIOS通过读取硬盘主引导扇区到内存，并跳转到对应内存中的位置执行bootloader是如何从实模式进入保护模式</strong></li>
</ul>
<p>需要了解；</p>
<ul>
<li>为何开启A20，如何开启A20</li>
<li>如何初始化GDT表</li>
<li>如何使能和进入保护模式</li>
</ul>
<h3 id="3-1-开启A20"><a href="#3-1-开启A20" class="headerlink" title="3.1 开启A20"></a>3.1 开启A20</h3><p>bootloader入口为start，根据bootloader相关知识可以知道，bootloader会被BIOS加载到内存的0x7c00处，此时cs=0，eip=0x7c00，刚进入bootloader时，最先执行的操作分别为关闭中断，清楚EFLAGS的DF位以及将ax，ds，es，ss寄存器初始化为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.globl start</span><br><span class="line">start:</span><br><span class="line">.code16                                             # Assemble for 16-bit mode</span><br><span class="line">    cli                                             # Disable interrupts</span><br><span class="line">    cld                                             # String operations increment</span><br><span class="line"></span><br><span class="line">    # Set up the important data segment registers (DS, ES, SS).</span><br><span class="line">    xorw %ax, %ax                                   # Segment number zero</span><br><span class="line">    movw %ax, %ds                                   # -&gt; Data Segment</span><br><span class="line">    movw %ax, %es                                   # -&gt; Extra Segment</span><br><span class="line">    movw %ax, %ss                                   # -&gt; Stack Segment</span><br></pre></td></tr></table></figure>

<p>接下来为了使CPU进入保护模式后充分使用32位的寻址能力，需要开启A20，关闭“回卷”机制；</p>
<blockquote>
<p><strong>什么是“回卷”机制？</strong></p>
<p>Intel早期的8086 CPU提供了20根地址线，但是8086数据处理位宽位为16位，无法直接寻址1MB的内存空间，所以8086提供了段地址加偏移地址的地址转换机制。</p>
<p>PC机的寻址结构为segment:offset，segment和ofset都是16位寄存器，最大值为0x0ffffh，换算成物理地址是将segement左移4位，再加上offset，所以segment:offset能表示的最大寻址空间为<code>0x10ffefh</code>，为1088KB，超过20位地址线【1024KB=1MB】的内存，会发生“回卷”（不会发生异常）</p>
</blockquote>
<p>下一代Intel 80286 CPU的PC AT计算机系统提供了24根地址线，如果遇到寻址超过1MB的情况，系统不再“回卷”，为了保持向下兼容性，PC AT计算机系统上加了硬件逻辑，来模仿回绕特征，于是出现了<code>A20 Gate</code></p>
<blockquote>
<p>方法为将A20地址线的打开（使能）和关闭（屏蔽/禁止）与键盘控制器8042用逻辑AND连接起来。</p>
<p>一开始A20是被屏蔽的（总为0），直到系统软件通过一定的I/O操作去打开它。很显然，在实模式下要访问buffer，这个开关必须打开。</p>
<p>在保护模式下，由于使用了32位地址线，A20恒为0，则系统只能访问奇数兆内存：<code>0-1M, 2-3M, 4-5M....</code>,这样无法有效访问所有可用内存，所以在保护模式下，这个开关也必须打开</p>
</blockquote>
<p>在保护模式下，为了使能所有地址位的寻址能力，需要开启A20地址线控制，即需要通过向键盘控制器8042发送一个命令来完成。8042会将它的某个输出引脚的输出置高电平，作为A20地址线控制的输入，一旦设置成功，内存将不会再被<strong>绕回（memory wrapping）</strong>，这样就可以寻址整个80286 16M内存，或者寻址80386级别机器的所有4G内存</p>
<p>这个过程主要分为等待8042控制器<code>Input Buffer</code>为空，发送P2命令到<code>Input Buffer</code>，等待<code>Input Buffer</code>为空，将P2得到的第二个位（A20选通）置为1，写回<code>Input Buffer</code>，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在开启A20之前，BIOS还做了很多事:关中断、清除方向标志，给各个数据段清零。</span><br><span class="line">.globl start</span><br><span class="line">start:</span><br><span class="line">.code16                 # Assemble for 16-bit mode</span><br><span class="line">    cli                 # Disable interrupts</span><br><span class="line">    cld                 # String operations increment --&gt; 操作「方向标志位DF」, DF&#x3D;0:向高地址加；DF&#x3D;1:向低地址减小</span><br><span class="line"></span><br><span class="line">    xorw %ax, %ax       # Segment number zero</span><br><span class="line">    movw %ax, %ds       # -&gt; Data Segment</span><br><span class="line">    movw %ax, %es       # -&gt; Extra Segment</span><br><span class="line">    movw %ax, %ss       # -&gt; Stack Segment</span><br><span class="line"></span><br><span class="line">seta20.1:</span><br><span class="line">    inb $0x64, %al               # 等待8042键盘控制器不忙</span><br><span class="line">    testb $0x2, %al</span><br><span class="line">    jnz seta20.1</span><br><span class="line"></span><br><span class="line">    movb $0xd1, %al             # 发送写8042输出端口的指令 </span><br><span class="line">    outb %al, $0x64             </span><br><span class="line"></span><br><span class="line">seta20.2:</span><br><span class="line">    inb $0x64, %al              # 等待8042键盘控制器不忙，inb 从I&#x2F;O端口读取一个字节</span><br><span class="line">    testb $0x2, %al</span><br><span class="line">    jnz seta20.2</span><br><span class="line"></span><br><span class="line">    movb $0xdf, %al              # 打开A20</span><br><span class="line">    outb %al, $0x60 						 # 从I&#x2F;O端口写入一个字 </span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>cli</code>禁止中断发生，<code>stl</code>允许中断发生，这两个指令只能在内核模式下执行，不能在用户模式下执行，在内核模式下执行时，应该尽可能快的恢复中断，如果长时间处于<code>cli</code>下，系统会十分不稳定</p>
</li>
<li><p>如果过程中需要改变段寄存器SS和SP，必须禁止中断，当改变完成后再恢复中断</p>
</li>
</ul>
<hr>
<h3 id="3-2-初始化GDT表"><a href="#3-2-初始化GDT表" class="headerlink" title="3.2 初始化GDT表"></a>3.2 初始化GDT表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Bootstrap GDT</span><br><span class="line">.p2align 2                                          # force 4 byte alignment</span><br><span class="line">gdt:</span><br><span class="line">    SEG_NULLASM                                     # null seg</span><br><span class="line">    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel</span><br><span class="line">    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel</span><br><span class="line"></span><br><span class="line">gdtdesc:</span><br><span class="line">    .word 0x17                                      # sizeof(gdt) - 1</span><br><span class="line">    .long gdt     </span><br></pre></td></tr></table></figure>

<blockquote>
<p>把gdt表的起始位置和limit装入GDTR寄存器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lgdt gdtdesc									# 将gdt表的起始位置和limit装入GDTR Reg中</span><br><span class="line">movl %eax, %cr0								# 开启保护模式</span><br></pre></td></tr></table></figure>

<ul>
<li><code>lgdt m16&amp;32</code>：表示将m加载到GDTR，LGDT用于加载全局描述符表格寄存器。相对应的为<code>LIDT:加载中断描述符表格寄存器</code>，为将m加载到IDTR</li>
</ul>
<hr>
<h3 id="3-3-如何使能-amp-进入保护模式"><a href="#3-3-如何使能-amp-进入保护模式" class="headerlink" title="3.3 如何使能&amp;进入保护模式"></a>3.3 如何使能&amp;进入保护模式</h3><p>在A20开启，<code>lgdt gdtdesc</code>载入GDTR后，只需要将CR0寄存器的PE位置设为1，即可从实模式切换到保护模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movl %cr0, %eax</span><br><span class="line">orl $CR0_PE_ON, %eax</span><br><span class="line">movl %eax, %cr0</span><br></pre></td></tr></table></figure>

<p>后使用一个长跳转指令，将cs修改为32位段寄存器，及跳转到protcseg（32位入口），此时CPU进入32位模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ljmp $PROT_MODE_CSEG, $protcseg</span><br></pre></td></tr></table></figure>

<p>接下来设置<code>ds, es, fs, gs, ss</code>这些段寄存器，初始化栈的frame pointer &amp; stack pointer，后<code>call bootmain</code>，加载os内核，在这里，bootloader实现了从实模式进入到保护模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.code32                                             # Assemble for 32-bit mode</span><br><span class="line">protcseg:</span><br><span class="line">    # Set up the protected-mode data segment registers</span><br><span class="line">    movw $PROT_MODE_DSEG, %ax                       # Our data segment selector</span><br><span class="line">    movw %ax, %ds                                   # -&gt; DS: Data Segment</span><br><span class="line">    movw %ax, %es                                   # -&gt; ES: Extra Segment</span><br><span class="line">    movw %ax, %fs                                   # -&gt; FS</span><br><span class="line">    movw %ax, %gs                                   # -&gt; GS</span><br><span class="line">    movw %ax, %ss                                   # -&gt; SS: Stack Segment</span><br><span class="line"></span><br><span class="line">    # Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)</span><br><span class="line">    movl $0x0, %ebp</span><br><span class="line">    movl $start, %esp</span><br><span class="line">    call bootmain</span><br><span class="line"></span><br><span class="line">    # If bootmain returns (it shouldn&#39;t), loop.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="练习4-分析bootloader加载ELF格式的过程"><a href="#练习4-分析bootloader加载ELF格式的过程" class="headerlink" title="练习4:分析bootloader加载ELF格式的过程"></a>练习4:分析bootloader加载ELF格式的过程</h2><ul>
<li>bootloader如何读取硬盘扇区</li>
<li>bootloader如何加载ELF格式的OS</li>
</ul>
<p>参考资料：</p>
<ul>
<li><p><a href="https://objectkuan.gitbooks.io/ucore-docs/content/lab1/lab1_3_2_3_dist_accessing.html">硬盘访问概述</a></p>
<blockquote>
<p>IDE：Integrated Drive Electronics<strong>「电子集成驱动器」</strong></p>
</blockquote>
</li>
<li><p><a href="https://objectkuan.gitbooks.io/ucore-docs/content/lab1/lab1_3_2_4_elf.html">ELF文件格式概述</a></p>
</li>
</ul>
<h3 id="4-1-bootloader读取硬盘扇区"><a href="#4-1-bootloader读取硬盘扇区" class="headerlink" title="4.1 bootloader读取硬盘扇区"></a>4.1 bootloader读取硬盘扇区</h3><ol>
<li>先为<code>waitdisk.c</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitdisk</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>((inb(<span class="number">0x1F7</span>) &amp; <span class="number">0xC0</span>) != <span class="number">0x40</span>)</span><br><span class="line">    <span class="comment">/*do nothing*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用：连续不断的从0x1F7地址读取磁盘的状态，直到磁盘不忙为止</p>
<ol start="2">
<li>再到<code>readsect.c</code></li>
</ol>
<blockquote>
<p>基本功能：读取一个磁盘扇区</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">readsect(<span class="keyword">void</span> *dst, <span class="keyword">uint32_t</span> secno) &#123;</span><br><span class="line">    waitdisk(); <span class="comment">// 等待磁盘到不忙为止</span></span><br><span class="line"></span><br><span class="line">    outb(<span class="number">0x1F2</span>, <span class="number">1</span>);             <span class="comment">// 往0X1F2地址中写入要读取的扇区数，由于此处需要读一个扇区，因此参数为1</span></span><br><span class="line">    outb(<span class="number">0x1F3</span>, secno &amp; <span class="number">0xFF</span>); <span class="comment">// 输入LBA参数的0...7位；</span></span><br><span class="line">    outb(<span class="number">0x1F4</span>, (secno &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>); <span class="comment">// 输入LBA参数的8-15位；</span></span><br><span class="line">    outb(<span class="number">0x1F5</span>, (secno &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>); <span class="comment">// 输入LBA参数的16-23位；</span></span><br><span class="line">    outb(<span class="number">0x1F6</span>, ((secno &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xF</span>) | <span class="number">0xE0</span>); <span class="comment">// 输入LBA参数的24-27位（对应到0-3位），第四位为0表示从主盘读取，其余位被强制置为1；</span></span><br><span class="line">    outb(<span class="number">0x1F7</span>, <span class="number">0x20</span>);                      <span class="comment">// 向磁盘发出读命令0x20</span></span><br><span class="line"></span><br><span class="line">    waitdisk(); <span class="comment">// 等待磁盘直到不忙</span></span><br><span class="line"></span><br><span class="line">    insl(<span class="number">0x1F0</span>, dst, SECTSIZE / <span class="number">4</span>); <span class="comment">// 从数据端口0x1F0读取数据，除以4是因为此处是以4个字节为单位的，这个从指令是以l(long)结尾这点可以推测出来；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>读取磁盘扇区过程的总结</strong></p>
<ol>
<li>等待磁盘直到不忙</li>
<li>往<strong>0x1F2到0x1F6</strong>中设置读取扇区需要的参数，包括<strong>读取扇区的数量及LBA参数</strong></li>
<li>往0x1F7端口发送读命令</li>
<li>等待磁盘完成读取操作</li>
<li>从数据端口0x1F0读取数据到指定内存中</li>
</ol>
<p>此外，还有<code>readseg</code>函数来读取磁盘磁盘，其功能为将<code>readsect</code>进一步封装，提供从磁盘第二个扇区起<code>offset</code>个位置处，读取<code>count</code>个字节到指定内存中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从设备中读count个字节到va这个地址，offset是指想读的位置距离开始的偏移</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">readseg(<span class="keyword">uintptr_t</span> va, <span class="keyword">uint32_t</span> count, <span class="keyword">uint32_t</span> offset) &#123;</span><br><span class="line">    <span class="keyword">uintptr_t</span> end_va = va + count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算当前偏移在那个扇区的位置，并且让va地址向前偏移这些字节，</span></span><br><span class="line">    <span class="comment">//然后读完之后，用户开始传入的地址va的内容就是偏移所在内容</span></span><br><span class="line">    va -= offset % SECTSIZE;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// translate from btyes to sectors; kernel starts at sector 1</span></span><br><span class="line">    <span class="keyword">uint32_t</span> secno = (offset/ SECTSIZE) +<span class="number">1</span> ;    <span class="comment">//计算偏于所在的扇区，kernel是在起始就是第一个扇区</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; va &lt; end_va; va += SECTSIZE, secno++) (</span><br><span class="line">    readsect((<span class="keyword">void</span> *)va, secno);</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-2-bootloader加载ELF的os"><a href="#4-2-bootloader加载ELF的os" class="headerlink" title="4.2 bootloader加载ELF的os"></a>4.2 bootloader加载ELF的os</h3><ol>
<li>加载<code>ELF</code>格式OS</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">readseg((<span class="keyword">uintptr_t</span>)ELFHDR, SECTSIZE * <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (ELFHDR-&gt;e_magic != ELF_MAGIC) &#123;</span><br><span class="line">    <span class="keyword">goto</span> bad;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从磁盘第一个扇区（第零个扇区为<code>bootloader</code>）中读取<code>OS kernel</code>最开始的4KB代码，然后判断其最开始四个字节是否等于指定的<strong>ELF_MAGIC</strong>，来判断<strong>ELF Header</strong>是否合法</p>
<ol start="2">
<li>获取<strong>proghdr【program header】</strong>表的位置，以及<strong>该表的入口数目</strong>，后遍历该表的每一项，并从每一个<code>proghdr</code>中获取到段应该被加载到内存中的位置（<code>Load Address</code>，虚拟地址），以及段的大小。之后再调用<code>readseg</code>函数将每一个段加载到内存中</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proghdr</span> *<span class="title">ph</span>, *<span class="title">eph</span>;</span></span><br><span class="line">ph = (struct proghdr *)((<span class="keyword">uintptr_t</span>)ELFHDR + ELFHDR-&gt;e_phoff);</span><br><span class="line">eph = ph + ELFHDR-&gt;e_phnum;</span><br><span class="line"><span class="keyword">for</span> (; ph &lt; eph; ph ++) &#123;</span><br><span class="line">    readseg(ph-&gt;p_va &amp; <span class="number">0xFFFFFF</span>, ph-&gt;p_memsz, ph-&gt;p_offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>bootloader</code>所要完成的最后一个步骤即从<strong>ELF header中查询OS kernel的入口地址</strong>，然后使用函数调用的方式跳转到该地址</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))(ELFHDR-&gt;e_entry &amp; <span class="number">0xFFFFFF</span>))();</span><br></pre></td></tr></table></figure>

<h2 id="练习5-实现函数调用堆栈跟踪函数"><a href="#练习5-实现函数调用堆栈跟踪函数" class="headerlink" title="练习5: 实现函数调用堆栈跟踪函数"></a>练习5: 实现函数调用堆栈跟踪函数</h2><ul>
<li>需要在lab1中完成<code>kdebug.c</code>中函数<code>print_stackframe</code>的实现，可以通过函数<code>print_stackframe</code>来跟踪函数调用堆栈中记录的返回地址</li>
</ul>
<p><strong>补充知识</strong>：<code>bootloader</code>通过读取硬盘扇区把<code>ucore</code>在系统加载到内存后，就跳转到<code>ucore os</code>在内存中的入口位置（<code>kern/init.c</code>中<code>kern_init</code>函数的起始地址），这样ucore就能接管整个控制权</p>
<h3 id="5-1-函数堆栈"><a href="#5-1-函数堆栈" class="headerlink" title="5.1 函数堆栈"></a>5.1 函数堆栈</h3><p><strong>调用栈</strong>最重要的两点：<strong>栈的结构</strong>和<strong>EBP寄存器的作用</strong></p>
<p>一个函数调用动作可以分解为：零到多个PUSH指令（用于参数入栈），一个CALL指令「CALL指令内部还添加了一个<strong>返回地址（即CALL指令下一条指令的地址）</strong>」。几乎所有complier都会在每个函数体之前插入类似如下的汇编指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pushl		%ebp</span><br><span class="line">movl		%esp, %ebp</span><br></pre></td></tr></table></figure>

<p>在程序执行到一个函数的实际指令前，已经有以下数据顺序入栈：参数、返回地址、EBP寄存器，得到如下栈结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+|	栈底方向     【高位地址】</span><br><span class="line"> |    ...</span><br><span class="line"> |    ...</span><br><span class="line"> | 	 参数3</span><br><span class="line"> |   参数2</span><br><span class="line"> |   参数1</span><br><span class="line"> |  返回地址</span><br><span class="line"> |	上一层[ebp]</span><br><span class="line"> |	局部变量     【低位地址】</span><br></pre></td></tr></table></figure>

<p>这两条汇编指令的含义是：将ebp寄存器入栈，然后将栈顶指针esp赋值给esp</p>
<p>“Mov ebp esp”这条指令看上去是用esp赋值给ebp，其实不然，因为给ebp赋值之前，原ebp值已经被压栈（位于栈顶），而新的ebp又恰恰指向栈顶，此时ebp寄存器就已经处于一个非常重要的地位，该寄存器中存储着栈中的一个地址（原ebp入栈后的栈顶），从该地址为基准，向上（栈底方向）能获取返回地址、参数值，向下（栈顶方向）能获取函数局部变量值，而该地址处又存储着上一层函数调用时的ebp值。</p>
<p>一般来说，<code>ss:[ebp+4]</code>作为返回地址，<code>ss:[ebp+8]</code>处为第一个参数值（最后一个入栈的参数值，此处假设其占用4字节内存），<code>ss:[ebp-4]</code>处为第一个局部变量，<code>ss:[ebp]</code>处为上一层<code>ebp</code>值。由于<code>ebp</code>中的地址处总是“上一层函数调用时的ebp值”，而在每一层函数调用中，都能通过当时的<code>ebp值</code>向上（栈底方向）能获取返回地址、参数值，向下（栈底方向）能获取函数局部变量值，如此形成递归，直至到达栈底，这就是函数调用栈。</p>
<h3 id="5-2-前提知识"><a href="#5-2-前提知识" class="headerlink" title="5.2 前提知识"></a>5.2 前提知识</h3><p>栈相关的寄存器有两个，<code>ebp（基址寄存器）</code>和<code>esp（栈指针寄存器）</code>，栈的增长方向由高到低</p>
<p><code>eip</code>为程序指令指针，为当前程序运行的指令</p>
<p>举例，main函数在调用<code>sum(int a, int b)</code>时：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+|	参数b  | -高地址</span><br><span class="line"> |	参数a</span><br><span class="line"> |	sum函数下一条命令的地址</span><br><span class="line"> |	main函数栈的基址</span><br><span class="line">-|	----	|- ebp【低地址】</span><br></pre></td></tr></table></figure>

<p>此时，ebp是sum函数栈的基址，而后eip内是sum函数中的第一条指令</p>
<p>sum函数执行完之后，sum函数栈的内容全部出栈，然后ebp重新变成 main函数的函数栈基址,</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ebp = *((<span class="keyword">uint_t</span>*) ebp)</span><br><span class="line">eip = *((<span class="keyword">uint_t</span>*)ebp+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>以上为sum函数之后的指令的地址，然后函数参数出栈</p>
<h3 id="5-3-插入代码"><a href="#5-3-插入代码" class="headerlink" title="5.3 插入代码"></a>5.3 插入代码</h3><ul>
<li><code>cprintf</code>与printf的区别</li>
</ul>
<ol>
<li>cprintf函数用于向当前窗口输出数据，printf为标准输出，可以完全不知道其需要输出的对象，只是以标准的文本流式输出；cprintf与终端相关，要用到一些系统平台，硬件设备相关的特性，所以可以有颜色等很多东西来选择，但同时也削弱了移植性，所以cprintf是非标准的，cprintf中的c代表console，即控制台。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">///kern/debug/kdebug.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_stackframe</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> t_ebp = read_ebp();</span><br><span class="line">    <span class="keyword">uint32_t</span> t_eip = read_eip();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; STACKFRAME_DEPTH &amp;&amp; t_ebp!=<span class="number">0</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cprintf(<span class="string">&quot;ebp=%08x, eip=%08x,  args:&quot;</span>, t_ebp, t_eip);</span><br><span class="line">        <span class="keyword">for</span>( j =<span class="number">0</span> ; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cprintf(<span class="string">&quot; %08x &quot;</span>, *((<span class="keyword">uint32_t</span>*)t_ebp+<span class="number">2</span>+j));</span><br><span class="line">        &#125;</span><br><span class="line">        cprintf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        print_debuginfo(t_eip<span class="number">-1</span>);</span><br><span class="line">        t_eip = *((<span class="keyword">uint32_t</span>*)t_ebp+<span class="number">4</span>);</span><br><span class="line">        t_ebp = *((<span class="keyword">uint32_t</span>*)t_ebp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据kdebug.c的要求来写，在这个函数下方有提示的～！</p>
</blockquote>
<h3 id="5-4-最后一行输出分析"><a href="#5-4-最后一行输出分析" class="headerlink" title="5.4 最后一行输出分析"></a>5.4 最后一行输出分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ebp:0x00007bf8 eip:0x00007d6e args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8</span><br><span class="line">    &lt;unknow&gt;: -- 0x00007d6d --</span><br></pre></td></tr></table></figure>

<p>打印出的ebp是第一个被调用函数的栈帧的<code>base pointer</code>，<code>eip</code>是在该栈帧对应函数中调用下一个栈帧对应函数的指令的下一条指令的地址<code>（return address）</code>， 而args是传递给这第一个被调用的函数的参数</p>
<p>之后的<code>&lt;unknow&gt;: -- 0x00007d6d    </code>则是bootmain函数内调用<strong>OS kernel</strong>入口函数该指令的地址</p>
<h2 id="练习6-完善中断初始化和处理"><a href="#练习6-完善中断初始化和处理" class="headerlink" title="练习6: 完善中断初始化和处理"></a>练习6: 完善中断初始化和处理</h2><ul>
<li>IDT（可以简称为保护模式下的中断向量表）中一个表项占多少字节，其中哪几位代表中断处理代码的入口</li>
<li>完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，一次对所有中断入口进行初始化，使用mmu.h中的SETGATE宏，填充IDT数组内容，每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可</li>
<li>完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分天蝎trap函数中处理时钟中断的部分，使os每遇到100次时钟中断后，调用print_ticks子程序，想屏幕上打印一行“100ticks”</li>
</ul>
<h3 id="6-1-中断与异常"><a href="#6-1-中断与异常" class="headerlink" title="6.1 中断与异常"></a>6.1 中断与异常</h3><p>os需要对计算机系统中的各种外设进行管理，这就需要cpu和外设能够相互通信才行，一般外设的速度远慢于cpu的速度。</p>
<p>如果让os通过cpu“主动关心”外设的事情，采用通常的轮询机制，会很浪费CPU的资源。</p>
<p>因此需要os和CPU能够一起提供某种机制，让<strong>外设在需要OS处理外设相关事件的时候，能够“主动通知”OS，通过中断机制来中断OS和应用的正常执行</strong></p>
<p>os中，有三类中断事件：</p>
<ol>
<li><strong>异步中断【外部中断】：</strong> 简称<strong>中断</strong>，由CPU外部设备引起的外部事件，<strong>产生的时刻不确定</strong>： I/O中断、时钟中断、控制台中断等</li>
<li><strong>同步中断【内部中断】：</strong> 简称<strong>异常</strong>，发生在CPU执行指令期间检测到不正常的或者非法的条件（如除零错误、地址访问越界）所引起的内部事件</li>
<li><strong>陷入中断【软中断】：</strong> 简称trap，即在程序中使用请求系统服务的系统调用而引发的事件，系统调用sys call也称trap</li>
</ol>
<p>当CPU收到<strong>中断（通过8259A完成）</strong>或者异常事件时，他会暂停执行当前的程序或任务，通过一定的机制跳转到负责处理这个信号的相关处理例程中，在完成对这个事件的处理后再跳回到刚才被打断的程序或任务中。</p>
<p><strong>中断向量&amp;中断服务例程主要由IDT负责</strong>，os在IDT中设置好各种中断向量对应的中断描述符，等待CPU在产生中断后查询对应中断服务例程的起始地址，而IDT本身的起始地址保存在IDTR寄存器中</p>
<ol>
<li><p><strong>IDT：</strong> IDT将每个中断或异常编号和一个只想中断服务例程的描述符联系起来。同GDT一样，IDT是一个8字节的描述符数组，但是IDT第一项可以包含一个描述符，CPU把中断（异常）乘8作为IDT的索引，IDT可以位于内存的任意位置，CPU通过IDT寄存器（IDTR）的内容来寻址IDT的起始地址，指令LIDT和SIDT来操作IDTR：</p>
<ul>
<li><strong>LIDT【Load IDT Register】</strong>指令：使用一个包含线性地址基址和界限的内存操作数来加载LDT，os创建IDT时需要执行它来设定IDT的起始地址，这条指令只能在<strong>特权级0</strong>执行</li>
<li><strong>SIDT【Store IDT Register】</strong>指令：拷贝IDTR的基址和界限部分到一个内存地址，这个指令可以在任意特权级执行</li>
</ul>
<p>在保护模式下，最多会存在256个中断/异常向量，范围【0， 31】内的32个向量被异常Exceptuion和NMI使用，但当前并非所有这32个向量都已经被使用，还有几个当前没有被使用的，这些没有被使用的向量被保留给用户定义的interrupts。intel没有定义，也没有保留这些interuppts，用户可以将它们用作外部I/O设备中断，或者系统调用等</p>
</li>
<li><p><strong>IDT Gate Descriptors</strong></p>
</li>
</ol>
<p>interrupts/exceptions应该使用interrupt gate和trap gate，唯一区别在于：当调用interrupt Gate时，interrupt会被CPU自动禁止；而当调用Trap Gate时，CPU不会去禁止或打开中断，而是保留它原来的样子</p>
<blockquote>
<p><strong>“自动禁止”</strong>：指的是CPU跳转到interrput gate里的地址时，将EFLAGS保存到栈上之后，清楚EFLAGS里的IF位，以避免重复触发中断。</p>
<ol>
<li>在中断处理例程里，os可以将EFLAGS里的IF设上，从而允许<strong>嵌套中断</strong>，但是必须在这之前做好处理嵌套中断的必要准备，如保存必要的寄存器等</li>
<li>在ucore中访问Trap Gate的目的是为了实现系统调用，用户进程在正常执行中是不能禁止中断的，当它发出系统调用后，将通过Trap Gate完成从用户态的用户进程进入核心态的OS kernel，如果在到达OS kernel后禁止EFLAGS里的IF位，第一没意义，第二还会导致某些中断得不到及时响应，所以调用Trap Gate时，CPU不会去禁止中断</li>
</ol>
<p>总之，<code>interrupt gate</code>和<code>trap gate</code>之间没有优先级之分，只是cpu在处理中断时有不同的方法，供OS在实现时根据需要进行选择</p>
</blockquote>
<p>IDT中，包含了如下3种Descriptor：</p>
<ul>
<li>Task-gate Descriptor【这里没有用到】</li>
<li>Interrupt-gate Descriptor【<strong>中断</strong>方式】</li>
<li>Trap-gate Descriptor【<strong>系统调用</strong>用到】</li>
</ul>
<hr>
<h3 id="6-2-IDT的定义"><a href="#6-2-IDT的定义" class="headerlink" title="6.2 IDT的定义"></a>6.2 IDT的定义</h3><p>问：IDT中一个表项占多少字节，其中哪几位表示中断处理代码的入口？</p>
<ul>
<li>IDT中每一个表项均占<strong>8个字节【32位】</strong></li>
<li>其中最开始2个字节和最末尾2个字节定义了offset，第16-31位定义了处理代码入口地址的<strong>段选择子【段选择符】</strong>，使用他们在GDT中查找相应段的base address，加上offset即为中断处理代码的入口</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210407194442350.png" alt="image-20210407194442350" style="zoom:50%;">



<ul>
<li>8-12位表示门类型<code>0DXXX</code>：三类门：中断门，陷阱门，任务门</li>
</ul>
<h3 id="6-3-完善trap-c"><a href="#6-3-完善trap-c" class="headerlink" title="6.3 完善trap.c"></a>6.3 完善trap.c</h3><p>在idt_init函数中，依次对所有中断入口进行初始化，使用mmu.h中的SETGATE宏，填充idt数组内容，每个中断的入口由<code>tools/vectors.c</code>生成</p>
<h4 id="6-3-1-中断再次了解"><a href="#6-3-1-中断再次了解" class="headerlink" title="6.3.1 中断再次了解"></a>6.3.1 中断再次了解</h4><ol>
<li><strong>异步中断：</strong> 外设事件引起</li>
<li><strong>同步中断：</strong> 内部中断，即异常</li>
<li><strong>陷入中断：</strong> 软中断，请求系统服务的系统调用而引发的事件</li>
</ol>
<blockquote>
<p>中断描述符表将每个中断或异常的编号和一个指向中断服务例程的描述符联系起来</p>
</blockquote>
<h4 id="6-3-2-mmu-h中的SETGATE宏"><a href="#6-3-2-mmu-h中的SETGATE宏" class="headerlink" title="6.3.2 mmu.h中的SETGATE宏"></a>6.3.2 mmu.h中的SETGATE宏</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETGATE(gate, istrap, sel, off, dpl) &#123;            \</span></span><br><span class="line">    (gate).gd_off_15_0 = (<span class="keyword">uint32_t</span>)(off) &amp; <span class="number">0xffff</span>;        \</span><br><span class="line">    (gate).gd_ss = (sel);                                \</span><br><span class="line">    (gate).gd_args = <span class="number">0</span>;                                    \</span><br><span class="line">    (gate).gd_rsv1 = <span class="number">0</span>;                                    \</span><br><span class="line">    (gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;    \</span><br><span class="line">    (gate).gd_s = <span class="number">0</span>;                                    \</span><br><span class="line">    (gate).gd_dpl = (dpl);                                \</span><br><span class="line">    (gate).gd_p = <span class="number">1</span>;                                    \</span><br><span class="line">    (gate).gd_off_31_16 = (<span class="keyword">uint32_t</span>)(off) &gt;&gt; <span class="number">16</span>;        \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上用于<strong>中断/陷阱门的描述表</strong>：</p>
<ul>
<li><code>istrap:</code> istrap只有两种状态，1代表陷阱门，0代表中断门</li>
<li><code>sel:</code> sel表示用于中断/陷阱处理程序的<strong>代码段选择器</strong>，即处理中断/陷阱需要在内核段中执行，还是在用户段中执行</li>
<li><code>off:</code> off表示中断/陷阱处理程序的代码段偏移地址</li>
<li><code>dpl:</code> dpl用于表示描述符的特权级别，包括内核权限以及用户权限。ucore中应用程序处于特权级3，内核态特权级为0</li>
</ul>
<hr>
<p>除了**系统调用中断(T_SYSCALL)**外，其他中断均使用中断门描述符，权限为内核态权限；而系统调用中断使用异常，权限为陷阱门描述符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">idt_init(<span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="comment">// 声明_vector[]对应IDT中的256个中断符，256个中断符的入口在tools/vector.c中定义</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">uintptr_t</span> __vectors[];</span><br><span class="line">  <span class="comment">/*这里的for循环使用了mmu.h中的SETGATE宏定义函数，对中断门idt[i]初始化*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(idt)/<span class="keyword">sizeof</span>(struct gatedesc); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      	<span class="comment">//0-中断门，GO_KTEXT-内核代码段的起始地址，_vectors[i]存放偏移地址</span></span><br><span class="line">        <span class="comment">//0-DPL_KERNEL表示的为内核权限</span></span><br><span class="line">        SETGATE(idt[i], <span class="number">0</span>, GD_KTEXT, __vectors[i]; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *下述代码表示的是由用户态--&gt;核心态的中断表的初始化</span></span><br><span class="line"><span class="comment">  *DPL_USER表示的为用户权限</span></span><br><span class="line"><span class="comment">  *T_SYSCALL在trap.h中定义</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    SETGATE(idt[T_SYSCALL], <span class="number">0</span>, GD_KTEXT, __vectors[T_SYSCALL]; <span class="number">3</span>);</span><br><span class="line">  <span class="comment">//加载idt中断描述符表，将&amp;idt_pd的首地址加载到IDTR中</span></span><br><span class="line">    lidt(&amp;idt_pd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-4-调用print-ticks子程序"><a href="#6-4-调用print-ticks子程序" class="headerlink" title="6.4 调用print_ticks子程序"></a>6.4 调用print_ticks子程序</h3><p>问题：使os每遇到100次时钟中断后，调用print_ticks子程序，在屏幕上打印<code>100 ticks</code></p>
<p>上述问题中已经完成了对idt的init操作，此时在clock.c中的全局变量ticks开始统计，在<code>kern\trap\trap.c</code>中找到计时中断，当统计到100次时，调用<code>print_ticks()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> IRQ_OFFSET+IRQ_TIMER:</span><br><span class="line">    ticks++;</span><br><span class="line">    <span class="keyword">if</span> (ticks % TICK_NUM == <span class="number">0</span>) &#123; <span class="comment">//TICK_NUM在最上方已经由#define定义了</span></span><br><span class="line">        print_ticks();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>uCore</category>
      </categories>
      <tags>
        <tag>uCore</tag>
      </tags>
  </entry>
  <entry>
    <title>uCore Lab 0</title>
    <url>/2021/04/04/uCore/Lab%200/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Lab-0"><a href="#Lab-0" class="headerlink" title="Lab 0"></a>Lab 0</h1><h2 id="0-1-Intel-80386-处理器硬件"><a href="#0-1-Intel-80386-处理器硬件" class="headerlink" title="0.1 Intel 80386 处理器硬件"></a>0.1 Intel 80386 处理器硬件</h2><h3 id="0-1-1-80386-运行模式"><a href="#0-1-1-80386-运行模式" class="headerlink" title="0.1.1 80386 运行模式"></a>0.1.1 80386 运行模式</h3><p>80386四种模式：实模式、保护模式、SMM模式和虚拟8086模式</p>
<p>ucore中涉及的是前两种：实模式和保护模式</p>
<ul>
<li><strong>实模式</strong></li>
</ul>
<p>实模式将整个物理内存堪称分段的区域，程序代码和数据位于不同区域，os和用户程序没有区别对待，并且每一个指针都是指向实际的物理地址。</p>
<p>这样，当用户程序的一个指针如果指向了os区域或其他用户程序区域，后果是灾难性的</p>
<ul>
<li><strong>保护模式</strong></li>
</ul>
<p><strong>主要目的</strong>是确保应用程序无法对操作系统进行破坏。</p>
<p>实际上， 80386通过在实模式下初始化控制寄存器以及页表，后通过设置CR0寄存器将其中的<strong>保护模式的使能位置位</strong>，从而进入到80386的保护模式。当80386工作在保护模式下的时候，其所有的32根地址线都可供寻址，物理寻址空间高达4GB。</p>
<p>在保护模式下，支持内存分页机制，并且支持优先级机制，不同的程序可以运行在不同的特权级上，特权级一共分0～3四个级别，os运行在最高的<strong>特权级0</strong>上</p>
<h3 id="0-1-2-80386内存架构"><a href="#0-1-2-80386内存架构" class="headerlink" title="0.1.2 80386内存架构"></a>0.1.2 80386内存架构</h3><p>80386时32位处理器，可以寻址的物理内存地址空间为$2^{32} = 4G$字节，在ucore中，需要用到三个地址空间的概念：物理地址、线性地址和逻辑地址</p>
<p><strong>物理内存地址空间</strong>： 为处理器提交到总线上用于访问计算机系统中的内存和外设的最终地址，一个计算机系统中只有一个物理地址空间</p>
<p><strong>线性地址空间：</strong> 为80386处理器通过段（Segment）机制控制下形成的地址空间，在os的管理下，每个运行的应用程序都有相对独立的一个或多个内存空间段，每个段有各自的起始地址和长度属性，大小不固定，这样能让多个运行的应用程序之间相互隔离，实现对地址空间的保护</p>
<p>在os完成对80386处理器段机制的<strong>初始化和配置</strong>（需要os通过<strong>特定的指令和操作间里全局描述符表，完成虚拟地址与线性地址的映射关系</strong>）后，80386处理器的段管理功能单元把虚拟地址转换成线性地址。</p>
<p>相对而言，段机制对<strong>大量应用程序分散地使用大内存</strong>的支持能力较弱，所以intel公司又加入了页机制，每个页的大小是固定的（一般是4KB），也可以完成对内存单元的安全保护、隔离，能够有效<strong>支持大量应用程序分散地使用大内存</strong>的情况</p>
<p>在os完成对80386处理器页机制的初始化和配置后，应用程序看到的逻辑地址先被处理器中的段管理功能单元转换为线性地址，然后再通过80386处理器中的页管理功能单元把线性地址转换成物理地址</p>
<blockquote>
<p>页机制和段机制有一定程度的功能重复，intel为了向下兼容等目标，使得这两者一直共存</p>
</blockquote>
<p>上述三种地址的关系为：</p>
<ul>
<li><strong>分段机制启动、分页机制未启动</strong>：逻辑地址–&gt;段机制处理–&gt;线性地址=物理地址</li>
<li><strong>分段机制和分页机制都启动：</strong> 逻辑地址–&gt;<strong>段机制处理</strong>–&gt;线性地址–&gt;页机制处理–&gt;物理地址</li>
</ul>
<h3 id="0-1-3-Intel-80386寄存器"><a href="#0-1-3-Intel-80386寄存器" class="headerlink" title="0.1.3 Intel 80386寄存器"></a>0.1.3 Intel 80386寄存器</h3><p>寄存器有8组，我们一般看到的是四组：通用寄存器【General Register】、段寄存器【Segment Register】、指令指针寄存器【Instruction Pointer】、标志寄存器【Flag Register】</p>
<hr>
<h2 id="0-2-ucore编程方法"><a href="#0-2-ucore编程方法" class="headerlink" title="0.2 ucore编程方法"></a>0.2 ucore编程方法</h2><h3 id="0-2-1-面向对象编程方法"><a href="#0-2-1-面向对象编程方法" class="headerlink" title="0.2.1 面向对象编程方法"></a>0.2.1 面向对象编程方法</h3><p>采用类似C++的接口概念，接口在C语言中，<strong>表现为一组函数指针的集合</strong>，放在C++中，为<strong>虚表</strong>。接口设计的<strong>难点</strong>是如果找出各种<strong>内核子系统的共性访问/操作模式</strong>，从而可以根据访问模式提取出函数指针列表：</p>
<ul>
<li>init：初始化</li>
<li>init_memmap：分析空闲物理内存并初始化管理</li>
<li>alloc_pages: 分配物理页</li>
<li>free_pages：释放物理页</li>
</ul>
<p>其他内存子系统需要与物理内存管理子系统交互时，只需要调用<strong>特定物理内存管理子系统</strong>所采用的pmm_manager数据结构变量中的<strong>函数指针</strong>即可</p>
<h3 id="0-2-2-双向循环链表"><a href="#0-2-2-双向循环链表" class="headerlink" title="0.2.2 双向循环链表"></a>0.2.2 双向循环链表</h3><p>ucore内核中使用了大量的双向循环链表结构来组织数据，包括空闲内存块列表、内存页链表、进程列表、设备链表、文件系统列表等数据组织（在<code>labX/libs/list.h</code>实现），ucore的双向链表结构定义为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_entry</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list_entry</span> *<span class="title">prev</span>, *<span class="title">next</span>;</span>	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：list_entry中没有包含data数据与，而是在具体的数据结构中包含链表节点，以lab2的空闲内存块列表为例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">		<span class="keyword">list_entry_t</span> free_list;</span><br><span class="line">  	<span class="keyword">unsigned</span> <span class="keyword">int</span> nr_free;					</span><br><span class="line">&#125; <span class="keyword">free_area_t</span>;</span><br></pre></td></tr></table></figure>

<p>有关链表操作函数定义如下：</p>
<ol>
<li>初始化</li>
</ol>
<p>ucore只定义了链表节点，没有专门定义链表头，那么如何建立一个双向循环链表呢？来看list_init这个内联函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">list_init</span><span class="params">(<span class="keyword">list_entry_t</span> *elm)</span></span>&#123;</span><br><span class="line">	elm-&gt;prev = elm-&gt;next = elm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化的表头使next、prev指针都指向自己，这样就有了一个表示空闲内存块链的空链表。并且我们能够用头指针的next是否指向自己来判断此链表是否为空，这就是内联函数list_empty的实现</p>
<ol start="2">
<li>插入</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__list_add(<span class="keyword">list_entry_t</span> *elm, <span class="keyword">list_entry_t</span> *prev, <span class="keyword">list_enry_t</span> *next)&#123;</span><br><span class="line">	prev-&gt;next = next-&gt;prev = elm;</span><br><span class="line">  elm-&gt;next = next;</span><br><span class="line">  elm-&gt;prev = prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">list_del</span><span class="params">(<span class="keyword">list_entry_t</span> *listelm)</span> </span>&#123;</span><br><span class="line">	__list_del(listelm-&gt;prev, listelm-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> __list_del(<span class="keyword">list_enrty_t</span> *prev, list_entry)&#123;</span><br><span class="line">	prev-&gt;next = next;</span><br><span class="line">	next-&gt;prev = prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要确保被删除的节点listelm不再指向链表中的其他节点，可以通过调用list_init函数把listelm的prev、next指针分别指向自身，将节点置为空链状态</p>
<ol start="4">
<li>访问链表节点所在的宿主数据结构</li>
</ol>
<p>list_entry_t通过双向循环链表中仅保存了某特定数据结构中链表节点成员变量的地址，如何通过这个链表节点成员变量访问到它的所有者（即某特定数据结构的变量），Linux提供了针对数据机构XXX的le2XXX的<strong>宏</strong>，其中le，为list entry的简称，是指向数据结构XXX中list_entry_t成员变量的指针，即存储在双向循环链表中的节点地址值，member则是XXX数据类型中包含的链表节点的成员变量。</p>
<p>如：我们要遍历访问空闲块链表中所有节点所在的基于PAGE数据结构的变量，可以采用如下编程方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//free_area为空闲块管理结构，free_area.free_list是空闲块链表头</span></span><br><span class="line"><span class="keyword">free_area_t</span> free_area;</span><br><span class="line"><span class="keyword">list_entry_t</span> *le = &amp;free_area.free_list;	<span class="comment">//le是空闲块链表头指针</span></span><br><span class="line"><span class="keyword">while</span>((le=list_next(le)) != &amp;free_area.free_list) &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">p</span> =</span> le2page(le, page_link);	<span class="comment">//获取节点所在基于Page数据结构的变量</span></span><br><span class="line">  .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>le2page宏的使用为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> le2page(le, number) to_struct((le), struct Page, member)</span></span><br></pre></td></tr></table></figure>

<p>相比之下，实现用到的to_struct宏和offset_of宏有一些复杂：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Return the offset of &#x27;member&#x27; relative to the beginning of a struct type */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> offsetof(type, member) ((size_t)(&amp;((tyoe*)0)-&gt;number))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> to_struct(ptr, type, number) ((type *)((char *)(ptr) - offsetof((type, member)))</span></span><br></pre></td></tr></table></figure>

<p>这里才用了一个利用gcc编译器技术的技巧，即现求得数据结构的成员变量在本宿主数据结构中的偏移量，然后根据成员变量的地址反过来得出属主数据结构变量的地址</p>
<p>首先来看offsetof宏，size_t最终定义与CPU体系结构相关，本实验都采用Intelx86-32 CPU，因此size_t等价于unsigned int。</p>
<p><code>((type *0)-&gt;member)</code>的设计目的：为了求得数据结构的成员变量在本宿主数据结构中的偏移量，为了达到这个目标，首先将0地址强制“转换”为type数据结构（比如struct Page）的指针，再访问到type数据结构中的member成员（比如Page_link）的地址，即是type数据结构中member成员相对于数据结构变量的偏移量。</p>
<p>在offsetof宏中，这个member成员的地址(即”&amp;((type *)0 -&gt; member)”)实际上为type数据结构中member成员相对于数据结构变量的偏移量。</p>
<p>对于给定一个结构，offsetof(type, number)是一个常量，to_struct宏正是利用这个不变的偏移量来求得链表数据项的变量地址。</p>
<p>再分析一下to_struct宏，可以发现to_struct宏中用到的ptr变量是链表节点的地址，把它减去offsetof宏所获得的<strong>数据结构内偏移量</strong>，即得到了包含链表节点的<strong>属主数据结构变量</strong>的地址</p>
]]></content>
      <categories>
        <category>uCore</category>
      </categories>
      <tags>
        <tag>uCore</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 10 -- 信号量</title>
    <url>/2021/03/25/OS/%E5%8D%81%20%E4%BF%A1%E5%8F%B7%E9%87%8F%E3%80%8CSemephore%E3%80%8D/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="十-信号量-「Semaphore」"><a href="#十-信号量-「Semaphore」" class="headerlink" title="十 信号量 「Semaphore」"></a>十 信号量 「Semaphore」</h1><h2 id="10-1-背景"><a href="#10-1-背景" class="headerlink" title="10.1 背景"></a>10.1 背景</h2><ol>
<li><strong>并发问题：竞争条件（竞态条件）</strong><ul>
<li>多程序并发存在很大问题</li>
</ul>
</li>
<li><strong>同步</strong><ul>
<li>多线程共享公共数据的协调执行</li>
<li>包括互斥与条件同步</li>
<li>互斥：在同一时间只有一个线程可以执行临界区</li>
</ul>
</li>
<li><strong>确保同步正确很难？</strong><ul>
<li>需要高层次的编程抽象（如：锁）</li>
<li>从底层硬件支持编译</li>
</ul>
</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210325172037340.png" alt="image-20210325172037340" style="zoom:50%;">

<h2 id="10-2-信号量"><a href="#10-2-信号量" class="headerlink" title="10.2 信号量"></a>10.2 信号量</h2><p>$Semaphore$是一个同步对象，保持在$0$到指定最大值之间的一个计数值，当线程完成一次对该$Semaphore$对象的等待（$wait$）时，计数值减$1$；当线程完成一次对$ Semaphore$对象的释放（$release$）时，计数值加$1$.</p>
<p>当计数值为$0$，则线程等待该$ Semaphore$对象不再能成功直至$ Semaphore$对象变成$signaled$状态。$ Semaphore$对象的计数值大于$0$时，为$signaled$状态；等于$0$时，为$non-signaled$状态</p>
<p><strong>抽象数据类型</strong></p>
<ul>
<li>一个整型（<strong>sem</strong>【信号量】），两个<strong>原子操作</strong></li>
<li>P<code>[wait()]</code> : <code>sem</code>减1，如果<code>sem&lt;0</code>；等待，否则继续。企图进入临界区段的进程，需要先运行P，当sem大于0时，进程才能获准进入临界区段</li>
<li>V<code>[signal()]</code>:  <code>sem</code>加1，如果<code>sem&lt;=0</code>，意味着当前有进程在等待信号量上面，唤醒一个或多个等待的P。当sem不为负值时，先前被挡住的其他进程，将可获准进入临界区段</li>
</ul>
<p><strong>信号量可以类比于铁路，初始化的时候需要给一个非负数的整数值</strong></p>
<h2 id="10-3-信号量的使用"><a href="#10-3-信号量的使用" class="headerlink" title="10.3 信号量的使用"></a>10.3 信号量的使用</h2><ul>
<li>信号量是<strong>整数</strong></li>
<li>信号量是<strong>被保护</strong>的变量<ul>
<li>初始化完成后，唯一一个改变信号量值的办法是通过<code>P()</code>和<code>V()</code></li>
<li>操作必须是原子</li>
</ul>
</li>
<li><strong>P()能够阻塞</strong>，V()不会阻塞</li>
<li>我们假定信号量是“公平的”<ul>
<li>没有线程被阻塞在P()仍然阻塞如果V()被无限频繁调用（在同一个信号量）</li>
<li>在实践中，FIFO经常被使用</li>
</ul>
</li>
<li><strong>两种类型信号量</strong><ul>
<li><strong>二进制信号量：</strong> 0或1</li>
<li><strong>一般/计数信号量：</strong> 可以取任何非负值</li>
<li>两者相互表现（给定）</li>
</ul>
</li>
<li><strong>信号量可以用在2个方面</strong><ul>
<li>互斥</li>
<li>条件同步（调度约束–一个线程等待另一个线程的事情发生）</li>
</ul>
</li>
</ul>
<h2 id="10-3-信号量使用"><a href="#10-3-信号量使用" class="headerlink" title="10.3 信号量使用"></a>10.3 信号量使用</h2><ul>
<li><p>用<strong>二进制信号量实</strong>现的互斥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mutex = new Semaphore(1);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>一个线程等待另一个线程处理事情</strong></p>
<ul>
<li>比如<strong>生产东西或消费东西</strong></li>
<li>互斥（锁机制）是不够的</li>
</ul>
</li>
<li><p><strong>如：有界缓冲区的生产者 - 消费者问题</strong></p>
<ul>
<li>一个或多个<strong>生产者</strong>产生数据将数据放在一个缓冲区里</li>
<li>单个<strong>消费者</strong>每次从缓冲区取出数据</li>
<li>在任何一个时间<strong>只有一个</strong>生产者或消费者可以访问该缓冲区</li>
</ul>
</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210325191007542.png" alt="image-20210325191007542" style="zoom:50%;">

<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210325191132809.png" alt="image-20210325191132809" style="zoom:50%;">

<ul>
<li><strong>每个约束用一个单独的信号量</strong><ul>
<li>二进制信号量互斥</li>
<li>一般信号量fullBuffers</li>
<li>一般信号量emptyBuffers</li>
</ul>
</li>
</ul>
<h2 id="10-4-信号量实现"><a href="#10-4-信号量实现" class="headerlink" title="10.4 信号量实现"></a>10.4 信号量实现</h2><ol>
<li><strong>使用硬件原语</strong><ul>
<li>禁用中断</li>
<li>原子指令【Test-and-Set】</li>
</ul>
</li>
<li><strong>类似锁</strong></li>
<li><strong>例如：使用“禁用中断”</strong></li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210325192441087.png" alt="image-20210325192441087" style="zoom:50%;">

<ul>
<li><strong>信号量的双用途</strong><ul>
<li>互斥和条件同步</li>
<li>但等待条件是独立的互斥</li>
</ul>
</li>
</ul>
<p><strong>存在的缺点</strong></p>
<ul>
<li><strong>读/开发代码比较困难</strong></li>
<li><strong>容易出错</strong><ul>
<li>使用的信号量已经被另一个线程占用</li>
<li>忘记释放信号量</li>
</ul>
</li>
<li><strong>不能够处理死锁问题</strong></li>
</ul>
<h2 id="10-5-管程「Monitor」"><a href="#10-5-管程「Monitor」" class="headerlink" title="10.5 管程「Monitor」"></a>10.5 管程「Monitor」</h2><ol>
<li><p>目的：分离互斥和条件同步的关注</p>
</li>
<li><p><strong>什么是管程呢？</strong></p>
<ul>
<li><p><strong>一个锁：</strong> 指定临界区</p>
</li>
<li><p><strong>0或者多个条件变量：</strong> 等待/通知信号量用于管理并发访问共享数据</p>
</li>
</ul>
</li>
<li><p><strong>一般方法</strong></p>
<ul>
<li><strong>收集在对象/模块中的相关共享数据</strong></li>
<li><strong>定义方法来访问共享数据</strong></li>
</ul>
</li>
</ol>
<h2 id="10-6-经典同步问题"><a href="#10-6-经典同步问题" class="headerlink" title="10.6 经典同步问题"></a>10.6 经典同步问题</h2>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 9 -- 同步</title>
    <url>/2021/03/24/OS/%E4%B9%9D%20%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="九-同步"><a href="#九-同步" class="headerlink" title="九 同步"></a>九 同步</h1><h2 id="9-1-背景"><a href="#9-1-背景" class="headerlink" title="9.1 背景"></a>9.1 背景</h2><ol>
<li><strong>独立的线程</strong><ul>
<li>不和其他线程共享资源或状态</li>
<li><strong>确定性</strong> ==》输入状态决定结果</li>
<li><strong>可重现</strong> ==》能够重现起始条件，I/O</li>
<li>调度顺序不重要</li>
</ul>
</li>
<li><strong>合作线程</strong><ul>
<li>在多个线程中共享状态</li>
<li>不确定性、不可重现</li>
</ul>
</li>
<li><strong>不确定性</strong>和<strong>不可重现</strong>意味着bug可能是间歇性发生的</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324171031949.png" alt="image-20210324171031949" style="zoom:50%;">

<p><strong>可能出现的问题</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324171243129.png" alt="image-20210324171243129" style="zoom:50%;">

<p><strong>但是os要求</strong></p>
<ol>
<li>无论<strong>多个线程的指令序列怎样交替执行，程序都必须正常工作</strong></li>
</ol>
<ul>
<li>多线程程序具有不确定性和不可重现的特点</li>
<li>不经过专门设计，<strong>调试难度很高</strong></li>
</ul>
<ol start="2">
<li><strong>不确定性要求并行程序的正确性</strong></li>
</ol>
<h2 id="9-2-一些概念"><a href="#9-2-一些概念" class="headerlink" title="9.2 一些概念"></a>9.2 一些概念</h2><p><strong>Race Condition【竞态条件】</strong></p>
<ul>
<li>系统缺陷：结果依赖于并发执行或者事件的顺序/时间</li>
<li><strong>如何避免竞态呢？</strong> — 让指令不被打断</li>
</ul>
<p><strong>Atomic Operation【原子操作】</strong></p>
<ul>
<li><strong>原子操作是一次不存在任何中断或者失败的执行</strong><ul>
<li>该执行成功结束|根本没有执行</li>
<li>并且不存在部分执行的状态</li>
</ul>
</li>
<li><strong>实际上操作往往不是原子的</strong><ul>
<li>如<code>A++</code>由3条指令构成</li>
<li>有时单条机器指令也不是原子的：<code>pipeline</code>、<code>super-scalar</code></li>
</ul>
</li>
</ul>
<p><strong>Critical section【临界区】</strong></p>
<p>临界区指进程中一段需要访问共享资源，而当另一个进程处于相应代码区域时不会被执行的代码区域</p>
<p><strong>Mutual exclusion【互斥】</strong></p>
<p>当一个进程处于临界区并访问共享资源时，没有其他进程会处于临界区并且访问任何相同的共享资源</p>
<p><strong>Dead lock【死锁】</strong></p>
<p>两个或以上的进程，在相互等待完成特定任务，而最终设法将自身任务进行下去</p>
<p><strong>Starvation【饥饿】</strong></p>
<p>一个可执行的进程，被调度器持续忽略，以至于<strong>虽然处于可执行状态而不被执行</strong></p>
<p><strong>忙等待：</strong> 进程等待的时候，是在消耗CPU的时间，这个叫<code>busy waiting</code></p>
<p>于是设置了<strong>临界区</strong>，在任何时候保证只有一个进程在执行，防止变量的出错，且这个一定是原子操作</p>
<h2 id="9-3-临界区「Critical-Section」"><a href="#9-3-临界区「Critical-Section」" class="headerlink" title="9.3 临界区「Critical Section」"></a>9.3 临界区「Critical Section」</h2><p>临界区的特点有：</p>
<ul>
<li><p><strong>互斥：</strong> 同一时间临界区最多存在一个线程</p>
</li>
<li><p><strong>Progress：</strong> 如果一个线程想要进入临界区，那么它最终会成功</p>
</li>
<li><p><strong>有限等待：</strong> 如果一个线程i在入口区，那么在i的请求被接受之前，其他线程进入临界区的时间是有限制的</p>
</li>
<li><p><strong>无忙等待（可选）：</strong> 如果一个进程在等待进入临界区，那么在它可以进入之前会被挂起【避免了消耗CPU资源，减少忙等待】</p>
</li>
</ul>
<p><strong>设计一些方法来对CPU资源进行保护！</strong></p>
<h2 id="9-4-方法1-禁用硬件中断"><a href="#9-4-方法1-禁用硬件中断" class="headerlink" title="9.4 方法1: 禁用硬件中断"></a>9.4 方法1: 禁用硬件中断</h2><ol>
<li><strong>进入和离开临界区的代码</strong><ul>
<li><code>ENTER_CRITICAL_SECTION</code></li>
<li><code>EXIT_CRITICAL_SECTION</code></li>
</ul>
</li>
<li><strong>基本的机制</strong><ul>
<li><strong>禁用中断</strong></li>
<li>软件方法（如Peterson算法）</li>
<li>更高级的抽象</li>
</ul>
</li>
<li>比较不同的机制<ul>
<li>性能：并发级别</li>
</ul>
</li>
</ol>
<p><strong>禁用中断存在的问题</strong></p>
<ol>
<li><strong>一旦中断被禁用，线程就无法被停止</strong><ul>
<li>整个系统都会停下来</li>
<li>可能导致其他线程处于<strong>饥饿状态</strong></li>
</ul>
</li>
<li><strong>要是临界区可以任意长怎么办</strong><ul>
<li>无法限制响应中断所需的时间</li>
</ul>
</li>
<li>所以临界区一般不长，需要注意的是多CPU情况下，是无法解决互斥问题的</li>
</ol>
<h2 id="9-5-方法2-基于软件的解决方法"><a href="#9-5-方法2-基于软件的解决方法" class="headerlink" title="9.5 方法2: 基于软件的解决方法"></a>9.5 方法2: 基于软件的解决方法</h2><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324194130651.png" alt="image-20210324194130651" style="zoom:50%;">

<p>有四类算法，最主要的是Peterson算法，举个Bakery算法的例子</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324195541528.png" alt="image-20210324195541528" style="zoom:50%;">

<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324195611394.png" alt="image-20210324195611394" style="zoom:50%;">

<h3 id="9-6-方法3：-更高级的抽象"><a href="#9-6-方法3：-更高级的抽象" class="headerlink" title="9.6 方法3： 更高级的抽象"></a>9.6 方法3： 更高级的抽象</h3><ol>
<li><p><strong>硬件提供了一些原语</strong></p>
<ul>
<li>如中断禁用，原子操作指令等</li>
</ul>
</li>
<li><p><strong>os提供更高级的编程抽象来简化并行编程</strong></p>
<ul>
<li><strong>如锁，信号量</strong>；从硬件原语中构建</li>
</ul>
</li>
<li><p><strong>锁是一个抽象的数据结构</strong></p>
<ul>
<li>一个二进制状态【锁定/解锁】，两种方法</li>
<li><code>Lock::Acquire()</code> - 锁被释放前一直等待，然后等待锁</li>
<li><code>Lock::Release()</code> - 释放锁，唤醒任何等待的进程</li>
</ul>
</li>
<li><p><strong>使用锁来编写临界区</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lock_next_pid-&gt;Acquire();</span><br><span class="line">new_pid = next_pid++;</span><br><span class="line">lock_next_pid-&gt;Release();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>大多数现代体系结构都提供特殊的原子操作指令</strong></p>
<ul>
<li>通过特殊的内存访问电路</li>
<li>针对单处理器和多处理器</li>
</ul>
</li>
<li><p><strong><code>Test-and-Set</code> 测试和置位</strong></p>
<ul>
<li>从内存中读取值</li>
<li>测试该值是否为1（然后返回true/false）</li>
<li>内存值设置为1</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324200740252.png" alt="image-20210324200740252" style="zoom:50%;">

<blockquote>
<p>rv记录寄存器里的值，然后将寄存器的值设为1，返回的是原来寄存器的值（0或1）</p>
</blockquote>
</li>
<li><p><strong>交换「CAS」</strong></p>
<p>交换内存中的两个值</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324200838108.png" alt="image-20210324200838108" style="zoom:50%;">

</li>
</ol>
<p><strong>缺点：</strong></p>
<ul>
<li>忙等待消耗CPU时间</li>
<li>当进程离开临界区并且多个进程在等待的时候可能导致饥饿</li>
<li><strong>死锁：</strong> <strong>低优先级的进程拥有临界区</strong>并且一个高优先级进程也需求，那么高优先级进程会<strong>获得处理器并等待临界区</strong>。产生了死锁的现象</li>
</ul>
<p>总结一下～</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324201738602.png" alt="image-20210324201738602" style="zoom:50%;">

]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 8 -- 调度</title>
    <url>/2021/03/24/OS/%E5%85%AB%20%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="八-调度"><a href="#八-调度" class="headerlink" title="八 调度"></a>八 调度</h1><h2 id="8-1-背景"><a href="#8-1-背景" class="headerlink" title="8.1 背景"></a>8.1 背景</h2><ol>
<li><strong>上下文切换</strong><ol>
<li>切换CPU的当前任务，从一个进程/线程到另一个</li>
<li>保存当前进程/线程在PCB/TCP中的执行上下文（CPU状态）</li>
<li>读取下一个进程/线程的上下文</li>
</ol>
</li>
<li><strong>CPU调度</strong><ol>
<li>从就绪队列中挑选一个进程/线程作为CPU将要运行的下一个进程/线程</li>
<li>调度程序：挑选进程/线程的内核函数（通过一些调度策略）</li>
</ol>
</li>
</ol>
<p><strong>那么在进程/线程的生命周期中什么时候进行调度呢？</strong></p>
<hr>
<p><strong>内核运行调度程序的条件（满足一条即可）</strong></p>
<ul>
<li>一个进程从运行状态切换到等待状态</li>
<li>一个进程被终止了</li>
</ul>
<p><strong>不可抢占式</strong>『non-preemptive』</p>
<ul>
<li>调度程序必须等待事件结束</li>
</ul>
<p><strong>可以抢占</strong>『preemptive』</p>
<ul>
<li>调度程序在中断被响应后执行</li>
<li>当前的进程<strong>从运行切换到就绪</strong>，或者一个进程<strong>从等待切换到就绪</strong></li>
<li>当前运行的进程可以被换出</li>
</ul>
<h2 id="8-2-调度原则"><a href="#8-2-调度原则" class="headerlink" title="8.2 调度原则"></a>8.2 调度原则</h2><h3 id="8-2-1-调度策略"><a href="#8-2-1-调度策略" class="headerlink" title="8.2.1 调度策略"></a>8.2.1 调度策略</h3><p>执行模型：程序在CPU突发和I/O中交替</p>
<p><strong>评价指标：</strong></p>
<ol>
<li><strong>CPU使用率：</strong> cpu处于忙状态所占时间的百分比</li>
<li><strong>吞吐量：</strong> 单位时间内<strong>完成的进程数量</strong></li>
<li><strong>周转时间：</strong> 一个进程从初始化到结束，包括所有等待事件所花费的时间</li>
<li><strong>等待时间：</strong> 进程在就绪队列中等待到running的总时间</li>
<li><strong>响应时间：</strong> 从一个请求被提交到产生第一次响应所花费的时间</li>
</ol>
<p><strong>什么是“更快”的服务呢？</strong></p>
<ul>
<li>传输文件是的<strong>高带宽</strong></li>
<li>玩游戏时的<strong>低延迟</strong></li>
<li>这两个因素是独立的</li>
</ul>
<p><strong>和“水管”类比：</strong></p>
<ul>
<li><strong>低延迟：</strong> 喝水的时候想要一打开水龙头水就流出来</li>
<li><strong>高带宽：</strong> 给游泳池充水时希望从水龙头里同时<strong>流出大量的水</strong>，并且不介意是否存在延迟</li>
</ul>
<p><strong>调度算法的提升指标</strong></p>
<ul>
<li><strong>减少响应时间：</strong> 及时处理用户的输出并且尽快将输出提供给用户</li>
<li><strong>减少平均响应时间的变动：</strong> 在交互系统中，可预测性比<strong>高差异低平均</strong>更重要</li>
<li><strong>增加吞吐量：</strong> 1⃣️减少开销（os开销，上下文切换）；2⃣️系统资源的高效利用（CPU、I/O设备）</li>
<li><strong>减少等待时间：</strong> 减少每个进程的等待时间</li>
</ul>
<p><strong>指标提高的表现</strong></p>
<ul>
<li><p>低延迟调度增加了交互式表现【鼠标点的快！】</p>
</li>
<li><p>os需要<strong>保证吞吐量不受影响</strong></p>
</li>
<li><p>吞吐量是os的计算<strong>带宽</strong></p>
</li>
<li><p>响应时间是os的计算<strong>延迟</strong></p>
</li>
<li><p>还需要相对的<strong>公平</strong>，通过调度算法使每个进程享有相同的服务</p>
</li>
</ul>
<h2 id="8-3-调度算法"><a href="#8-3-调度算法" class="headerlink" title="8.3 调度算法"></a>8.3 调度算法</h2><ol>
<li><strong>FCFS「First Come First Served」【先来先服务】</strong></li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324132140786.png" alt="image-20210324132140786" style="zoom:50%;">

<ol start="2">
<li><strong>SPN（SJF） SRT 【Shortest Job First】</strong></li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324132513213.png" alt="image-20210324132513213" style="zoom:50%;">

<blockquote>
<p>SRT可以抢占正在运行的进程，比较的运行中进程的<strong>结束剩余时间</strong>和新进程的<strong>执行时间</strong></p>
</blockquote>
<p><strong>缺点</strong></p>
<ol>
<li>可能导致<strong>饥饿</strong><ul>
<li>连续的短任务流会使长任务饥饿</li>
<li>短任务可用时的任何长任务的CPU时间都会增加平均等待时间</li>
</ul>
</li>
<li><strong>需要预知未来</strong><ul>
<li>如何预估下一个CPU突发的持续时间</li>
<li>简单的解决办法：询问用户</li>
</ul>
</li>
</ol>
<p>通过过去预知未来的算法：</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324133135071.png" alt="image-20210324133135071" style="zoom:50%;">

<p>来猜测下一个进程的执行时间，实验数据：</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324133222742.png" alt="image-20210324133222742" style="zoom:50%;">

<ol start="3">
<li>最高响应比优先「HRN」</li>
</ol>
<ul>
<li>在SPN调度的基础上改进</li>
<li>不可抢占</li>
<li>关注进程等待了多长时间</li>
<li>防止无限期推迟</li>
</ul>
<p>$$<br>R = \frac{w+s}{s}<br>$$</p>
<blockquote>
<p>w: waiting time 等待时间。 s: service time 执行时间</p>
</blockquote>
<p>选择R值高的</p>
<ol start="4">
<li>轮询调度算法【<strong>RR Round Robin</strong>】</li>
</ol>
<ul>
<li>在叫做量子（或时间切片）的离散单元中分配处理器</li>
<li>时间片结束时，切换到下一个准备好的进程</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324133548510.png" alt="image-20210324133548510" style="zoom:50%;">

<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324133758476.png" alt="image-20210324133758476" style="zoom:50%;">

<p><strong>探究时间片大小的影响</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324133903614.png" alt="image-20210324133903614" style="zoom:50%;">

<p><strong>再次改进：</strong></p>
<ul>
<li>就绪队列划分成独立的队列</li>
</ul>
<blockquote>
<p>前台（交互）， 后台（批处理）</p>
</blockquote>
<ul>
<li>每个队列有自己的调度策略</li>
</ul>
<blockquote>
<p>如前台：RR，后台：FCFS</p>
</blockquote>
<ul>
<li>调度必须在队列间进行<ol>
<li><strong>固定优先级</strong><ul>
<li>先处理前台，再处理后台</li>
<li>可能导致饥饿</li>
</ul>
</li>
<li><strong>时间切片</strong><ul>
<li>每个队列都能得到一个确定的能够调度其进程的CPU总时间</li>
<li>E.g. 80%给使用RR的前台，20%给使用FCFS的后台</li>
</ul>
</li>
</ol>
</li>
</ul>
<blockquote>
<p>于是出现了多级反馈队列</p>
</blockquote>
<ol start="5">
<li><strong>多级反馈队列</strong></li>
</ol>
<ul>
<li>一个进程可以在不同的队列中移动</li>
<li>如：n级优先级-优先级调度在所有级别中，RR在每个级别中</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324162554607.png" alt="image-20210324162554607" style="zoom:50%;">

<ol start="6">
<li><strong>FFS「Fair File Share」</strong></li>
</ol>
<ul>
<li>一些用户组比其他用户组更重要</li>
<li>保证不重要的组无法垄断资源</li>
<li><strong>未使用的资源</strong>按照每个组所分配的资源的比例来分配</li>
<li>没有达到资源使用率目标的组获得更高的优先级</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324162905916.png" alt="image-20210324162905916" style="zoom:50%;">

<p><strong>如何评价模型？</strong></p>
<ol>
<li><strong>确定性建模：</strong> 确定一个工作量，然后计算每个算法的表现</li>
<li><strong>队列模型：</strong> 用来处理<strong>随机工作负载</strong>的数学方法</li>
<li><strong>实现/模拟：</strong> 建立一个允许算法运行实际数据的系统，需要很灵活/有一致性</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324163255535.png" alt="image-20210324163255535" style="zoom:50%;">

<h2 id="8-4-实时调度"><a href="#8-4-实时调度" class="headerlink" title="8.4 实时调度"></a>8.4 实时调度</h2><h3 id="8-4-1-实时系统"><a href="#8-4-1-实时系统" class="headerlink" title="8.4.1 实时系统"></a>8.4.1 实时系统</h3><p><strong>定义：</strong> 正确性依赖于<strong>时间</strong>【real time】和<strong>功能</strong></p>
<p><strong>性能指标：</strong> 1⃣️ 时间约束的及时性「ddl」；2⃣️ 速度和平均性能相对不重要</p>
<p><strong>主要特性：</strong> 时间约束的可预测性</p>
<p><strong>实时分类：</strong> 1⃣️ 硬实时「强实时」：保证规定时间内必须完成任务； 2⃣️ 要求重要的进程的优先级更高，尽量完成，并非必需</p>
<p><strong>如何衡量进程在限定时间内可完成呢？</strong></p>
<p>发起任务–「就绪」–&gt;执行–&gt;不能超过relative ddl的时间间隔</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324164247351.png" alt="image-20210324164247351" style="zoom:50%;">

<hr>
<ul>
<li><p><strong>硬时限</strong></p>
<ol>
<li>如果错过了ddl，会有严重的后果</li>
<li>必须验证在最坏的情况下也能满足时限【保证确定性】</li>
</ol>
</li>
<li><p><strong>软时限</strong></p>
<ol>
<li>理想情况下，时限应该被最大满足，否则就相应地降低要求</li>
<li>需要尽最大努力去保证</li>
</ol>
<p>设置优先级调度方法来满足ddl要求</p>
</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324164724307.png" alt="image-20210324164724307" style="zoom:50%;">

<blockquote>
<p>静态：优先级提前设置好           动态：优先级可调整</p>
</blockquote>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324164849527.png" alt="image-20210324164849527" style="zoom:50%;">

<h2 id="8-5-多处理器调度与优先级反转"><a href="#8-5-多处理器调度与优先级反转" class="headerlink" title="8.5 多处理器调度与优先级反转"></a>8.5 多处理器调度与优先级反转</h2><h3 id="8-5-1-多处理器调度"><a href="#8-5-1-多处理器调度" class="headerlink" title="8.5.1 多处理器调度"></a>8.5.1 多处理器调度</h3><ol>
<li>多处理器的CPU调度更加复杂<ul>
<li>多个相同的单处理器组成一个多处理器</li>
<li>优点：负载共享</li>
</ul>
</li>
<li>对称多处理器<ul>
<li>每个处理器运行自己的调度程序</li>
<li>需要在<strong>调度程序中同步</strong></li>
</ul>
</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324165104306.png" alt="image-20210324165104306" style="zoom:50%;">

<h3 id="8-5-2-优先级反转"><a href="#8-5-2-优先级反转" class="headerlink" title="8.5.2 优先级反转"></a>8.5.2 优先级反转</h3><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324165159392.png" alt="image-20210324165159392" style="zoom:50%;">

<ul>
<li><strong>优先级天花板：</strong> “资源”的优先级和“所有可以<strong>锁定该资源的任务中优先级最高的那个任务”的优先级相同</strong></li>
<li>除非优先级高于系统中所有被锁定的资源的优先级上限，否则任务尝试执行临界区时会被阻塞</li>
<li>持有<strong>最高优先级上限信号量锁</strong>的任务，会继承被该锁阻塞的任务的优先级</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 7 -- 进程管理</title>
    <url>/2021/03/23/OS/%E4%B8%83%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="七-进程管理"><a href="#七-进程管理" class="headerlink" title="七 进程管理"></a>七 进程管理</h1><h2 id="7-1-进程「Process」描述"><a href="#7-1-进程「Process」描述" class="headerlink" title="7.1 进程「Process」描述"></a>7.1 进程「Process」描述</h2><h3 id="1-进程的定义"><a href="#1-进程的定义" class="headerlink" title="1. 进程的定义"></a>1. 进程的定义</h3><p>一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323132339312.png" alt="image-20210323132339312" style="zoom:50%;">

<p>程序是静态的，操作系统使其动态运行起来</p>
<h3 id="2-进程的组成"><a href="#2-进程的组成" class="headerlink" title="2. 进程的组成"></a>2. 进程的组成</h3><ul>
<li>程序的代码</li>
<li>程序的处理数据</li>
<li>PC「Program Counter」中的值，只是下一条将要运行的指令</li>
<li>一组通用寄存器的当前值，堆、栈</li>
<li>一组系统资源（如打开的文件）</li>
</ul>
<blockquote>
<p> 总之，进程包含<strong>了正在运行的一个程序的所有状态信息</strong></p>
</blockquote>
<p><strong>进程与程序的联系？</strong></p>
<ul>
<li>程序是产生进程的基础</li>
<li>程序的每次运行构成不同的进程</li>
<li>进程是程序功能的体现</li>
<li>通过<strong>多次执行</strong>，<strong>一个程序可对应多个进程</strong>；通过调用关系，<strong>一个进程可包括多个程序</strong></li>
</ul>
<blockquote>
<p> 程序是菜谱，进程是做菜</p>
</blockquote>
<p><strong>进程与程序的区别？</strong></p>
<ul>
<li>进程是<strong>动态</strong>的，程序是<strong>静态</strong>的；程序是有序代码的集合，进程是程序的执行，进程有核心态/用户态</li>
<li>进程是暂时的，程序是永久的；进程是一个状态变化的过程，程序可长久保存</li>
<li>进程与程序的组成不同：进程组成包括程序、数据和进程控制块（即进程状态信息）</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323133306236.png" alt="image-20210323133306236" style="zoom:50%;">

<blockquote>
<p>体现了进程的动态切换特性</p>
</blockquote>
<h3 id="3-进程的特点"><a href="#3-进程的特点" class="headerlink" title="3. 进程的特点"></a>3. 进程的特点</h3><ul>
<li>动态性：动态创建、结束进程</li>
<li>并发性：可以被独立调度并占用处理机运行：<strong>并发运行</strong></li>
<li>独立性：不同进程的工作不相互影响</li>
<li>制约性：因访问共享数据/资源或进程同步而产生制约</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323133620864.png" alt="image-20210323133620864" style="zoom:50%;">

<blockquote>
<p>a)动态性 b)相对独立性 c)调度策略–流水线</p>
</blockquote>
<p>描述进程的数据结构：进程控制块<strong>「PCB, Process Control Block」</strong></p>
<h3 id="4-进程控制结构"><a href="#4-进程控制结构" class="headerlink" title="4. 进程控制结构"></a>4. 进程控制结构</h3><p><strong>进程控制块：</strong> 操作系统管理控制进程运行所用的信息集合，操作系统用PCB来描述进程的基本情况以及运行变化的过程</p>
<p>PCB是进程存在的唯一标志，为对进程的唯一描述</p>
<p><strong>使用PCB</strong></p>
<ul>
<li><strong>进程的创建：</strong> 为该进程生成一个PCB</li>
<li><strong>进程的终止：</strong> 回收它的PCB</li>
<li><strong>进程的组织管理：</strong> 通过对PCB的组织管理来实现</li>
</ul>
<p><strong>PCB的三大信息</strong></p>
<ol>
<li><p><strong>进程标识信息：</strong> 如本进程的标识，本进程的产生者标识（父进程标识）；用户标识</p>
</li>
<li><p><strong>处理机状态信息保存区。</strong> 保存进程的运行现场信息：</p>
<ul>
<li><strong>用户可见寄存器：</strong> 用户程序可以使用的<strong>数据，地址等寄存器</strong></li>
<li><strong>控制和状态寄存器：</strong> 如程序计数器（PC），程序状态字（PSW）</li>
<li><strong>栈指针：</strong> 过程调用/系统调用/中断处理和返回时需要用到它</li>
</ul>
</li>
<li><p><strong>进程控制信息</strong></p>
<ul>
<li><strong>调度和状态信息：</strong> 用于调度进程并占用处理机使用</li>
<li><strong>进程间通信信息：</strong> 来支持进程间的与通信相关的各种标识、信号、信件等，这些信息存在接收方的PCB中</li>
<li><strong>存储管理信息：</strong> 包含有指向本进程印象存储空间的数据结构</li>
<li><strong>进程所用资源：</strong> 说明由进程打开，使用的系统资源，如打开的文件等</li>
<li><strong>有关数据结构连接信息：</strong> 进程可以连接到一个进程队列中，或<strong>连接到相关的其他进程的PCB</strong></li>
</ul>
</li>
</ol>
<p><strong>PCB的组织方式</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323193928336.png" alt="image-20210323193928336" style="zoom:50%;">

<h2 id="7-2-进程状态「State」"><a href="#7-2-进程状态「State」" class="headerlink" title="7.2 进程状态「State」"></a>7.2 进程状态「State」</h2><h3 id="7-2-1-进程的生命期管理"><a href="#7-2-1-进程的生命期管理" class="headerlink" title="7.2.1 进程的生命期管理"></a>7.2.1 进程的生命期管理</h3><p>$$<br>创建\rightarrow 运行\rightarrow 等待\rightarrow 唤醒\rightarrow 结束<br>$$</p>
<h4 id="lt-1-gt-创建"><a href="#lt-1-gt-创建" class="headerlink" title="&lt;1&gt; 创建"></a>&lt;1&gt; 创建</h4><p>引起进程创建的3个主要事件：</p>
<ul>
<li>系统初始化时；</li>
<li>用户请求创建一个新进程；</li>
<li>正在运行的进程执行了创建进程的系统调用</li>
</ul>
<h4 id="lt-2-gt-运行"><a href="#lt-2-gt-运行" class="headerlink" title="&lt;2&gt; 运行"></a>&lt;2&gt; 运行</h4><p>内核选择一个就绪的进程，让它占用处理机并执行</p>
<h4 id="lt-3-gt-等待"><a href="#lt-3-gt-等待" class="headerlink" title="&lt;3&gt; 等待"></a>&lt;3&gt; 等待</h4><p>以下情况，进程等待（阻塞）：</p>
<ol>
<li>请求并等待系统服务</li>
<li>启动某种操作，无法马上完成</li>
<li>需要的数据没有到达</li>
</ol>
<p>进程只能自己阻塞自己，因为只有进程自身才知道何时需要等待某种事件的发生</p>
<h4 id="lt-4-gt-唤醒"><a href="#lt-4-gt-唤醒" class="headerlink" title="&lt;4&gt; 唤醒"></a>&lt;4&gt; 唤醒</h4><blockquote>
<p>被动状况：$waiting\rightarrow running$</p>
</blockquote>
<ol>
<li>被阻塞进程需要的资源可被满足</li>
<li>被阻塞进程等待的事件到达</li>
<li>将该进程的PCB插入到就绪队列</li>
</ol>
<blockquote>
<p>进程只能被别的进程或操作系统唤醒</p>
</blockquote>
<h4 id="lt-5-gt-结束"><a href="#lt-5-gt-结束" class="headerlink" title="&lt;5&gt; 结束"></a>&lt;5&gt; 结束</h4><ul>
<li>正常退出【自愿】</li>
<li>错误退出【自愿】</li>
<li>致命错误【强制】</li>
<li>被其他进程杀死【强制】</li>
</ul>
<h3 id="7-2-2-进程状态变化模型"><a href="#7-2-2-进程状态变化模型" class="headerlink" title="7.2.2 进程状态变化模型"></a>7.2.2 进程状态变化模型</h3><p><strong>进程的三种基本状态：</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323195056829.png" alt="image-20210323195056829" style="zoom:50%;">

<p><strong>状态变化图：</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323195135244.png" alt="image-20210323195135244" style="zoom:50%;">

<blockquote>
<p>Ready为就绪状态的进程</p>
</blockquote>
<h3 id="7-2-3-进程挂起"><a href="#7-2-3-进程挂起" class="headerlink" title="7.2.3 进程挂起"></a>7.2.3 进程挂起</h3><blockquote>
<p>来合理充分地利用系统资源</p>
</blockquote>
<p>进程在挂起状态时，意味着进程没有占用内存空间，处在挂起状态的进程映像在磁盘上</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323195630177.png" alt="image-20210323195630177" style="zoom:50%;">

<p><strong>挂起状态：</strong></p>
<ul>
<li><p><strong>阻塞挂起状态（Blocked suspend）：</strong> 进程在外存并等待某事件的出现</p>
</li>
<li><p><strong>就绪挂起状态（Ready suspend）：</strong> 进程在外存，但只要进入内存，即可运行</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323195852296.png" alt="image-20210323195852296" style="zoom:50%;">

</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323200052014.png" alt="image-20210323200052014" style="zoom:50%;">

<p><font color="red"><strong>OS怎么通过PCB和定义的进程状态来管理PCB，帮助完成进程的调度过程？</strong></font></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323201256038.png" alt="image-20210323201256038" style="zoom:50%;">

<p><strong>状态队列：</strong></p>
<ul>
<li>由os来维护<strong>一组队列</strong>，用来表示系统当中所有进程的当前状态</li>
<li>不同的状态分别用不同的队列来表示（就绪队列、各种类型的阻塞队列）</li>
<li>每个<strong>进程的PCB都根据他的状态</strong>加入到相应的队列当中，当一个进程的状态发生变化时，它的PCB从一个状态队列中脱离出来，加入到另外一个队列</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323202002300.png" alt="image-20210323202002300" style="zoom:50%;">

<blockquote>
<p>多个就绪队列体现了优先级</p>
</blockquote>
<h2 id="7-3-线程「Thread」"><a href="#7-3-线程「Thread」" class="headerlink" title="7.3 线程「Thread」"></a>7.3 线程「Thread」</h2><h3 id="7-3-1-线程-amp-进程"><a href="#7-3-1-线程-amp-进程" class="headerlink" title="7.3.1 线程 &amp; 进程"></a>7.3.1 线程 &amp; 进程</h3><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323202504735.png" alt="image-20210323202504735" style="zoom:50%;">
$$
Thread = Process- Shared \ Sources
$$
**线程优点：**

<ul>
<li>一个进程中可以同时存在多个线程</li>
<li>各个线程之间可以并发执行</li>
<li>各个线程之间可以共享地址空间和文件等资源</li>
</ul>
<p><strong>线程缺点：</strong></p>
<ul>
<li>一个线程崩溃，会导致其所属进程的所有线程崩溃</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323203250042.png" alt="image-20210323203250042" style="zoom:50%;">

<p><strong>线程与进程的比较</strong></p>
<ul>
<li>进程是资源分配单位，线程是CPU调度单位</li>
<li>进程拥有一个完整的资源平台，<strong>但是线程只独享必不可少的资源</strong>，如寄存器和栈</li>
<li>线程同样具有就绪、阻塞和执行三种基本状态，同样具有状态之间的转换关系</li>
<li>线程能减少并发执行的时间和空间开销<strong>【进程切换进行的页表开销十分大】</strong><ul>
<li>线程的创建时间比进程短</li>
<li>线程的终止时间比进程短</li>
<li>同一进程内的线程切换时间比进程短</li>
<li>由于同一进程的各线程间共享内存和文件资源，可直接进行不通过内核的通信</li>
</ul>
</li>
</ul>
<h3 id="7-3-2-线程的实现"><a href="#7-3-2-线程的实现" class="headerlink" title="7.3.2 线程的实现"></a>7.3.2 线程的实现</h3><p><strong>用户线程：</strong> 在用户空间实现【os看不见】</p>
<p><strong>内核线程：</strong> 在内核中实现【由os管理】</p>
<p><strong>轻量级进程：</strong> 在内核中实现，支持用户线程</p>
<h4 id="lt-1-gt-用户线程与内核线程的对应关系"><a href="#lt-1-gt-用户线程与内核线程的对应关系" class="headerlink" title="&lt;1&gt; 用户线程与内核线程的对应关系"></a>&lt;1&gt; 用户线程与内核线程的对应关系</h4><blockquote>
<p>有多对一，一对一，多对多。此刻举例为多对多：</p>
</blockquote>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323204300913.png" alt="image-20210323204300913" style="zoom:50%;">

<h4 id="lt-1-gt-用户线程"><a href="#lt-1-gt-用户线程" class="headerlink" title="&lt;1&gt; 用户线程"></a>&lt;1&gt; <strong>用户线程</strong></h4><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323205454265.png" alt="image-20210323205454265" style="zoom:50%;">

<p>在用户空间实现的线程机制，它<strong>不依赖于os的内核</strong>，而是由一组<strong>用户级的线程库的函数</strong>来完成线程的管理，包括进程的创建、终止、同步和调度等</p>
<ul>
<li>因为用户线程的维护由相应进程来完成（通过线程库函数），不需要os内核了解用户线程的存在，可以用于不支持线程技术的多进程的os</li>
<li>每个进程都需要它自己私有的<strong>线程控制块【TCB】</strong>列表，用来跟踪记录它各个线程的状态信息（PC、栈指针、寄存器），<strong>TCB由线程库函数来维护</strong></li>
<li>用户线程的切换也是由线程库函数来完成，不需要用户态/核心态切换，所以速度特别快</li>
<li>允许<strong>每个进程拥有自定义的线程调度算法</strong></li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>如果一个线程发起系统调用而阻塞，则整个线程在等待</li>
<li>因为当一个线程开始运行后，除非它<strong>主动交出CPU的使用权</strong>，否则他所在的进程当中的其他线程将无法运行</li>
<li>由于时间片分配给进程，因此与其他进程比，在多线程执行时，每个线程得到的时间片较少，执行会较慢</li>
</ul>
<h4 id="lt-2-gt-内核线程"><a href="#lt-2-gt-内核线程" class="headerlink" title="&lt;2&gt; 内核线程"></a>&lt;2&gt; <strong>内核线程</strong></h4><p>指在<strong>os的内核</strong>当中实现的一种线程机制，由os的内核来完成线程的创建、终止和管理</p>
<ul>
<li>在支持内核线程的os中，由内核来维护进程和线程的上下文信息（PCB和TCB）</li>
<li>线程的创建、终止和切换都是通过系统调用/内核函数的方式来运行，由内核来完成。<strong>因此系统开销较大</strong></li>
<li>在一个进程当中，如果<strong>某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行</strong></li>
<li>时间片分配给线程，<strong>多线程的进程获得更多CPU时间</strong></li>
<li>Windows NT和Windows 2000/XP支持内核线程</li>
</ul>
<h4 id="lt-3-gt-轻量级进程「Lightweight-Process」"><a href="#lt-3-gt-轻量级进程「Lightweight-Process」" class="headerlink" title="&lt;3&gt; 轻量级进程「Lightweight Process」"></a>&lt;3&gt; 轻量级进程「Lightweight Process」</h4><blockquote>
<p>又称<strong>【协程】</strong></p>
</blockquote>
<h2 id="7-4-进程间通信「Inter-Process-Communication」"><a href="#7-4-进程间通信「Inter-Process-Communication」" class="headerlink" title="7.4 进程间通信「Inter-Process Communication」"></a>7.4 进程间通信「Inter-Process Communication」</h2><h3 id="7-4-1-上下文切换"><a href="#7-4-1-上下文切换" class="headerlink" title="7.4.1 上下文切换"></a>7.4.1 上下文切换</h3><p>停止当前运行进程并且调度其他进程</p>
<ul>
<li>必须在切换之前存储许多部分的进程上下文</li>
<li>必须能够在之后回复他们，所以进程不能显示它曾经被暂停过</li>
<li>必须快速（上下文转换时非常频繁）</li>
</ul>
<p><strong>需要存储什么上下文？</strong></p>
<ul>
<li>寄存器（PC、SP，…）,CPU状态，…</li>
<li>一些时候会比较费时，应当尽可能避免</li>
</ul>
<p>希望上下文开销越小越好</p>
<ul>
<li>操作系统为活跃进程准备了PCB</li>
<li>操作系统将PCB放置在一个合适的队列里</li>
</ul>
<h3 id="7-4-2-创建和执行进程"><a href="#7-4-2-创建和执行进程" class="headerlink" title="7.4.2 创建和执行进程"></a>7.4.2 创建和执行进程</h3><ul>
<li>用<code>fork</code>和<code>exec</code>创建进程的示例</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int pid = fork();	//创建子进程</span><br><span class="line"><span class="keyword">if</span>(pid == 0)&#123;			//子进程在这里继续</span><br><span class="line">	<span class="built_in">exec</span>(<span class="string">&quot;program&quot;</span>, argc, argv0, argv1, ...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>fork()</code>创建一个继承的子进程</p>
<ul>
<li>复制父进程的所有变量和内存</li>
<li>复制父进程的所有CPU寄存器【有一个寄存器例外】</li>
</ul>
</li>
<li><p><code>fork()</code>的返回值</p>
<ul>
<li><p>子进程的<code>fork()</code>返回0</p>
</li>
<li><p>父进程的<code>fork()</code>返回子进程标识符</p>
</li>
<li><p><code>fork()</code>返回值方便后续使用，子进程可以使用<code>getpid()</code>获取<strong>PID</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324085405144.png" alt="image-20210324085405144" style="zoom:50%;">

</li>
</ul>
</li>
</ul>
<p><strong>系统调用exec（）加载程序取代当前运行的进程</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324092555412.png" alt="image-20210324092555412" style="zoom:50%;">

<p><strong><code>exec()</code>的作用</strong></p>
<ul>
<li>exec()调用允许一个进程“加载”一个不同的程序并且在main开始执行（事实上_start）</li>
<li>它允许一个进程指定参数的数量（argc）和它字符串参数数组（argv）</li>
<li>子进程fork()后exec()时会将<code>stack()&amp;heap()</code>重写</li>
</ul>
<p><strong>fork()的简单实现</strong></p>
<ul>
<li>分配内存给子进程</li>
<li>复制父进程的内存和CPU寄存器到子进程中</li>
<li><strong>开销非常大！</strong></li>
</ul>
<p><strong>99%情况中，在调用fork()之后调用exec()</strong></p>
<ul>
<li>但是fork()操作中<strong>内存复制</strong>是没有作用的</li>
<li>子进程可能关闭打开的文件和链接</li>
<li>开销因此是高的</li>
</ul>
<p><strong>改进：vfork</strong></p>
<ul>
<li>一个创建进程的系统调用，不需要创建一个同样的内存映像</li>
<li>一些时候被称为轻量级fork()</li>
<li>子进程几乎立即调用fork（）</li>
<li>现在不再使用vfork()，而是改进使用COW【Copy on Write】<strong>「读时共享 写时复制」</strong>只复制了元数据【页表】</li>
</ul>
<h3 id="7-4-4-等待和终止进程"><a href="#7-4-4-等待和终止进程" class="headerlink" title="7.4.4 等待和终止进程"></a>7.4.4 等待和终止进程</h3><p>Wait()系统调用是被父进程用来等待子进程的结束</p>
<ul>
<li>子进程向父进程返回一个值，父进程必须接受这个值并处理</li>
<li>wait()系统调用担任这个要求</li>
</ul>
<p>父进程配合子进程的exit()后回收所有子进程的资源，最初的进程<strong>【根进程】</strong>结束后直接关机</p>
<ol>
<li>进程结束执行后，调用exit()</li>
<li>这个系统调用：<ul>
<li>将程序的“结果”作为一个参数，关闭所有打开的文件、链接等</li>
<li>释放内存，释放大部分支持进程的os结构</li>
<li>检查父进程是否存活<ul>
<li>如果存活，<strong>保留结果的值直到父进程需要它</strong>；在这种情况里，进程没有真正死亡，但是进入了僵尸状态（zombie/defunct）</li>
<li>如果没有，释放所有的数据结构，这个进程死亡</li>
</ul>
</li>
<li>进程终止是最终的垃圾收集【资源回收】</li>
</ul>
</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210324094738784.png" alt="image-20210324094738784" style="zoom:50%;">

]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 6 -- 页面置换算法</title>
    <url>/2021/03/22/OS/%E5%85%AD%20%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="六-页面置换算法"><a href="#六-页面置换算法" class="headerlink" title="六 页面置换算法"></a>六 页面置换算法</h1><h2 id="6-1-功能与目标"><a href="#6-1-功能与目标" class="headerlink" title="6.1 功能与目标"></a>6.1 功能与目标</h2><p><strong>功能：</strong> 缺页中断发生，需要调入新的页面而内存已满时，选择内存当中需要被置换的页面</p>
<p><strong>目标：</strong> <font color="red"><b>尽可能地减少页面的换进换出次数</b></font>「即缺页中断的次数」。具体讲，把<strong>未来不再使用的或短期内较少使用的页面换出</strong>，通常只能在局部性原理指导下依据过去的统计数据来进行预测「减少交换带来的时间开销」</p>
<p><strong>页面锁定（frame locking）：</strong> 用于描述必须常驻内存的os的关键部分或<strong>时间关键（time-critical）</strong>的应用进程。实现的方法是：在页表中添加<strong>锁定标志位（lock bit）</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322171811496.png" alt="image-20210322171811496" style="zoom:50%;">

<h2 id="6-2-局部页面置换算法"><a href="#6-2-局部页面置换算法" class="headerlink" title="6.2 局部页面置换算法"></a>6.2 局部页面置换算法</h2><h3 id="6-2-1-最优页面置换算法「OPT，optional」"><a href="#6-2-1-最优页面置换算法「OPT，optional」" class="headerlink" title="6.2.1 最优页面置换算法「OPT，optional」"></a>6.2.1 最优页面置换算法「OPT，optional」</h3><p><strong>基本思路：</strong> 当一个缺页中断发生时，对于保存在内存当中的每一个逻辑页面，计算他的下一次访问之前，还需要等待多长时间，<strong>选择等待时间最长的那个，作为被置换的页面</strong></p>
<blockquote>
<p>这只是一种理想情况，实际系统中无法实现，因为os无法知道每一个页面要等待多长时间以后才会被再次访问</p>
</blockquote>
<p>可以用来作为其他算法的性能评价指标（在一个模拟器上运行某个程序，并记录每一次的页面访问情况，在第二遍运行时即可使用最优算法）</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322172535251.png" alt="image-20210322172535251" style="zoom:50%;">

<h3 id="6-2-2-先进先出算法「FIFO」"><a href="#6-2-2-先进先出算法「FIFO」" class="headerlink" title="6.2.2 先进先出算法「FIFO」"></a>6.2.2 先进先出算法「FIFO」</h3><p><strong>基本思路：</strong> 选择在内存中<strong>驻留时间最长的页面并淘汰</strong>。即系统维护着一个链表，记录了所有位于内存当中的逻辑页面，从链表的排列顺序来看，链首页面的驻留时间最长，链尾页面驻留的时间最短。</p>
<p>当发生一个缺页中断时，把链首页面淘汰出局，并把新的页面添加到链表的末尾</p>
<p><strong>缺点：</strong> 性能较差，调出的页面有可能是经常要访问的页面。并且有$Belady$现象，FIFO算法很少单独使用</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322190815350.png" alt="image-20210322190815350" style="zoom:50%;">



<h3 id="6-2-3-最近最久未使用算法「LRU，Least-Recently-Used」"><a href="#6-2-3-最近最久未使用算法「LRU，Least-Recently-Used」" class="headerlink" title="6.2.3 最近最久未使用算法「LRU，Least Recently Used」"></a>6.2.3 最近最久未使用算法「LRU，Least Recently Used」</h3><p><strong>基本思路：</strong> 当一个缺页中断发生时，淘汰最久未使用的页面</p>
<p><strong>描述：</strong> 是对最优页面置换算法的一个近似，依据的是程序的局部性原理，即在最近一小段时间（最近几条指令）内，如果某些页面被频繁的访问，那么在将来的一小段时间内，他们还可能会再一次被频繁的访问。</p>
<p>反过来说，如果在过去某些页面长时间未被访问，那么在将来它们还可能会长时间的得不到访问。</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322191410812.png" alt="image-20210322191410812" style="zoom:50%;">

<p>LRU算法需要记录哥哥页面使用时间的先后顺序，开销比较大，两种可能的实现方法是：</p>
<ol>
<li><strong>系统维护一个页面链表</strong>，最近刚刚使用过的页面作为首结点，最久未使用的作为尾节点。每一次访问内存时，找到相应的页面，把他从链表中摘下来，再移动到链表之首。<strong>每次缺页中断发生时，淘汰链表末尾的页面</strong></li>
<li><strong>设置一个活动页面栈。</strong> 需要淘汰时，选择栈底的页面，就是最久未使用的</li>
</ol>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322191954433.png" alt="image-20210322191954433" style="zoom:50%;">

<h3 id="6-2-4-时钟页面置换算法「Clock」"><a href="#6-2-4-时钟页面置换算法「Clock」" class="headerlink" title="6.2.4 时钟页面置换算法「Clock」"></a>6.2.4 时钟页面置换算法「Clock」</h3><blockquote>
<p>是LRU的近似，对FIFO的一种改进</p>
</blockquote>
<p><strong>基本思路：</strong></p>
<ul>
<li>需要用到页表项当中的访问位。当一个页面被装入内存时，初始化该位为0。如果该页面被访问，则把该位置调为1</li>
<li>把各个页面组织成环形链表（类似钟表面），把指针指向最老的页面（最新进来）</li>
<li>当发生一个缺页中断时，考察指针所指向的最老页面，如果它的访问位为0，立即淘汰；若访问位为1，把该位置设为0，指针往下移动一格。如此下去，直到找到被淘汰的页面，然后把指针移动到它的下一格。</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322193041915.png" alt="image-20210322193041915" style="zoom:50%;">

<p>**注意<code>used bit</code>是0/1 **</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322193640150.png" alt="image-20210322193640150" style="zoom:50%;">

<h3 id="6-2-5-二次机会法「Enhanced-Clock-Algorithm」"><a href="#6-2-5-二次机会法「Enhanced-Clock-Algorithm」" class="headerlink" title="6.2.5 二次机会法「Enhanced Clock Algorithm」"></a>6.2.5 二次机会法「Enhanced Clock Algorithm」</h3><ul>
<li>Clock算法中有巨大的代价来替换“脏”页</li>
<li>修改Clock算法，使它允许<strong>脏页总是在第一次时钟头扫描中保留下来</strong></li>
</ul>
<blockquote>
<p>同时使用“脏位”和使用位来指导置换</p>
</blockquote>
<p>对$a, b$执行写操作，由$(1, 0) \rightarrow (1, 1)$，即执行写操作<code>dirty bit = 1</code></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322202042975.png" alt="image-20210322202042975" style="zoom:50%;">

<p>优先把只读页先换出去，给了写操作二次存活的机会【复活甲！】</p>
<h3 id="6-2-5-最不常用算法「LFU，Least-Frequently-Used」"><a href="#6-2-5-最不常用算法「LFU，Least-Frequently-Used」" class="headerlink" title="6.2.5 最不常用算法「LFU，Least Frequently Used」"></a>6.2.5 最不常用算法「LFU，Least Frequently Used」</h3><p><strong>基本思路：</strong> 当一个缺页中断发生时，选择访问次数最少的那个页面，并淘汰之</p>
<p><strong>实现方法：</strong> 对每个页面设置一个访问计数器，每当一个页面被访问时，该页面的访问计数器加1。当发生缺页中断时，淘汰计数值最小的那个页面</p>
<p><strong>缺点：</strong> 这里硬件开发很大，如果前期开发使用次数多，后期很难判断。可以把访问计数器一定时间内左移一位减少2倍。</p>
<p><strong>LRU和LFU的区别：</strong> LRU考察的是<strong>多久未访问</strong>，时间越短越好；而LFU考察的是<strong>访问的次数或额度</strong>，访问次数越多越好。</p>
<h3 id="6-2-6-Belady现象"><a href="#6-2-6-Belady现象" class="headerlink" title="6.2.6 Belady现象"></a>6.2.6 Belady现象</h3><p><strong>解释：</strong> 在采用FIFO算法时，有时会出现<strong>分配的物理页面数增加</strong>，<strong>缺页率反而提高</strong>的异常现象的异常现象</p>
<p><strong>产生原因：</strong> FIFO算法的替换特征与<strong>进程访问内存的动态特征</strong>是矛盾的，与置换算法的目标是不一致的（即替换较少的页面），因此被他<strong>置换出去的页面不一定是进程不会访问</strong>的</p>
<h3 id="6-2-7-LRU、FIFO和Clock的比较"><a href="#6-2-7-LRU、FIFO和Clock的比较" class="headerlink" title="6.2.7 LRU、FIFO和Clock的比较"></a>6.2.7 LRU、FIFO和Clock的比较</h3><blockquote>
<p>LRU和FIFO本质上都是先进先出</p>
</blockquote>
<p>LRU是针对页面的最近访问时间来排序；FIFO是针对页面进入内存的时间来排序，这个时间是固定不变的</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322203633347.png" alt="image-20210322203633347" style="zoom:50%;">

<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210322203751942.png" alt="image-20210322203751942" style="zoom:50%;">

<h2 id="6-3-全局页面置换算法"><a href="#6-3-全局页面置换算法" class="headerlink" title="6.3 全局页面置换算法"></a>6.3 全局页面置换算法</h2><h3 id="6-3-1局面页面替换算法的问题"><a href="#6-3-1局面页面替换算法的问题" class="headerlink" title="6.3.1局面页面替换算法的问题"></a><strong>6.3.1局面页面替换算法的问题</strong></h3><p>前面介绍的各种页面置换算法，都是机遇程序的局部性原理，但是这个原理是否成立？</p>
<ul>
<li><strong>如果局部性原理不成立，</strong> 那么各种页面置换算法就没有什么分别，也没有什么意义。例如：假设进程对逻辑页面的访问顺序为$1, 2, 3, 4, 5, 6, 7, 8, 9…$,即单调递增。那么在物理页面数有限的前提下，无论采用什么置换算法，每次的页面访问都必然导致缺页中断</li>
<li><strong>如果局部性原理成立，</strong> 证明存在和用其进行定量分析的为工作集模型</li>
</ul>
<h3 id="6-3-2-工作集模型「Working-Set」"><a href="#6-3-2-工作集模型「Working-Set」" class="headerlink" title="6.3.2 工作集模型「Working Set」"></a>6.3.2 工作集模型「Working Set」</h3><p><strong>工作集：</strong> 一个进程当前<strong>正在使用的</strong>逻辑页面集合</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323091316028.png" alt="image-20210323091316028" style="zoom:50%;">

<p><strong>举个栗子：</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323091653180.png" alt="image-20210323091653180" style="zoom:50%;">

<blockquote>
<p>$t_2$的局部性较好</p>
</blockquote>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323091816367.png" alt="image-20210323091816367" style="zoom:50%;">

<p><strong>常驻集：</strong> 指在当前时刻，进程<strong>实际驻留在内存当中的页面</strong>集合</p>
<ul>
<li>工作集是进程在运行过程中固有的性质，而常驻集取决于系统分配给进程的物理页面数目，以及所采用的页面置换算法</li>
<li>如果一个进程的整个工作集都在内存当中，即常驻集包含于工作集，那么进程将很顺利的运行，不会造成太多的缺页中断（指导工作集发生剧烈变动，从而过渡到另一个状态）</li>
<li>当进程常驻集的大小达到某个数目之后，再给它分配更多的物理页面，<strong>缺页率</strong>也不会明显的下降</li>
</ul>
<h3 id="6-3-3-工作集页置换算法"><a href="#6-3-3-工作集页置换算法" class="headerlink" title="6.3.3 工作集页置换算法"></a>6.3.3 工作集页置换算法</h3><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323093222033.png" alt="image-20210323093222033" style="zoom:50%;">

<p>$Page\ d=-1, Page\ e=-2$,时间长度为$3$</p>
<p>超出时间窗口的都将被直接清除</p>
<h3 id="6-3-4-缺页率置换算法"><a href="#6-3-4-缺页率置换算法" class="headerlink" title="6.3.4 缺页率置换算法"></a>6.3.4 缺页率置换算法</h3><p><strong>可变分配策略：</strong> 常驻集大小可变，如每个进程在刚开始运行的时候，先根据程序大小给它分配一定数目的物理页面，然后在进程运行过程中，再动态的调整常驻集的大小</p>
<ul>
<li>可采用<strong>全局页面置换</strong>的方式，当发生一个缺页中断时，被置换的页面可以是在其他进程当中，各个并发进程竞争的使用物理页面</li>
<li><strong>优缺点：</strong>性能较好，但增加了系统开销</li>
<li><strong>具体实现：</strong>可以使用缺页率算法（PFF，page fault frequency）来动态调整常驻集的大小</li>
</ul>
<p><strong>缺页率：</strong> 表示为$\frac{缺页次数}{内存访问次数}$或$\frac{1}{缺页的平均时间间隔}$，影响因素为：</p>
<ul>
<li>页面置换算法</li>
<li>分配给进程的物理页面数目</li>
<li>页面本身的大小</li>
<li>程序的编写方法</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323093912412.png" alt="image-20210323093912412" style="zoom:50%;">

<p>一个交替的工作集计算明确的试图最小化页缺失</p>
<ul>
<li>缺页率高，增加工作集</li>
<li>缺页率低，减少工作集</li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323094113240.png" alt="image-20210323094113240" style="zoom:50%;">

<blockquote>
<p>4-1 = 3 &gt; 2 删除page a &amp; page b</p>
</blockquote>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323094448846.png" alt="image-20210323094448846" style="zoom:50%;">

<p>不断进行page的动态调整</p>
<h3 id="6-3-5-抖动问题「thrashing」"><a href="#6-3-5-抖动问题「thrashing」" class="headerlink" title="6.3.5 抖动问题「thrashing」"></a>6.3.5 抖动问题「thrashing」</h3><ul>
<li>如果分配给一个进程的物理页面太少，不能包含整个工作集，进程可能会造成很多缺页中断，需要频繁的在内存与外存之间替换页面，从而使进程的运行速度变得很慢，把这种状态称为<strong>“抖动”</strong></li>
<li><strong>产生原因：</strong> 随着驻留内存的进程数目增加，分配给每个进程的物理页面数不断减小，缺页率不断上升，所以os要选择<strong>一个适当的进程数目和进程需要的帧数，以便在并发水平和缺页率之间达到一个平衡</strong></li>
</ul>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323094930617.png" alt="image-20210323094930617" style="zoom:50%;">

<p><strong>找到最高值「平衡点」</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210323095219014.png" alt="image-20210323095219014" style="zoom:50%;">

<p>达到高的并发水平同时减少缺页率</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 5 -- 虚拟内存</title>
    <url>/2021/03/22/OS/%E4%BA%94%20%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="五-虚拟内存"><a href="#五-虚拟内存" class="headerlink" title="五 虚拟内存"></a>五 虚拟内存</h1><h2 id="5-1-起因"><a href="#5-1-起因" class="headerlink" title="5.1 起因"></a>5.1 起因</h2><blockquote>
<p>程序规模的增长速度远远大于存储器容量的增长速度</p>
</blockquote>
<p>理想中的存储器：更大更快更便宜的非易失性存储器</p>
<p><strong>实际：</strong></p>
<img src="https://i.loli.net/2021/03/22/VSd2z58utmBQp4L.png" alt="image-20210322144502671.png" style="zoom:50%;">

<p>主存储器贵，硬盘大但传输速度慢</p>
<p><strong>有效管理内存</strong>：分页分段机制，现有的物理内存通过操作系统去获得更快更大的内存空间</p>
<p><strong>当出现内存不够用的情况怎么办？</strong></p>
<ul>
<li>如果程序太大，超出内存容量，可以采用手动的覆盖（overlay），把需要的指令和数据保存在内存当中</li>
<li>或者采用<strong>自动的交换技术（swapping）</strong>，把暂时不能执行的程序送到外存中</li>
<li>想要在有限容量的内存中，以<strong>更小的页粒度</strong>为单位装人更多更大的程序，采用<strong>自动的虚拟存储技术</strong></li>
</ul>
<h2 id="5-2-覆盖技术"><a href="#5-2-覆盖技术" class="headerlink" title="5.2 覆盖技术"></a>5.2 覆盖技术</h2><h3 id="lt-1-gt-目标"><a href="#lt-1-gt-目标" class="headerlink" title="&lt;1&gt;  目标"></a>&lt;1&gt;  目标</h3><p>在较小的可用内存中运行较大的程序，常用语多道程序系统，和分区存储管理配合使用</p>
<h3 id="lt-2-gt-原理"><a href="#lt-2-gt-原理" class="headerlink" title="&lt;2&gt; 原理"></a>&lt;2&gt; 原理</h3><p>把程序按照自身逻辑结构，划分为若干个功能上相对独立的程序模块</p>
<p>将不会同时执行的模块共享同一块内存区域，按照时间先后来运行</p>
<ul>
<li><strong>必要部分（常用功能）</strong>的代码和数据常驻内存</li>
<li><strong>可选部分（不常用功能）</strong>在其他程序模块中实现，平时存在外存，<strong>使用时装入内存</strong></li>
<li>不存在调用关系的模块不需要同时装入内存中，从而能够相互覆盖，即这些模块共用一个分区【类似<strong>“分时”</strong>】</li>
</ul>
<p>举个栗子【<strong>进程树</strong>】</p>
<blockquote>
<p><strong>同一层</strong>的子进程可以相互覆盖，因此放在同一个覆盖区</p>
</blockquote>
<p>另一种覆盖方法：</p>
<img src="https://i.loli.net/2021/03/22/quJQm9Hd6XCf3nA.png" alt="image-20210322150451018.png" style="zoom:50%;">

<h3 id="lt-3-gt-缺点"><a href="#lt-3-gt-缺点" class="headerlink" title="&lt;3&gt; 缺点"></a>&lt;3&gt; 缺点</h3><ul>
<li>如何将大程序划分为多个小功能模块，来确定各个模块的覆盖关系费时费力</li>
<li>覆盖模块<strong>从外存装入内存</strong>，是以时间延长换取空间节省</li>
</ul>
<h2 id="5-3-交换技术"><a href="#5-3-交换技术" class="headerlink" title="5.3 交换技术"></a>5.3 交换技术</h2><h3 id="lt-1-gt-目标-1"><a href="#lt-1-gt-目标-1" class="headerlink" title="&lt;1&gt; 目标"></a>&lt;1&gt; 目标</h3><p>多道程序在内存中，让正在运行的程序或需要运行的程序获得更多的内存资源</p>
<h3 id="lt-2-gt-方法"><a href="#lt-2-gt-方法" class="headerlink" title="&lt;2&gt; 方法"></a>&lt;2&gt; 方法</h3><ul>
<li>可将暂时不能运行的程序送到外存，从而获得空闲内存空间</li>
<li>操作系统把一个进程的<strong>整个地址空间内容保存到外存</strong>中（swap out）<strong>「os认为这个程序不用执行」</strong>，<strong>将外存中某个进程的地址空间读入内存中</strong>（swap in）。换入换出内容的大小为整个程序的地址空间</li>
</ul>
<img src="https://i.loli.net/2021/03/22/aSFpnHUwV8lYhIC.png" alt="image-20210322151545762.png" style="zoom:50%;">

<h3 id="lt-3-gt-问题"><a href="#lt-3-gt-问题" class="headerlink" title="&lt;3&gt; 问题"></a>&lt;3&gt; 问题</h3><ul>
<li><strong>什么时候需要交换？</strong></li>
</ul>
<p>只当内存空间不够或者存在危险时才换出</p>
<ul>
<li><strong>交换区的大小？</strong></li>
</ul>
<p>需要足够大来存放所有用户进程的所有内存映像的拷贝，才能对这些内存映像进行直接存取</p>
<ul>
<li><strong>内存地址固定吗？</strong></li>
</ul>
<p>采用<strong>动态地址映射</strong>，换入换出的内存位置不一定相同</p>
<h3 id="lt-4-gt-覆盖-v-s-交换"><a href="#lt-4-gt-覆盖-v-s-交换" class="headerlink" title="&lt;4&gt; 覆盖 v.s 交换"></a>&lt;4&gt; 覆盖 v.s 交换</h3><ol>
<li><strong>覆盖：</strong> 覆盖<strong>只能发生相互之间没有调用关系</strong>的程序模块之间，程序员必须给出程序内的各个模块之间逻辑覆盖结构</li>
<li><strong>交换：</strong> 以内存中的程序大小为单位进行，不需要给出各个模块之间的逻辑覆盖结构</li>
<li><strong>总结一下：</strong> 交换发生在内存中程序与管理程序或操作系统之间，而覆盖发生在运行程序的内部</li>
</ol>
<h2 id="5-4-虚存技术"><a href="#5-4-虚存技术" class="headerlink" title="5.4 虚存技术"></a>5.4 虚存技术</h2><h3 id="5-4-1-目标"><a href="#5-4-1-目标" class="headerlink" title="5.4.1 目标"></a>5.4.1 目标</h3><p><strong>覆盖：</strong> 程序员需要自己确定程序各个模块的覆盖关系</p>
<p><strong>交换：</strong> 以进程作为交换，需要把进程的整个地址空间都换入换出，增加了处理器开销</p>
<p><strong>虚存目标：</strong></p>
<ul>
<li>不把所有程序放入内存，因而能够运行比当前空闲内存更大的程序，由操作系统自己完成，不需要程序员手动操作</li>
<li>能够实现内存与外存之间的交换，来获得更多的空闲内存空间。但只对进程的部分内容进行交换，减少了开销。</li>
</ul>
<img src="https://i.loli.net/2021/03/22/IQvrAWuk4HsORJM.png" alt="image-20210322153118350.png" style="zoom:50%;">

<h3 id="5-4-2-程序局部性原理"><a href="#5-4-2-程序局部性原理" class="headerlink" title="5.4.2 程序局部性原理"></a>5.4.2 程序局部性原理</h3><blockquote>
<p><strong>局部性原理：</strong> 程序执行过程中的一个较短时期内，所执行的指令地址和指令的操作数地址，<strong>分别局限于一定区域</strong></p>
</blockquote>
<ul>
<li><strong>时间局部性：</strong> 一个数据的一次访问和下次访问集中在较短时期内</li>
<li><strong>空间局部性：</strong> 当前指令和邻近的几条指令，当前访问的数据和邻近的几个数据都集中在一个较小区域内，<strong>内存中靠的很近</strong>。</li>
</ul>
<p><img src="https://i.loli.net/2021/03/22/nTCQV48cqfISBNa.png" alt="image-20210322154212146.png" style="zoom:50%;"><img src="https://i.loli.net/2021/03/22/5GywzFrBdVRWb7c.png" alt="image-20210322162031899.png"></p>
<blockquote>
<p>默认行优先，如果按列来遍历，时间开销会非常大，因为$a_{0, 0} –&gt; a_{1, 0}$相差$1024KB$.而$a_{0,0} –&gt; a_{0,1}$相差$1KB$.</p>
<p>因此，按列访问，访问次数为$1024 * 1024$</p>
<p>而按行为$1024$次</p>
</blockquote>
<h3 id="5-4-3-基本概念"><a href="#5-4-3-基本概念" class="headerlink" title="5.4.3 基本概念"></a>5.4.3 基本概念</h3><blockquote>
<p>虚存可以在页式或段式内存管理的基础上实现</p>
</blockquote>
<ul>
<li>装入程序时，不用将全部都装入到内存，只需要将当前需要执行的部分页面或段载入主存，让程序执行即可</li>
<li>程序执行时，如果执行的指令或者访问的数据<strong>没有</strong>在内存<strong>「缺页/缺段」</strong>，由<strong>处理器</strong>通知操作系统将相应的页面或段掉入内存，继续执行程序</li>
<li>另外，os将内存中暂时不使用的页面或段调出保存在外存上，腾出更多空闲时间存放将要装入的程序及要调入的页面或段</li>
</ul>
<h3 id="5-4-4-基本特征"><a href="#5-4-4-基本特征" class="headerlink" title="5.4.4 基本特征"></a>5.4.4 基本特征</h3><ul>
<li><strong>用户空间大：</strong> 把物理内存与外存相结合，提供给用户的虚存空间通常大于实际的物理内存，实现两者的分离</li>
<li><strong>部分交换：</strong> 虚存的调入和调出是对部分虚拟地址空间进行的</li>
<li><strong>不连续性：</strong> 物理内存分配的不连续，虚存地址空间使用的不连续</li>
</ul>
<h3 id="5-4-5-虚拟页式内存管理"><a href="#5-4-5-虚拟页式内存管理" class="headerlink" title="5.4.5 虚拟页式内存管理"></a>5.4.5 虚拟页式内存管理</h3><ul>
<li>大部分虚拟存储系统都采用<strong>虚拟页式存储管理技术</strong>，即在页式存储管理的基础上，增加<strong>请求调页和页面置换</strong>功能</li>
<li><strong>基本思路</strong>：<ul>
<li>当一个用户程序要调入内存运行时，只装入部分的页面，就可以启动程序运行</li>
<li>在运行的过程中，如果发现要运行的程序或者要访问的数据不在内存<strong>「因为页面只映射了一部分」</strong>，cpu会向操作系统发出<strong>缺页中断</strong>请求。系统在处理这个中断时，将外存中相应的页面调入内存，使程序继续运行</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/03/22/5GywzFrBdVRWb7c.png" alt="image-20210322162031899.png"></p>
<img src="https://i.loli.net/2021/03/22/gTyuKezlvwW6iRZ.png" alt="image-20210322162327848.png" style="zoom:50%;">

<h3 id="5-4-6-后备存储-Backing-Store"><a href="#5-4-6-后备存储-Backing-Store" class="headerlink" title="5.4.6 后备存储 Backing Store"></a>5.4.6 后备存储 Backing Store</h3><p><strong>在哪里保存没有映射的页？</strong></p>
<ul>
<li>能够简单地识别二级存储器中的页</li>
<li>交换空间（磁盘或者文件）：特殊格式，用于存储未被映射的页面</li>
</ul>
<p><strong>后备存储「backing store」</strong></p>
<ul>
<li>一个虚拟地址空间的页面可以被映射到一个文件（在二级存储中）的某个位置</li>
<li><strong>代码段：</strong> 映射到可执行二进制文件</li>
<li><strong>动态加载的共享库程序段：</strong> 映射到动态调用的库文件</li>
<li><strong>其他段：</strong> 可能被映射到交换文件<strong>（swap file）</strong></li>
</ul>
<h3 id="5-4-7-虚拟内存性能"><a href="#5-4-7-虚拟内存性能" class="headerlink" title="5.4.7 虚拟内存性能"></a>5.4.7 虚拟内存性能</h3><img src="https://i.loli.net/2021/03/22/eySsPrOgQAjvp9L.png" alt="image-20210322163317854.png" style="zoom:50%;">

]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>清清的星星球纪录-1</title>
    <url>/2021/03/21/%E6%B8%85%E6%B8%85%E7%9A%84%E6%98%9F%E6%98%9F%E7%90%83%E7%BA%AA%E5%BD%95-1/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="清清的星星球纪录-1"><a href="#清清的星星球纪录-1" class="headerlink" title="清清的星星球纪录-1"></a>清清的星星球纪录-1</h1><p>这一周挺混沌的。</p>
<blockquote>
<p>“你是一个很理性的人”，小清曾这么对清清说。</p>
<p>“我不是”，清清镇静地回应了他；</p>
<p>“不算是”</p>
<p>“至少我认为不是”，清清着急的补充了两句。</p>
</blockquote>
<p>踌躇了一个寒假的激动，转成了巨大的空洞；</p>
<p>在人来人往的街道上，再次感受那些不了解的，曾忽略过的存在。</p>
<img src="https://i.loli.net/2021/03/21/YSJTadIuVWDGpl4.jpg" alt="C343E95F496BF7AAAFC9C1AF77B248CA.jpg" style="zoom:50%;">

<p>周三的晚上，时间滴答滴答的过了九点一刻，333路末班车启动了，隔着两个季节结束了《布达佩斯大饭店》的极致二分。</p>
<p>难言的心情在下午五点半的《无望》中接受了。</p>
<blockquote>
<p>“I LOVE YOU，无望。你甘是这款人“    — 「五月天 feat.茄子蛋」</p>
</blockquote>
<p>上周三到现在，每个晚上都做着梦，早上闹钟响起，正是高潮的时刻</p>
<p>似乎是给躺回去再睡20分钟的理由，第一次连续一周平均睡眠过了六个半小时</p>
<p>继续做梦。</p>
<img src="https://i.loli.net/2021/03/21/JQ31yrFcKpUoYzN.jpg" alt="8D88C443020608343AE61769CDC16B78.jpg" style="zoom:50%;">

<blockquote>
<p>“梦里有青苔，有很多没再见过的朋友”</p>
</blockquote>
<p>这一周，CFA班中作为组长，策划了组内PBL1的两个CASE。</p>
<p>第一个休闲食品的pre，紧张中把逻辑打散重构，<code>同质化</code>这个准备着强调的切入点，就这么忘了</p>
<p><code>SWOT</code>分析时，看着手上拿着的空白<code>keynote</code>，恍惚间脱口的<code>Technology</code>硬着头皮分析了下去</p>
<p><code>weakness</code>老师表扬了把上下游议价引入讨论，我心里知道我把波特五力弄混了。</p>
<p>下课，背上书包；离开，戴上耳机。</p>
<p>红了玻璃心，动了脆弱情。</p>
<blockquote>
<p>“公元627年，玄奘离开了长安城” — 《玄奘西行》</p>
</blockquote>
<img src="https://i.loli.net/2021/03/21/iuEK92s8N6wxhAQ.jpg" alt="008E66641BCD3E4180AC58E620433FF8.jpg" style="zoom:50%;">

<p>等着舍友们烫好头发，把操作系统和计组整理了一下框架</p>
<p>刹那间，发现自己$CPI$没有弄混，对着面前的牛奶芋头冰傻笑了一下</p>
<blockquote>
<p>“宏观上我们还可以根据CPI来分析…”</p>
<p>“…社会的指令数是多少？”</p>
</blockquote>
<p>夜归的烤串，杏皮茶换成豆奶的甜腻</p>
<p>第一次提出跟舍友们合照，有了第一次的宿舍合照。</p>
<img src="https://i.loli.net/2021/03/21/L6C7yHxXuMsJmSU.jpg" alt="A7B1EE65BBF4F38CF43D8E2B4C8E8E6B.jpg" style="zoom:50%;">

<p>今天的投资报告<code>pre</code>，拿着找到的数据计算出需要的<code>INN</code>和<code>NPV</code></p>
<p>结束后，发现CASE给了设计的市场规模</p>
<p>突出的负净现值，坚定的说，“我们认为不适合投资”</p>
<p>难以忘记的这么笃定的瞬间。</p>
<p>似乎是想要做到没有漏洞，急促间，红色的箭头隐匿在教室沉静的氛围中。</p>
<p>“以上是我们组的投资分析，谢谢大家”。</p>
<blockquote>
<p>持股比例的漏洞埋在了幻想之中</p>
</blockquote>
<p>竟然又湿了眼眶，在逐渐接触经济的学科中，我对自己一开始的想法感到迷茫</p>
<p>大自然的统计规律是呈正态分布的，人们生活的周围潜藏的是逻辑的数学</p>
<p>“所以任何事情都只会有两种结果：存在与不存在”</p>
<blockquote>
<p>“因为不能给出完美的答案，所以金融才有意思啊”</p>
</blockquote>
<p>可我感到痛苦，编程成功的每一瞬间我不间断的感慨它的完美逻辑</p>
<p>两个<code>pre</code>的过程当中，我无数次的觉得</p>
<p>一个事实往下还是事实，</p>
<p>一个数据牵连的无数有关的无关的数据，</p>
<p>一个报道层层堆叠正确的答案。</p>
<p>在无法给出答案的此刻，我记起了每刻为找出答案而努力的所有瞬间。</p>
<img src="https://i.loli.net/2021/03/21/slw2ofN8cJFvZ1e.jpg" alt="0985B296F668F5989EF9CD6F5A259C4F.jpg" style="zoom:50%;">

<p>图书馆的走廊身影闪烁，世界异常开阔。</p>
<blockquote>
<p>在最后的无厘头的结束，是因为不想再思考下去，想起高中偷笑过一位同学说他最害怕的是未知。</p>
<p>现在我最害怕最期待的也是未知。</p>
<p>20岁的我在想，生活没有答案，每一刻都是时间碎片的略过，羡慕源自信息的不对称，偏见来自没有感受的…。</p>
<p><code>...</code>是因为我不知道什么能描述</p>
</blockquote>
<p>这么结束了记录，感觉心情顺畅了，闭塞着的空白又充满了生机；</p>
<p>想会会那位远方的朋友，跟他郑重地说一声谢谢。</p>
<blockquote>
<p>努力进p社吧，毒鸡汤hhhh</p>
<p>傻白甜最好了～～～</p>
</blockquote>
]]></content>
      <categories>
        <category>星星球巡游记</category>
      </categories>
      <tags>
        <tag>札记</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 4 -- 非连续内存分配</title>
    <url>/2021/03/20/OS/%E5%9B%9B%20%E9%9D%9E%E8%BF%9E%E7%BB%AD%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="四-非连续内存分配"><a href="#四-非连续内存分配" class="headerlink" title="四 非连续内存分配"></a>四 非连续内存分配</h1><h2 id="4-1-为什么需要非连续内存分配？"><a href="#4-1-为什么需要非连续内存分配？" class="headerlink" title="4.1 为什么需要非连续内存分配？"></a>4.1 为什么需要非连续内存分配？</h2><p>在没有非连续内存分配<strong>之前</strong>：</p>
<ul>
<li>分配给一个程序的物理内存是连续的</li>
<li>内存利用率较低</li>
<li>有外碎片、内碎片的问题</li>
</ul>
<p><strong>非连续分配的优点</strong>：</p>
<ul>
<li>一个程序的物理地址空间是非连续的</li>
<li>更好的内存利用和管理</li>
<li>允许共享代码与数据（共享库等…）</li>
<li>支持动态加载和动态链接</li>
</ul>
<p><strong>非连续分配的缺点：</strong></p>
<ul>
<li>如何建立虚拟地址和物理地址的转换<ul>
<li>软件方案【开销大】</li>
<li>硬件方案</li>
</ul>
</li>
</ul>
<p><strong>两种硬件辅助机制：</strong></p>
<ul>
<li><strong>分段【segmentation】</strong></li>
<li><strong>分页【paging】</strong></li>
</ul>
<h2 id="4-2-分段【Segmentation】"><a href="#4-2-分段【Segmentation】" class="headerlink" title="4.2 分段【Segmentation】"></a>4.2 分段【Segmentation】</h2><h3 id="4-2-1-段地址空间"><a href="#4-2-1-段地址空间" class="headerlink" title="4.2.1 段地址空间"></a>4.2.1 段地址空间</h3><p>一个程序是包含多个段的，如：主程序「main prog」、子程序「subroutines」、公用库「common libs」、栈数据「stack data」、堆数据「heap data」和符号表「symbols table」等</p>
<img src="https://i.loli.net/2021/03/23/qLKu8gXDpRbVMmB.png" alt="1.png" style="zoom:35%;">

<p>这么做的目的是为了让逻辑地址空间<strong>更好的分离与共享</strong></p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210319203147119.png" alt="image-20210319203147119" style="zoom:50%;">

<p><strong>分段的逻辑视图表示为：</strong></p>
<img src="https://i.loli.net/2021/03/23/EX32xnoPUdCMeAS.png" alt="3.png" style="zoom:33%;">

<h3 id="4-2-2-段访问机制"><a href="#4-2-2-段访问机制" class="headerlink" title="4.2.2 段访问机制"></a>4.2.2 段访问机制</h3><p>段分为了两种访问机制</p>
<ol>
<li>概念：<strong>一个段</strong>对应于<strong>一个内存“块”</strong>【为一个逻辑地址空间】</li>
<li>程序访问内存地址需要通过$pair(s, addr)$来定位<ul>
<li><code>s</code>表示<strong>段号</strong></li>
<li><code>addr</code>表示<strong>段内偏移</strong></li>
</ul>
</li>
</ol>
<img src="https://i.loli.net/2021/03/23/XryiLUONDzJm9Bn.png" alt="image-20210319203643989.png" style="zoom:33%;">

<p>根据<strong>操作系统设置的段表</strong>不同段所处的地址不同，段表存储了<code>base &amp; limit register</code>的值</p>
<h2 id="4-3-分页"><a href="#4-3-分页" class="headerlink" title="4.3 分页"></a>4.3 分页</h2><h3 id="4-3-1-页地址空间"><a href="#4-3-1-页地址空间" class="headerlink" title="4.3.1 页地址空间"></a>4.3.1 页地址空间</h3><ul>
<li>把物理内存分割为大小合适的帧（Frame， Page Frame）</li>
</ul>
<blockquote>
<p>$2^n$次方，如512， 4096， 8192等</p>
</blockquote>
<ul>
<li>把逻辑地址空间也划分为相同大小的页（Page）</li>
</ul>
<blockquote>
<p>$2^n$次方，如512， 4096， 8192</p>
</blockquote>
<ul>
<li>建立逻辑地址到物理地址的转换机制<ul>
<li>页表</li>
<li>MMU/TLB</li>
</ul>
</li>
</ul>
<h3 id="4-3-2-帧"><a href="#4-3-2-帧" class="headerlink" title="4.3.2 帧"></a>4.3.2 帧</h3><blockquote>
<p>物理内存被分割为大小相等的帧</p>
</blockquote>
<p>一个内存物理地址是一个$pair(f,o)$</p>
<ul>
<li><code>f</code> – 帧号（$F$位， 共有$2^F$个帧）</li>
<li><code>o</code> – 帧内偏移（$S$位，每帧有$2^S$字节）</li>
</ul>
<p>物理地址为：$2^S \times f+o$</p>
<img src="https://i.loli.net/2021/03/23/U1HFVQha9PYwAJj.png" alt="image-20210319204831914.png" style="zoom:33%;">

<h3 id="4-3-3-页"><a href="#4-3-3-页" class="headerlink" title="4.3.3 页"></a>4.3.3 页</h3><p>一个程序的逻辑地址空间被划分为大小相等的页</p>
<ul>
<li>（逻辑地址的）页内偏移的大小 = （物理地址的）帧内偏移的大小</li>
<li>但是（逻辑地址的）页号大小<strong>不一定等于</strong>（物理地址的）帧号大小</li>
</ul>
<p>一个逻辑地址也是一个$pair(p,o)$</p>
<ul>
<li><p><code>p</code>, 页号（$P$位，$2^P$个页）</p>
</li>
<li><p><code>o</code>，页内偏移（$S$位，每页有$2^S$字节）</p>
</li>
</ul>
<p>虚拟地址为：$2^S\times p+o$</p>
<p>因此<strong>页号</strong>的作用就是通过一个二元组找到一个逻辑地址，而页号和帧号不是相等的</p>
<hr>
<p>页表实际上为一个大的数组/哈希表，它的index为页号，对应的value为页帧号，最后我们需要根据页帧号计算得到物理地址。而对于一些页/帧内偏移相等的数据，页表将不保存这些数据。</p>
<p>通过这种方式能过根据逻辑地址找到对应的物理地址</p>
<img src="https://i.loli.net/2021/03/23/VoWuiyeQNEv9xDq.png" alt="image-20210319211347612.png" style="zoom:33%;">

<img src="https://i.loli.net/2021/03/23/qLKu8gXDpRbVMmB.png" alt="1.png" style="zoom:33%;">

<h2 id="4-4-页表"><a href="#4-4-页表" class="headerlink" title="4.4 页表"></a>4.4 页表</h2><h3 id="4-4-1-页表概览"><a href="#4-4-1-页表概览" class="headerlink" title="4.4.1 页表概览"></a>4.4.1 页表概览</h3><p>每个运行的程序都会有一个页表</p>
<ul>
<li>属于程序运行状态，会动态变化</li>
<li><strong>PTBR</strong>：页表基址寄存器</li>
</ul>
<img src="https://i.loli.net/2021/03/23/F2Nf4uWi5wkKOes.png" alt="image-20210319211619019.png" style="zoom:33%;">

<p>通过标识为能够判断当前页号的性质，举个栗子：</p>
<img src="https://i.loli.net/2021/03/23/XfC24EakjtBNyRx.png" alt="image-20210319211719305.png" style="zoom:33%;">

<p>逻辑地址$(4,0)$表示页号为4对应的二进制为$100$，根据$Flags（标志位）$的标准，它的$dirty\ bit=1, \ resident bit=0,\ clock/reference\ bit = 0$.因此可以知道逻辑地址$(4,0)$在物理地址中实际是不存在的，如果cpu访问这个逻辑地址会抛出内存访问的异常；</p>
<p>而逻辑地址$(3, 1023)$中，页号3对应的二进制为$011$，表示$dirty\ bit=0, \ resident bit=1,\ clock/reference\ bit = 1$,说明逻辑地址$(3, 1023)$在物理地址中是存在的。由于逻辑地址的页内偏移和物理地址的帧内偏移是一样的，所以页表不需要保存偏移。</p>
<p>根据页表，页号3对应的页帧号为4，且他们的偏移量相等，所以逻辑地址$(3, 1023)$对应的物理地址为$(4, 1023)$</p>
<p>这个页表是由操作系统维护的。</p>
<hr>
<p><strong>缺点：空间代价和时间开销</strong></p>
<ul>
<li>访问一个内存单元需要2次访问：1⃣️获取页表项；2⃣️访问数据</li>
<li>页表可能会非常大：如64位机器，如果一页是$1024KB$,页内偏移为$10$位，一个逻辑地址的长度等于计算机位数，即$64$位，因此剩下的$54$位都是留给页号的。此时页表的长度为$2^{54}$，cpu明显装不下</li>
</ul>
<p><strong>解决方法：</strong></p>
<ol>
<li>使用缓存<code>caching</code></li>
<li>间接访问<code>indirection</code></li>
</ol>
<h3 id="4-4-2-转换后备缓冲区-快表TLB"><a href="#4-4-2-转换后备缓冲区-快表TLB" class="headerlink" title="4.4.2 转换后备缓冲区/快表TLB"></a>4.4.2 转换后备缓冲区/快表TLB</h3><blockquote>
<p>解决时间开销</p>
</blockquote>
<p>TLB实际上为CPU的MMU内存管理单元保存的一段缓存，这段缓存保存的内容为<strong>页表</strong>的一部分，为经常访问到的那部分页表。其余不常用的页表的内容保存在内存中</p>
<img src="https://i.loli.net/2021/03/23/E6gTKXBuW14s7Fd.png" alt="image-20210319213314173.png" style="zoom:33%;">

<h3 id="4-4-3-二级-多级页表"><a href="#4-4-3-二级-多级页表" class="headerlink" title="4.4.3 二级/多级页表"></a>4.4.3 二级/多级页表</h3><blockquote>
<p>解决空间开销</p>
</blockquote>
<p>这种方法虽然增加了内存访问次数和开销，但是节省了保存页表的空间（时间换空间，然后通过TLB来减少时间消耗）</p>
<h4 id="lt-1-gt-二级页表"><a href="#lt-1-gt-二级页表" class="headerlink" title="&lt;1&gt; 二级页表"></a>&lt;1&gt; 二级页表</h4><p>逻辑地址中，页号部分分为了2部分<code>p1 &amp; p2</code></p>
<p>其中<code>p1</code>存放着二级页表的起始地址，<code>p2</code>作用为之前的<code>p</code>，其中<code>p1</code>找二级页表，<code>p2</code>找页，<code>o</code>找地址。其中<code>p1</code>对应的位置时<strong>flags</strong>，如果说<code>resident bit=0</code>，那么整个二级页表都不用在内存中保存，因为这个在一级页表内是无法实现的</p>
<img src="https://i.loli.net/2021/03/23/QL4CkuKE6yOrPJx.png" alt="image-20210320123814579.png" style="zoom:33%;">

<h4 id="lt-2-gt-多级页表"><a href="#lt-2-gt-多级页表" class="headerlink" title="&lt;2&gt; 多级页表"></a>&lt;2&gt; 多级页表</h4><p>如64位系统采用5级页表，建立了<strong>页表树</strong>的概念</p>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210320124101005.png" alt="image-20210320124101005" style="zoom:50%;">

<h3 id="4-4-4-反向页表【Inverted-Page-Table】"><a href="#4-4-4-反向页表【Inverted-Page-Table】" class="headerlink" title="4.4.4 反向页表【Inverted Page Table】"></a>4.4.4 反向页表【Inverted Page Table】</h3><p>页表用来表示<strong>物理地址（页帧）号</strong>，而不是之前的<strong>逻辑地址（页号）</strong>，能够减少页表尺寸，但是给映射关系的建立带来了困难</p>
<h4 id="lt-1-gt-传统页表的缺点"><a href="#lt-1-gt-传统页表的缺点" class="headerlink" title="&lt;1&gt; 传统页表的缺点"></a>&lt;1&gt; 传统页表的缺点</h4><ul>
<li>对于大地址空间，前向映射页表变得繁琐（例如64位系统采用5级页表）</li>
<li>逻辑地址空间增长速度快于物理地址空间，所以反向页表，即<strong>index是物理地址</strong>，而<strong>value是逻辑地址</strong>，它的大小会小于传统页表</li>
</ul>
<h4 id="lt-2-gt-反向页表的实现"><a href="#lt-2-gt-反向页表的实现" class="headerlink" title="&lt;2&gt; 反向页表的实现"></a>&lt;2&gt; 反向页表的实现</h4><blockquote>
<p>基于页寄存器<code>page register</code></p>
</blockquote>
<img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210320124604714.png" alt="image-20210320124604714" style="zoom:50%;">

<ol>
<li><p>每个帧和一个寄存器关联，寄存器内容包括：</p>
<ul>
<li>$Residence\ bit:$此帧是否被占用</li>
<li>$Occupier:$ 对应的页号</li>
<li>$Protection\ bits:$ 保护位</li>
</ul>
</li>
<li><p>页寄存器【举个栗子】</p>
<ul>
<li><p>物理内存大小：4096*4096 = $4K * 4KB = 16MB$</p>
</li>
<li><p>页面大小：$4096\ bytes = 4KB$</p>
</li>
<li><p>页帧数：$4096 = 4K$</p>
</li>
<li><p>页寄存器使用的空间（假设$8\ bytes/register$）：$8*4096 = 32Kbytes$</p>
</li>
<li><p>页寄存器带来的额外开销：32K/16M = $0.2%$</p>
</li>
<li><p>虚拟内存的大小 :任意</p>
</li>
</ul>
</li>
</ol>
<h4 id="lt-3-gt-反向页表的权衡"><a href="#lt-3-gt-反向页表的权衡" class="headerlink" title="&lt;3&gt;反向页表的权衡"></a>&lt;3&gt;反向页表的权衡</h4><p><strong>利：</strong></p>
<ul>
<li>转换表的大小相对于物理内存来说很小</li>
<li>转换的大小跟逻辑地址空间的大小无关</li>
</ul>
<p><strong>弊：</strong></p>
<p>需要的信息对调了，如何根据帧号找到页号呢？</p>
<blockquote>
<p>需要在反向页表里找到想要的页号</p>
</blockquote>
<h3 id="4-4-5-反向页表的实现【基于关联内存Associative-Memory】"><a href="#4-4-5-反向页表的实现【基于关联内存Associative-Memory】" class="headerlink" title="4.4.5 反向页表的实现【基于关联内存Associative Memory】"></a>4.4.5 反向页表的实现【基于关联内存Associative Memory】</h3><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210320125805643.png" alt="image-20210320125805643" style="zoom:50%;">

<p>这个方法的开销很大。</p>
<p>如果帧数较少，页寄存器可以被<strong>放置在关联内存</strong>中；在关联内存中查找逻辑页号，如果成功，帧号会被提取出来；如果失败，返回页错误异常$page\ fault$。</p>
<p>限制这种方案的因素包括：大量的关联内存非常昂贵（难以在单个时钟周期内完成：耗电）</p>
<h3 id="4-4-6-反向页表的实现【基于哈希查找Hash】"><a href="#4-4-6-反向页表的实现【基于哈希查找Hash】" class="headerlink" title="4.4.6 反向页表的实现【基于哈希查找Hash】"></a>4.4.6 反向页表的实现【基于哈希查找Hash】</h3><img src="/Users/zoriswang/Library/Application Support/typora-user-images/image-20210320130135706.png" alt="image-20210320130135706" style="zoom:50%;">

<blockquote>
<p>该方法在反向页表中通过哈希算法来搜索一个页对应的帧号</p>
</blockquote>
<ol>
<li>对页号做哈希计算，为了在“帧表”（每帧都有一个表项）中获取对应的帧号</li>
<li>页$i$被放置在表中$f(i)$位置，其中$f$是商定的哈希函数</li>
<li>为了查找页$i$，需要执行下列操作<ul>
<li>计算哈希函数$f(i)$，并且使用它作为<strong>页寄存器表的索引</strong></li>
<li>获取对应的页寄存器</li>
<li>检查寄存器标签是否包含$i$，如果包含，则代表成功；否则失败</li>
</ul>
</li>
</ol>
<p>需要注意<strong>哈希冲突</strong>的问题</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 3 -- 连续式内存分配</title>
    <url>/2021/03/19/OS/%E4%B8%89%20%E8%BF%9E%E7%BB%AD%E5%BC%8F%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="3-连续式内存分配"><a href="#3-连续式内存分配" class="headerlink" title="3 连续式内存分配"></a>3 连续式内存分配</h1><h2 id="3-1-计算机体系结构及内存分层体系"><a href="#3-1-计算机体系结构及内存分层体系" class="headerlink" title="3.1 计算机体系结构及内存分层体系"></a>3.1 计算机体系结构及内存分层体系</h2><h3 id="3-1-1-计算机体系结构"><a href="#3-1-1-计算机体系结构" class="headerlink" title="3.1.1 计算机体系结构"></a>3.1.1 计算机体系结构</h3><p>计算机的组件由：<code>cpu</code>、<code>内存</code>和<code>I/O设备</code>组成</p>
<img src="https://i.loli.net/2021/03/23/ipqhyfoMmu9COxl.png" alt="1.png" style="zoom:33%;">

<h3 id="3-1-2-内存层次"><a href="#3-1-2-内存层次" class="headerlink" title="3.1.2 内存层次"></a>3.1.2 内存层次</h3><p>内存层次为：<code>高速缓存 --&gt; Main Memory --&gt; Disk（虚拟内存）</code></p>
<img src="https://i.loli.net/2021/03/23/XMHtc2OEmlA5jC1.png" alt="image-20210319185559865.png" style="zoom:33%;">

<p>操作系统在内存管理内要完成的目标为：</p>
<ul>
<li><strong>抽象：</strong> 逻辑地址空间</li>
<li><strong>保护：</strong> 独立地址空间</li>
<li><strong>共享：</strong> 访问相同内存</li>
<li><strong>虚拟化：</strong> 更多的地址空间</li>
</ul>
<img src="https://i.loli.net/2021/03/23/UKTNnpBvkHJj7Gc.png" alt="image-20210319185732039.png" style="zoom:33%;">

<p>其不同的内存管理方式有：</p>
<ul>
<li>程序重定位</li>
<li>分段、分页</li>
<li>虚拟内存</li>
<li>大多数（如linux）：需要虚拟内存分页</li>
</ul>
<p><strong>实现高度依赖硬件</strong></p>
<ul>
<li>必须了解内存架构</li>
<li>MMU（<strong>内存管理单元</strong>）：负责cpu内存访问请求的硬件</li>
</ul>
<h2 id="3-2-地址空间-amp-地址生成"><a href="#3-2-地址空间-amp-地址生成" class="headerlink" title="3.2 地址空间 &amp; 地址生成"></a>3.2 地址空间 &amp; 地址生成</h2><h3 id="3-2-1-地址空间的定义"><a href="#3-2-1-地址空间的定义" class="headerlink" title="3.2.1 地址空间的定义"></a>3.2.1 地址空间的定义</h3><ul>
<li><strong>物理地址空间：</strong> 硬件支持的地址空间</li>
<li><strong>逻辑地址空间：</strong> 一个运行的程序所拥有的内存范围</li>
</ul>
<h3 id="3-2-2-地址生成"><a href="#3-2-2-地址生成" class="headerlink" title="3.2.2 地址生成"></a>3.2.2 地址生成</h3><p>经历<code>编译--汇编--链接--加载（程序重定位）</code>这四个阶段</p>
<p><strong>应用程序的逻辑地址是如何映射到物理地址呢？</strong></p>
<p>这个过程中操作系统负责建设逻辑地址<code>LA</code>和物理地址<code>PA</code>的映射</p>
<ol>
<li><strong>编译时</strong></li>
</ol>
<ul>
<li>假设起始地址已知</li>
<li>如果起始地址改变，必须重新编译</li>
</ul>
<ol start="2">
<li><strong>加载时</strong></li>
</ol>
<ul>
<li>如果编译时刻起始位置未知，那么编译器必须生成可重定位的代码「Relocatable Code」</li>
<li>加载时，生成绝对地址</li>
</ul>
<ol start="3">
<li><strong>执行时</strong></li>
</ol>
<ul>
<li>程序可以被移动</li>
<li>需要地址翻译的硬件支持</li>
</ul>
<ol start="4">
<li><strong>CPU</strong></li>
</ol>
<ul>
<li><code>ALU</code>需要逻辑地址的内存内容</li>
<li><code>MMU</code>进行逻辑地址和物理地址的转换</li>
<li><code>Controller</code>给总线发送物理地址请求</li>
</ul>
<ol start="5">
<li><strong>Memory</strong></li>
</ol>
<ul>
<li><code>Memory</code>发送物理地址的内容给<code>CPU</code></li>
</ul>
<img src="https://i.loli.net/2021/03/23/ipqhyfoMmu9COxl.png" alt="1.png" style="zoom:33%;">

<h3 id="3-2-3-地址安全检查"><a href="#3-2-3-地址安全检查" class="headerlink" title="3.2.3 地址安全检查"></a>3.2.3 地址安全检查</h3><p>通过<code>LIMIT</code>和<code>BASE</code>寄存器来判断操作系统程序的<strong>起始（base）</strong>和<strong>最大逻辑（limit）</strong>地址空间</p>
<h2 id="3-3-连续内存分配"><a href="#3-3-连续内存分配" class="headerlink" title="3.3 连续内存分配"></a>3.3 连续内存分配</h2><h3 id="3-3-1-内存碎片"><a href="#3-3-1-内存碎片" class="headerlink" title="3.3.1 内存碎片"></a>3.3.1 内存碎片</h3><p>在内存分配中，主要存在着三个问题：</p>
<ol>
<li><strong>空闲内存</strong>不能得到有效利用</li>
<li><strong>外部碎片</strong></li>
</ol>
<blockquote>
<p>分配单元之间的未被使用的内存</p>
</blockquote>
<ol start="3">
<li>内部碎片</li>
</ol>
<ul>
<li>分配单元内的未被使用内存</li>
<li>取决于分配单元大小是否固定</li>
</ul>
<p>关于内部和外部是这么分的：</p>
<img src="https://i.loli.net/2021/03/23/6R7KgjId5r9tVf1.png" alt="image-20210319192015981.png" style="zoom:33%;">

<h3 id="3-3-2-动态分配"><a href="#3-3-2-动态分配" class="headerlink" title="3.3.2 动态分配"></a>3.3.2 动态分配</h3><p>简单的内存管理方式为：</p>
<ul>
<li>当程序被允许进入系统时，被<strong>分配内存块</strong></li>
<li>分配的内存块在地址上是<strong>连续</strong>的</li>
</ul>
<blockquote>
<p>块 = 内存块 = 分区</p>
</blockquote>
<p>对于每一个运行的程序，操作系统持续追踪：</p>
<ul>
<li>程序运行中的所有已分配内存块</li>
<li>当前空闲的内存块<strong>Empty-blocks（“holes”）</strong></li>
</ul>
<p>一共有三种关于内存的分配策略：</p>
<hr>
<ol>
<li><strong>First Fit Allocation【首次适配分配机制】</strong></li>
</ol>
<img src="https://i.loli.net/2021/03/23/iaGnK8N7LH4pecb.png" alt="image-20210319192458252.png" style="zoom:33%;">

<p>因为在内存中$1K \ bytes$是第一个，而不是$500 \ bytes$</p>
<p><strong>原理 &amp; 实现</strong></p>
<ul>
<li><p>实现简单，在高地址空间有大块的空闲分区</p>
</li>
<li><p>要求：</p>
<ul>
<li>空闲块列表按照地址排序</li>
<li>分配过程需要搜索一个合适的分区</li>
<li>释放分区需要检查其是否能够和邻近的空闲分区合并</li>
</ul>
</li>
<li><p><strong>缺点：</strong><code> 外部碎片</code> 和 <code>不确定因素</code></p>
</li>
</ul>
<hr>
<ol start="2">
<li><strong>Best Fit Allocation【最佳适配分配机制】</strong></li>
</ol>
<img src="https://i.loli.net/2021/03/23/6mBwnMou7PhK13f.png" alt="image-20210319193211332.png" style="zoom:33%;">

<p><strong>原理 &amp; 实现</strong></p>
<ul>
<li><strong>优点：</strong> 避免大的空闲块被拆分，减小了外部碎片的大小</li>
<li><strong>缺点：</strong> 释放分区较慢，容易产生很多无用的小碎片</li>
<li><strong>要求：</strong><ul>
<li>空闲块列表按照<strong>大小排序</strong></li>
<li>分配过程需要查找一个合适的分区</li>
<li>释放分区需要查找并且合并邻近的空闲分区【如果能找到】</li>
</ul>
</li>
</ul>
<hr>
<ol start="3">
<li><strong>Worst Fit Allocation【最差适配机制】</strong></li>
</ol>
<img src="https://i.loli.net/2021/03/23/uWKGbrQ5TNH6zfR.png" alt="image-20210319193625859.png" style="zoom:33%;">

<p><strong>原理 &amp; 实现</strong></p>
<ul>
<li><strong>优点：</strong> 避免出现太多的小碎片，属于中等尺寸的时候，效果最好</li>
<li><strong>缺点：</strong> 释放分区较慢，容易破坏大的空闲块，后续难以分配大的分区</li>
<li><strong>要求：</strong><ul>
<li>空闲块列表从大到小排序</li>
<li>分配非常快（最大的分区）</li>
<li>释放分区需要<strong>合并邻近的空闲块</strong>（如果有），然后调整空闲块列表</li>
</ul>
</li>
</ul>
<hr>
<h3 id="3-3-3-碎片整理"><a href="#3-3-3-碎片整理" class="headerlink" title="3.3.3 碎片整理"></a>3.3.3 碎片整理</h3><h4 id="lt-1-gt-Compaction-–-压实"><a href="#lt-1-gt-Compaction-–-压实" class="headerlink" title="&lt;1&gt; Compaction – 压实"></a>&lt;1&gt; Compaction – 压实</h4><img src="https://i.loli.net/2021/03/23/5X4CI1nBOPJGmD8.png" alt="image-20210319194015415.png" style="zoom:33%;">

<h4 id="lt-2-gt-Swapping-in-out-–-换入换出"><a href="#lt-2-gt-Swapping-in-out-–-换入换出" class="headerlink" title="&lt;2&gt; Swapping in/out – 换入换出"></a>&lt;2&gt; Swapping in/out – 换入换出</h4><p>当运行中的<strong>程序1</strong>需要更多的内存时，抢占内存中等待的<strong>程序2</strong>，回收它们的内存于<code>Disk</code>中，后把<strong>程序1</strong>放入主存中运行</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 2 -- 基础操作</title>
    <url>/2021/03/19/OS/%E4%BA%8C%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="2-操作系统基础操作"><a href="#2-操作系统基础操作" class="headerlink" title="2 操作系统基础操作"></a>2 操作系统基础操作</h1><img src="https://i.loli.net/2021/03/23/STmQ34s5DPFoIcL.png" alt="image-20210319115425183.png" style="zoom:35%;">

<blockquote>
<p>CPU，I/O与内存通过总线连接</p>
</blockquote>
<h2 id="2-1-操作系统的启动"><a href="#2-1-操作系统的启动" class="headerlink" title="2.1 操作系统的启动"></a>2.1 操作系统的启动</h2><img src="https://i.loli.net/2021/03/23/d7kRQjFPgoclyE2.png" alt="image-20210319115815465.png" style="zoom:33%;">

<p><strong>内存映射：</strong></p>
<p><strong>DISK:</strong> 存放OS</p>
<p><strong>BIOS:</strong> Basic I/O system，基本I/O处理系统，加载OS到内存当中</p>
<p>电脑通电后，段寄存器CS和指令寄存器IP会确定一个内存地址，如<code>CS:IP = 0xf000:fff0</code></p>
<p><strong>POST(加电自检)**， 寻找显卡和执行</strong>BIOS**[检查显示器、键盘等是否正常]</p>
<p><strong>步骤：</strong></p>
<ol>
<li><strong>BIOS:</strong> 将Bootloader从磁盘的磁盘引导扇区（512字节）加载到<code>0x7c00</code>；跳转到<code>CS:IP=0000:7C00</code>的内存区域</li>
<li><strong>Bootloader:</strong> 将操作系统的代码和数据从硬盘加载到内存中，跳转到操作系统的起始地址</li>
</ol>
<p><strong>系统调用：</strong> （来源于应用程序）应用程序主动向操作系统发出服务请求</p>
<p><strong>异常：</strong> （来源于不良的应用程序）非法指令或者其它不好的处理状态（e.g. 内存出错）</p>
<p><strong>中断：</strong> （来源于外设）来自不同硬件设备的计时器和网络的中断</p>
<hr>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><ol>
<li><strong>为什么应用程序不能直接访问硬件而是通过操作系统呢？</strong></li>
</ol>
<ul>
<li>计算机运行时，内核是被信任的第三方</li>
<li>只有内核能够执行特权指令</li>
<li>为了方便应用程序</li>
</ul>
<ol start="2">
<li><strong>操作系统如何设计和实现中断/异常和系统调用，他们三者的区别和特点</strong></li>
</ol>
<p><strong>&lt;如何产生？&gt;</strong></p>
<ul>
<li><strong>系统调用</strong>主动向操作系统发服务请求</li>
<li><strong>中断</strong>为不同硬件设备的计时器和网络的中断</li>
<li><strong>异常</strong>为不良的应用程序产生的<strong>非法指令</strong>或<strong>其他不好的处理状态</strong>的问题</li>
</ul>
<p><strong>&lt;产生的源头&gt;</strong></p>
<ul>
<li><strong>中断：</strong> 外设（键盘/鼠标/网卡/声卡/显卡，可以产生各种事件）</li>
<li><strong>异常：</strong> 应用程序意想不到的行为（e.g. 异常，恶意服务，应用程序需要的资源未得到满足）</li>
<li><strong>系统调用（sys call）：</strong> 应用程序请求操作服务（打开/关闭/读写文件，发送网络包）</li>
</ul>
<p><strong>&lt;处理时间&gt;</strong></p>
<ul>
<li><strong>中断：</strong> 异步</li>
</ul>
<blockquote>
<p>事件产生时，应用程序并不知道他什么时候会产生，只有当他产生了才去处理</p>
</blockquote>
<ul>
<li><strong>异常：</strong> 同步</li>
</ul>
<blockquote>
<p>一定是执行到某一条特定指令时一定会产生</p>
</blockquote>
<ul>
<li><strong>系统调用：</strong> 异步或同步</li>
</ul>
<blockquote>
<p>同步：执行到某一条特定指令时一定会产生</p>
<p>异步：从系统调用的返回时间来看，如果应用程序发出系统调用请求后一直在等待则为同步，如果应用程序去做别的事则为异步</p>
</blockquote>
<p><strong>&lt;响应&gt;</strong></p>
<ul>
<li><strong>中断：</strong> 持续、对用户应用程序时为透明</li>
<li><strong>异常：</strong> 杀死或者重新执行意想不到的应用程序指令</li>
<li><strong>系统调用：</strong> 等待和持续</li>
</ul>
<hr>
<h2 id="2-2-中断-异常和系统调用"><a href="#2-2-中断-异常和系统调用" class="headerlink" title="2.2 中断/异常和系统调用"></a>2.2 中断/异常和系统调用</h2><ol>
<li>中断/异常的<strong>处理机制</strong></li>
</ol>
<p>中断是外设的事件，异常是cpu的事件</p>
<ol start="2">
<li><strong>中断处理机制</strong><ul>
<li><strong>硬件：</strong> 设置中断标记<strong>（CPU初始化）</strong><ul>
<li>将内部/外部事件设置中断标记</li>
<li>中断事件的ID（程序访问的中断向量的地址）</li>
</ul>
</li>
<li><strong>软件：</strong> 操作系统<ul>
<li>保存当前处理状态</li>
<li>中断服务程序处理</li>
<li>清除中断标记</li>
<li>恢复之前保存的处理状态</li>
</ul>
</li>
</ul>
</li>
<li><strong>异常处理机制</strong><ul>
<li><strong>异常：异常编号</strong><ul>
<li>保存现场</li>
<li>异常处理：杀死产生异常的程序，重新执行异常指令</li>
<li>恢复现场</li>
</ul>
</li>
</ul>
</li>
<li><strong>系统调用</strong><ul>
<li>一条指令会触发一个系统调用</li>
<li>程序访问主要是通过高层次的API接口而不是直接进行系统调用</li>
<li>通常情况下，存在于每个系统调用相关的序号，系统调用接口根据这些序号来维护表的索引</li>
<li>系统调用接口调用内核态中预期的系统调用，并返回系统调用的状态和其他返回值</li>
<li>用户不需要知道系统调用是如何实现的，只需要获取API和了解操作新系统讲什么作为返回结果。操作系统<strong>接口的细节大部分都隐藏在AP</strong>I中，并通过运行程序支持的库来管理</li>
<li><strong>用户态：</strong> 应用程序在执行的过程中，cpu执行的特权级的<strong>状态很低，不能访问特殊机器指令和IO</strong></li>
<li><strong>内核态：</strong> 应用程序在执行的过程中，cpu执行的特权级的<strong>状态高，操作系统可以执行cpu任何一条指令</strong></li>
<li>系统调用时涉及到<strong>特权级从用户态到内核态</strong>的转换，<strong>应用程序和操作系统有各自的堆栈</strong>，这两个变化比函数调用的开销更大，但更安全和可靠</li>
</ul>
</li>
<li><strong>跨越操作系统边界的开销</strong><ul>
<li>在执行时间上超过程序调用</li>
<li><strong>开销包括：</strong><ol>
<li>建立<strong>中断/异常/系统调用</strong>和与<strong>对应服务例程映射关系</strong>的初始化开销</li>
<li>建立内核堆栈（操作系统和应用程序的堆栈不一样）</li>
<li>验证参数（操作系统会检查数据）</li>
<li>内核态映射到用户态的地址空间，更新页面映射权限（内存拷贝开销）</li>
<li>内核态独立地址空间TLB</li>
</ol>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System 1 -- 概述</title>
    <url>/2021/03/19/OS/%E4%B8%80%20%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-操作系统的定义"><a href="#1-1-操作系统的定义" class="headerlink" title="1.1 操作系统的定义"></a>1.1 操作系统的定义</h2><p><strong>用户角度：</strong> 操作系统是一个控制软件</p>
<ul>
<li>管理应用程序</li>
<li>为应用程序提供服务</li>
<li>杀死应用程序</li>
<li>资源管理</li>
<li>管理外设/分配资源</li>
</ul>
<h3 id="1-1-1-体系结构"><a href="#1-1-1-体系结构" class="headerlink" title="1.1.1 体系结构"></a>1.1.1 体系结构</h3><p>在操作系统下，进程与cpu联系，文件联系于磁盘，地址空间信息存于内存中</p>
<p>而操作系统位于硬件之上，应用软件之下（为应用软件提供服务支持）。</p>
<p>其由<code>shell</code>和<code>kernel</code>组成。其中，Linux，Windows界面属于外壳<code>shell</code>，而非内核<code>kernel</code>，我们这里主要讲<code>kernel</code></p>
<h2 id="1-2-Kernel"><a href="#1-2-Kernel" class="headerlink" title="1.2 Kernel"></a>1.2 Kernel</h2><h3 id="1-1-2-kernel定义"><a href="#1-1-2-kernel定义" class="headerlink" title="1.1.2 kernel定义"></a>1.1.2 kernel定义</h3><p><code>kernel</code>作为操作系统的内部，执行各种资源的管理，包括：</p>
<ul>
<li><p>CPU调度器</p>
</li>
<li><p>物理内存管理</p>
</li>
<li><p>虚拟内存管理</p>
</li>
<li><p>文件系统管理</p>
</li>
<li><p>中断处理与设备驱动</p>
</li>
</ul>
<h3 id="1-1-3-kernel特征"><a href="#1-1-3-kernel特征" class="headerlink" title="1.1.3 kernel特征"></a>1.1.3 kernel特征</h3><ul>
<li><strong>并发</strong></li>
</ul>
<p>指一段时间内多个程序运行，而并行指一个时间点上多个程序运行，要求多个cpu。计算机系统中同时存在多个运行的程序，需要os管理和调度</p>
<ul>
<li><strong>共享</strong></li>
</ul>
<p>“同时”访问【实际上是分时】或互斥共享</p>
<ul>
<li><strong>虚拟</strong></li>
</ul>
<p>利用多道程序设计技术，让每一个用户都觉得有一个计算机专门为他做服务</p>
<ul>
<li><strong>异步</strong></li>
</ul>
<p>程序的执行不是一步到底，而是走走停停，向前推进的速度不可预知，但只要运行环境相同，OS需要保证程序运行的结果也相同</p>
<h2 id="1-3-操作系统结构"><a href="#1-3-操作系统结构" class="headerlink" title="1.3 操作系统结构"></a>1.3 操作系统结构</h2><p><strong>分时：</strong> 定时中断用于工作对cpu的复用</p>
<ol>
<li><strong>简单的操作系统：</strong> MS-DOS不分模块的单体内核（内部通过函数调用。<strong>缺点：</strong> 复杂、紧耦合，易受攻击）</li>
<li><strong>微内核：</strong> 尽可能把内核功能移植到用户空间，用户模块间的通信，使用信息传递。<strong>缺点：</strong> 性能低</li>
<li><strong>外核：</strong> 将内核分配机器的物理资源给多个应用程序，并让每个程序决定如何处理这些资源，程序通过链接到操作系统库<strong>「libOS，Libarary operating systems」</strong></li>
<li><strong>虚拟机：</strong> VMs【<strong>虚拟机</strong>，s为下标】–&gt; VMM**[虚拟机监视器，也称为管理程序]** –&gt; <strong>物理机硬件【内存、处理器、I/O设备】</strong>，多操作系统共享硬件资源</li>
</ol>
<blockquote>
<p><strong>VMM</strong> 将单独的机器借口转换成很多的幻想，每个<strong>这些接口（虚拟机）</strong>都是一个原始计算机系统的有效副本，并完成所有的处理器指令</p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>比特币与区块链</title>
    <url>/2021/03/16/%E6%AF%94%E7%89%B9%E5%B8%81%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="比特币是什么"><a href="#比特币是什么" class="headerlink" title="比特币是什么"></a>比特币是什么</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><blockquote>
<p> 比特币与区块链的关系十分密切，那么解释区块链前，先来介绍下比特币是什么</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">大纲</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>1.比特币简介</strong></td>
</tr>
<tr>
<td align="center">2.比特币与支付宝</td>
</tr>
<tr>
<td align="center"><strong>3.比特币的运作与发行</strong></td>
</tr>
<tr>
<td align="center"><strong>4.比特币的数字签名与安全问题</strong></td>
</tr>
<tr>
<td align="center">5.比特币的分叉与演变</td>
</tr>
</tbody></table>
<h2 id="一-比特币简介"><a href="#一-比特币简介" class="headerlink" title="一 比特币简介"></a>一 比特币简介</h2><h3 id="1-1-比特币是什么？"><a href="#1-1-比特币是什么？" class="headerlink" title="1.1 比特币是什么？"></a>1.1 比特币是什么？</h3><ul>
<li><strong>起源【2008.11.1】</strong>：中本聪【至今未知身份】发表论文—-《比特币：一种点对点的电子现金系统》（也称为比特币白皮书），此时中本聪开发出了比特币系统的程序代码并进行了开源共享</li>
<li><strong>第一个区块【2009.1.3】：</strong>由中本聪挖出，并延续至今</li>
<li><strong>涉及原理：</strong>加密技术、分布式账本、智能合约、共识机制、防伪防篡改、<strong>去中心化</strong>等技术和思想，统称为<strong>区块链技术</strong>，在金融、物联网、保险及公益等领域有十分大的应用前景</li>
<li><strong>白皮书介绍：</strong> <strong>比特币</strong>并不是纸币或者金币银币那样独立的个体，它是一套<strong>电子现金系统</strong>，与支付宝由一定的类似之处，比特币存在于网络上，能够不经过任何中心机构就能够完成全球转账。<strong>比特币也不是一个一个使用的，它的最小单位为“聪”，一个比特币等于一亿聪</strong>，同时比特币的发行、支付、验证，其自成一系，与法币并无联系。</li>
</ul>
<h3 id="1-2-比特币的特点"><a href="#1-2-比特币的特点" class="headerlink" title="1.2 比特币的特点"></a>1.2 比特币的特点</h3><ul>
<li>总量有限，无国界，无发行中心，无管理中心，遍布全球，自由流通的全新货币</li>
<li>更确切地说，比特币是一套在<strong>全球范围内运行的程序</strong>，是许多份<strong>遍布全球并且又完全一致的账本</strong>，是<strong>一个价值传输网络</strong>，对于货币、金融、互联网及人类组织形式都产生了颠覆性的影响。</li>
</ul>
<h3 id="1-3-比特币的影响"><a href="#1-3-比特币的影响" class="headerlink" title="1.3 比特币的影响"></a>1.3 比特币的影响</h3><ol>
<li>货币不再由少数人掌控的权力机构操纵发行</li>
<li>任何人都能够用一串符号或者单词来保存财富，抵御通胀，并且能够在全世界范围内使用</li>
<li>价值能够在全世界自由联通，加强了全球人民间的经济联系</li>
<li>第一种<strong>公正客观的超主权</strong>自由货币</li>
<li>做到了在<strong>无中心</strong>管理状态下行动的统一</li>
<li>因为没有权力中心，也没有管理中心，在比特币的系统中，法治真正代替了人治，在这个系统中，即使是最高统治者，也必须严格遵守规则，服从人民的共识。</li>
</ol>
<img src="https://pic.downk.cc/item/5fa53cf51cd1bbb86bb18b2a.png" style="zoom: 50%;">

<center>比特币生态圈</center>



<h2 id="二-比特币与支付宝"><a href="#二-比特币与支付宝" class="headerlink" title="二 比特币与支付宝"></a>二 比特币与支付宝</h2><p>​    想象一下使用支付宝时，我们在转账时会先扫对方的二维码，或者输入对方账号，填好付款金额后，再通过密码或者刷脸等方式来验证身份，支付宝在确认身份无误后，这笔支付就完成了。</p>
<p>​    但是，在这个过程中，并没有实物货币的转移，只不过是我们发出了付款信息，而后支付宝确认身份后修改了账本就完事了。并且支付宝保证了账本公正可靠，不会消失，不会被篡改，用户只能使用密码进行对应操作，确保只有用户自己确认授权，支付才能产生。</p>
<p>​    所以，这整个过程，仅需要满足这两点即可：</p>
<ol>
<li><p><strong>有一个公正可靠、无法篡改、记录着各个账户资金往来的账本</strong></p>
</li>
<li><p><strong>仅有用户自己授权才能支付，付款收款及往账户里存钱等（在这里看来实际上根本不需要实物货币orz）</strong></p>
<p>而比特币的付款与支付宝很像，用户只需要扫一下对方比特币的地址，或者输入地址，再输入比特币的数额进行转账就行。</p>
</li>
</ol>
<img src="https://i.loli.net/2020/11/06/OMakE1ProlKBsjm.png" alt="中心式.png" style="zoom: 67%;">

<center>集中式与分布式记账网络</center>

<p>​    <strong>区别在于：</strong></p>
<table>
<thead>
<tr>
<th>比特币</th>
<th align="center">每隔一段时间后，账单就会被某一记账者汇集到一起打包，接到之前的账本上，账本即区块</th>
</tr>
</thead>
<tbody><tr>
<td>支付宝</td>
<td align="center">公司运营，用户之间收付款都是由支付宝公司来记账的</td>
</tr>
</tbody></table>
<h2 id="三-比特币的运作与发行"><a href="#三-比特币的运作与发行" class="headerlink" title="三 比特币的运作与发行"></a>三 比特币的运作与发行</h2><h3 id="※-3-1-运作原理"><a href="#※-3-1-运作原理" class="headerlink" title="※ 3.1 运作原理"></a>※ 3.1 运作原理</h3><blockquote>
<p><strong>比特币是一个价值传输网络，参与比特币系统运作的人（包括用户），就是网络中的一个个节点，节点彼此等权，没有中心，相互之间连接完全自由，各自保存着完全一致的比特币账本，运行着遵循相同规则的比特币秩序。任何人都可以加入比特币网络，新加入比特币网络的节点，向原有的节点要一份比特币账本。</strong></p>
</blockquote>
<p>如果用比特币付款，使用者需要向比特币网络广播付款信息（“广播”指比特币网络中多个节点发送付款信息），而收到信息的节点验证网络会继续广播，一传十，十传百，付款信息由此会传遍全网，最后会被某一位记账着记入区块链的账本当中。</p>
<img src="https://i.loli.net/2020/11/06/L5kdVmXIyutSw9W.jpg" alt="Bitcoin广播.jpg" style="zoom: 67%;">

<p>问题来了，<strong>为什么会有人来记比特币的账呢？如果谁都可以记账，那么以谁记得账为主呢？并且在这个过程中如何确保账本的真实性呢及比特币又是怎么发行出来的呢？</strong></p>
<h3 id="3-2-谁来记账"><a href="#3-2-谁来记账" class="headerlink" title="3.2 谁来记账"></a>3.2 谁来记账</h3><p>比特币规定，记账者是有奖励的，一部分奖励是<strong>账单中用户出的手续费</strong>，手续费也是以比特币支付的，因为手续费由客户自己定，可高可低，如果给的高，记账者就倾向于先记这笔手续高的帐。而另一部分的奖励则是<strong>区块的奖励</strong>，每打包一定的区块，就会获得一定的区块奖励。</p>
<h4 id="3-2-1-区块奖励"><a href="#3-2-1-区块奖励" class="headerlink" title="3.2.1 区块奖励"></a>3.2.1 区块奖励</h4><p>按照比特币的规则，假设区块奖励最初为50个比特币，每出210000个区块后，奖励减半，差不多会每四年减半一次。<strong>区块奖励一方面调动了大家去记账，另一方面也完成了比特币的发行。</strong>因此，按照上述的规则，如果通过这个式子来计算比特币的总量，就是<code>210000*50*(1+1/2+1/4+...)</code>，即总共有21000000个。<strong>而区块奖励和手续费是记账者按照比特币的规则自己记给自己的。</strong></p>
<p>这么丰厚的奖励，大家肯定都会抢着去记账，那么在这种情况下，以谁的账本为准呢？</p>
<h3 id="3-3-基准账本"><a href="#3-3-基准账本" class="headerlink" title="3.3 基准账本"></a>3.3 基准账本</h3><p><strong>比特币中有个最长连原则，即谁的区块链账本最长，就会以谁的账本为准。因为制造区块需要进行大量的运算，所以最长链实际上就是凝聚着最大工作量的链。</strong></p>
<blockquote>
<p>可以说明，<strong>最长链也就是最新的账本，记录着最多的账单</strong></p>
</blockquote>
<p>记账者会把账单收集起来（记账者会先验证账单真伪，来去验证付款者有没有足够的币进行支付），而后打包成一个区块，这个区块由<strong>区块头</strong>和<strong>区块体</strong>组成，记账者换上不同的随机数，对区块头进行哈希运算，得到区块头的哈希值后。<strong>因为算出的哈希值是由随机数生成的，在比特币的规则里，谁先能试出小于难度目标的哈希值，谁就能够把其算出的哈希值所对应的区块，加在区块链上，再广播给别人。</strong>这个时候，这个记账者的链就更长了，在大家验证了他的账单没有错误后，就会以他的区块账本作为基准，并继续广播该区块至全网。</p>
<blockquote>
<p>表明以该区块为准的方式，就是将该区块头的哈希值纳入到自己要计算的下一个区块头中。</p>
</blockquote>
<img src="https://pic.downk.cc/item/5fa53da21cd1bbb86bb1adda.png" style="zoom: 50%;">

<center>区块链数据结构</center>

<h4 id="3-3-1-区块头与区块体的关系"><a href="#3-3-1-区块头与区块体的关系" class="headerlink" title="3.3.1 区块头与区块体的关系"></a>3.3.1 区块头与区块体的关系</h4><ul>
<li><p><strong>区块体：</strong>记录了具体的账单，包括记账者自己所得区块奖励和手续费的账单。</p>
</li>
<li><p><strong>区块头：</strong>相当于对应区块的身份信息，里面有版本号、上一个区块头的哈希值、时间戳、难度目标，以及随机数，同时还有一个<strong>Merkle树根哈希值</strong>，<strong>Merkle树根哈希值</strong>是由区块体里的账单经过一系列的哈希运算求出来的，其能相当于区块体里那些账单的摘要信息，<strong>只要账单稍有变化，Merkle树根的哈希值就会大不相同；同样，只要区块头稍有变化，区块头的哈希值也会大不相同</strong></p>
</li>
<li><p><strong>总结：</strong>可以看到，区块通过Merkle树根哈希值，将区块体和区块头紧密联系在了一起，账单无法篡改；而区块头的哈希值前后衔接，又能保证了区块链环环相扣，无法篡改。</p>
</li>
</ul>
<img src="https://pic.downk.cc/item/5fa53a6c1cd1bbb86bb0edbb.png" style="zoom: 50%;">



<h4 id="3-3-2-哈希运算与哈希值"><a href="#3-3-2-哈希运算与哈希值" class="headerlink" title="3.3.2 哈希运算与哈希值"></a>3.3.2 哈希运算与哈希值</h4><p>你可能会问到，为什么要使用哈希运算来代表这些账单呢，并且为什么账单变化后，其哈希值就会变化呢？</p>
<p>首先，我们先来介绍下什么是哈希算法：</p>
<h5 id="①-哈希算法"><a href="#①-哈希算法" class="headerlink" title="① 哈希算法"></a>① 哈希算法</h5><p>​    哈希算法又被称为摘要算法，输入任何的数据，经过哈希运算后，都会得到一个固定长度的输出值，我们将其作为该输入数据的哈希值，<strong>而特定的输入数据它的哈希值是唯一并且确定的。</strong></p>
<blockquote>
<p>为什么呢？百度搜索哈希运算了解下哈希与散列之间的关系吧~</p>
</blockquote>
<h5 id="②-哈希运算的特点"><a href="#②-哈希运算的特点" class="headerlink" title="② 哈希运算的特点"></a>② 哈希运算的特点</h5><ol>
<li>哈希运算的结果，效果与生成随机数差不多，但是只要你的输入数据有一点点变动，其对应的哈希值都会发生变化。</li>
<li>哈希运算不可逆，输入数据后能很快算出它的哈希值，但是给出哈希值，没有办法反推它的输入数据<strong>【哈希冲突】</strong>，而这在逻辑上也是行不通的，因为你输入的数据是无限的，但是哈希值是有限的，<strong>而一个哈希值却有可能对应着多个输入数据</strong>【依旧是散列函数的锅orz】</li>
</ol>
<h5 id="③-比特币中的哈希运算"><a href="#③-比特币中的哈希运算" class="headerlink" title="③ 比特币中的哈希运算"></a>③ 比特币中的哈希运算</h5><p>哈希运算和哈希值有多种类型，在争夺比特币记账权时算的哈希值是<code>256位</code>的二进制数。那么按照比特币的规则，区块头的哈希值必须小于难度目标，所以记账者在求解哈希值是要算的最大可能数为<code>2^256</code><strong>【地址值的每一位为0或1】</strong>，而平均试验的次数则为<code>2^256/(难度目标)</code>。</p>
<p><img src="https://pic.downk.cc/item/5fa53a6c1cd1bbb86bb0edbe.png"></p>
<center>哈希加密示意图</center>

<p>由二进制的运算我们知道，算出的哈希值如果前面的0越多，则说明数越小，那么我们在计算的时候让勤勉若干数位为0不就好了吗？道理很清晰，但是如果能这么的轻易算出来，也就不会有当下的“矿工难😐”了。</p>
<p>前面我们说过，算出哈希值就像是算出随机数一样，以前面100位都是0为例，一次试出前面100位都为0的概率为<code>(1/2)^100</code>，如果想增大试出来的概率就只能进行更多的哈希运算。注意，因为全世界的矿工如果想获得比特币的奖励就都会加入到挖矿的网络中，共同收集账单，打包成区块，进行哈希运算，那么全世界则总共需要计算<code>2^100</code>次才能有一次机会</p>
<blockquote>
<p>不同人打包的区块也会存在差异，而因为打包的区块中的账单不一样，会导致生成的Merkle哈希值也不同，即使不同的人输入的随机数是一样的，可是经过散列函数运算得到的哈希值也会存在差异。这样就避免了大家出现重复计算的情况，<strong>也保证全世界平均计算2^100次后，才能算出一位前100位都为0的哈希值</strong></p>
</blockquote>
<p>而谁先算出来这一个哈希值，他就会立马将该哈希值对应的区块广播出去，在全网一起接收到这个区块，确认无误后，就会继续广播这个区块，并以此为准，继续收集账单运算，去争夺下一个区块的记账权。</p>
<p><strong>区块链就这样在大家的齐心协力下不断延长，全网的节点都有一份相同并且实时更新的区块链账本。这其中的验证、广播、记账等过程，都是由各个节点的比特币规则自动执行的。</strong></p>
<h3 id="3-4-挖矿⛏"><a href="#3-4-挖矿⛏" class="headerlink" title="3.4 挖矿⛏"></a>3.4 挖矿⛏</h3><blockquote>
<p>前面说的关于试出哈希值并获得记账权和比特币奖励的行为，江湖上称其为<strong>挖矿</strong>，而专门进行这种计算的机器，则被称为<strong>“矿机”</strong>，如果你参与到挖矿中，你就是<strong>矿工</strong>，而在记账过程中所需的手续费，就是<strong>矿工费</strong></p>
</blockquote>
<p>那么，至于在求解相关哈希值的难度目标是多少，则是由比特币的程序在每隔2016个区块，就会自动调节一次的，其调节是根据这2016个区块的出块速度和之前的难度目标来去反推全网的算力，再根据全网算力来设置一个合适的难度目标，让全网每<strong>平均10分钟</strong>能出一个块。</p>
<p>这种出块方式的制定，说明了<strong>谁的算力强，谁能在单位时间内计算次数多，谁就能更大的概率试出符合要求的哈希值，获得记账权和比特币的奖励。这种共识机制被称为工作量整明（PoW）</strong>。而在工作量证明的机制下，挖矿需要耗费巨大的电力。</p>
<p><img src="https://pic.downk.cc/item/5fa538de1cd1bbb86bb09a16.jpg"></p>
<p>基于此，全世界的矿工都会去寻找便宜又大的电力，修建矿场，制造矿机，导致了全网目前的算力是十分高的。而由于全网的算力很高，挖矿的难度很大，单人行动压根不可能挖的到矿，于是大家把算力集中到一个个矿池中，矿池更容易挖到矿，最后再按照各自贡献的算力大小相应分配收益。</p>
<img src="https://pic.downk.cc/item/5fa53bec1cd1bbb86bb14db8.jpg" style="zoom:67%;">

<center>工作量证明机制示意图</center>

<p>可以看出，<strong>比特币的区块链账本是传遍全网、保存于全网的，并且都经过全网验证过的，而区块链通过Merkle树根的哈希值和区块头的哈希值环环相扣，累积了巨大的工作量，账本真实可靠，无法篡改且无法销毁。因此比特币在流通时用于转账或支付的条件下，只需要发出一条信息就可以了，不需要经过任何的中间机构，便可以在全世界流通。</strong></p>
<blockquote>
<p><strong>提示</strong>：听起来让人兴奋，但是目前能去试出正确的哈希值是十分困难的，还是以哈希值前100位为0作为例子，算出正确的哈希值需要试上2^100次才能有一次机会【所以单人矿工很难成功】。</p>
<p>而正是因为即使全世界的超级计算机算力往上翻许多倍，一起算上若干年，也不可能把这256位哈希值算全，由此保证了比特币的安全性。</p>
</blockquote>
<h2 id="四-比特币的数字签名与安全问题"><a href="#四-比特币的数字签名与安全问题" class="headerlink" title="四 比特币的数字签名与安全问题"></a>四 比特币的数字签名与安全问题</h2><blockquote>
<p>我们在使用支付宝的时候，输入密码或其他方式便能轻松转账；那么对于比特币来说，怎么才能证明支付信息是由你发出的，没有被篡改过的呢？换句话说，就是怎么能确保你的币由你一人控制，这就涉及到了数字签名的原理。</p>
</blockquote>
<h3 id="4-1-比特币账户"><a href="#4-1-比特币账户" class="headerlink" title="4.1 比特币账户"></a>4.1 比特币账户</h3><p><strong>与银行开户不同，比特币的账户不需要申请注册，是随机生成的。</strong>首先，我们可以随机生成一个私钥【也为256位二进制数】。可以假想成抛<code>256</code>次硬币，正面<code>1</code>，反面<code>0</code>，这样也能确定你的账户私钥【bushi🙃】。然后再用椭圆曲线数字签名算法<strong>【ECDSA】</strong>对私钥进行运算，生成公钥，之后再对公钥进行哈希运算，就得到了地址。私钥生成公钥的过程也是不可逆的，从公钥无法反推私钥，也可以试试，最多<code>2^256</code>次（小声）。<strong>用椭圆曲线数字签名算法生成的公钥可以配合私钥，进行非对称加密。</strong></p>
<img src="https://pic.downk.cc/item/5fa53a1a1cd1bbb86bb0dc38.png" style="zoom: 33%;">

<center>数字签名示意图</center>

<h3 id="4-2-非对称加密"><a href="#4-2-非对称加密" class="headerlink" title="4.2 非对称加密"></a>4.2 非对称加密</h3><h4 id="4-2-1-对称加密"><a href="#4-2-1-对称加密" class="headerlink" title="4.2.1 对称加密"></a>4.2.1 对称加密</h4><p>对称加密中，加密解密的密钥都是一样的，比如说有一条信息为1234567，我们用密钥9对其进行加密，<code>1234567*9 = 11111103</code>,而<code>11111103/9 = 1234567</code>就得到了密文【实际上是比这个复杂的😶】但是在非对称加密中，加密解密的密钥是互不相同的。</p>
<h4 id="4-2-2-非对称加密"><a href="#4-2-2-非对称加密" class="headerlink" title="4.2.2 非对称加密"></a>4.2.2 非对称加密</h4><p>比特币里，私钥用来加密信息，而公钥用来解密信息。<strong>比特币里没有人的概念，只有地址的概念，所提到的你拥有多少币实际上说的是你的地址上有多少币。</strong>而只有你的私钥才能够控制你的币，因此在比特币中，公钥和地址都可以公开，但是私钥是绝对不可以的。</p>
<p><img src="https://pic.downk.cc/item/5fa53b1c1cd1bbb86bb11427.png"></p>
<center>非对称加密RSA算法简化示意图</center>

<h4 id="4-2-3-举个栗子"><a href="#4-2-3-举个栗子" class="headerlink" title="4.2.3 举个栗子"></a>4.2.3 举个栗子</h4><p>小明给小强一个比特币，小明的比特币地址为A，小强的比特币地址为B，小明要将<strong>“A地址给B地址一个比特币”</strong>这条账单进行哈希运算，得到的哈希值再用A地址的私钥加密，加密后得到的<strong>“A地址给B地址一个比特币”</strong>和小明的公钥一起广播出去。而收到该信息的人会进行检查，计算公钥得到地址，判断该信息中公钥和地址是否对应，再用公钥把密文解密为哈希值，同时也对账单进行哈希运算，得到另一个哈希值。这个时候比较一下两个哈希值，如果哈希值相同，则能说明这条信息确实是地址的主人发出来的，没有经过篡改的。</p>
<p><strong>这咯有一个转账哈希值的图片</strong></p>
<p>如果有人伪造了“A地址给B地址一个比特币”的消息，首先，伪造信息里A的公钥不能变，因为公钥可以推算出地址，如果公钥变了推算出来的地址就会和A不同，别人立刻就能发现这是假的消息。其次，因为伪造者没有A地址的私钥，因此他伪造的账单的哈希值的密文肯定和真是密文是不同的，如果这个时候别人用公钥解密，解密出的哈希值也一定不同于用A账单算出来哈希值，那么这条消息就十分不真实。</p>
<p>还有一种情况是信息内容遭到了篡改，比如把信息篡改成了“A地址给B地址<strong>十个</strong>比特币”，这种情况下，账单发生了变化，而公钥和原账单的哈希值密文都没有变，分析一遍，也容易发现篡改的信息会导致两个哈希值存在差异。</p>
<p>可以看出，<strong>私钥就像地址对应的一支独一无二的签字笔，能签出独一无二的签名，来代表你是对应地址的主人，我们也把这个过程称为数字签名。</strong>只有你用私钥签名了，这个地址的付款信息才会被别人接受。而如果你丢失了私钥，尽管你的区块链账本依旧记录你的地址有多少比特币，你也不能使用它。<strong>如果别人知道了你的私钥，他就能够转走你地址上的币。</strong>比特币交易中公平点也体现在这，它只认你的地址不认你的人，所以私钥的安全性需要十分看重【历史上有位男子中了比特币大奖，开心地把他的获奖的私钥展示给直播前的大家，一刹那，这个账户有的比特币全部被转走了🤣】</p>
<h3 id="4-3-比特币“钱包“"><a href="#4-3-比特币“钱包“" class="headerlink" title="4.3 比特币“钱包“"></a>4.3 比特币“钱包“</h3><p>私钥不像登陆时需要输入的密码，它本身是可以完全不触网的，完全可以在离线状态下在付款信息上签名【这个数字签名就是我们说的<strong>私钥加密付款信息的哈希值</strong>】，然后再把付款信息和签名信息发送到网上广播即可，别人也没有办法从你的签名反推私钥【原理详情了解<strong>椭圆曲线数字签名算法</strong>】。</p>
<p><strong>比特币的“钱包”</strong>，存的不是币而是私钥，所谓的<strong>”冷钱包“</strong>就是不联网的钱包，能够有效防御黑客盗取私钥。这个过程中起到实际作用是授权调用私钥进行签名，但并非是私钥本身。</p>
<h3 id="4-4-地址信息的构成"><a href="#4-4-地址信息的构成" class="headerlink" title="4.4 地址信息的构成"></a>4.4 地址信息的构成</h3><p>因为地址之类的信息用二进制表示的话会非常长，因此在比特币中采用了Base58的编码方式，即将二进制数字换成58进制数表示，所以我们通常看到的地址是一串大小写字母和数字的组合。</p>
<img src="https://pic.downk.cc/item/5fa542ee1cd1bbb86bb2c32f.png" style="zoom:50%;">

<center>区块链运行机制</center>

<p>为了便于记忆及管理私钥，开发者们又设计出了助记词，助记词一般是12个单词，出自有2048个常见单词的词库，每个助记词对应这一个随机生成的种子，其能够作为种子的一种易于记忆的形式。种子能够生成一个主私钥，主私钥可以通过确定的、不可逆性的算法，再生成多个币种的子私钥，子私钥又可以继续生成孙私钥…通过这种方式，用一组助记词就能够统一管理多个币种的多个私钥，省去了很多麻烦，这样的加密货币的钱包，我们将其称之为<strong>HD钱包（分层确定性钱包）。</strong></p>
<blockquote>
<p>助记词虽然只有12个词，但是2048^12 ≈ 5.4*(10^39)，希望能随机输入助记词试出一个有币的地址，概率小到几乎不可能。</p>
</blockquote>
<h2 id="五-比特币的分叉与演变"><a href="#五-比特币的分叉与演变" class="headerlink" title="五 比特币的分叉与演变"></a>五 比特币的分叉与演变</h2><h3 id="5-1-最长链原则"><a href="#5-1-最长链原则" class="headerlink" title="5.1 最长链原则"></a>5.1 最长链原则</h3><blockquote>
<p><strong>在最长链原则下，比特币网络中的节点来去自由，不需要了解其他节点的状态，也不需要任何仲裁机构或者管理中心，网络出现延迟或者暂时中断也没有关系。只需要遵循最长链原则，就能够让全世界对你的账本达成共识。</strong></p>
<p><strong>因为最长链可以说是凝聚着全世间所有算力的巨大工作量，并且还在不断地延长，想要重新制造出一条最长链代替原链来修改信息，困难且不可能【算力≥51%当我没说】。这也就维护了区块链的不可篡改性</strong></p>
<p><strong>根据博弈关系，节点也会接受最长链，竞相地去延长最长链，尽力广播最长链上地区块。所以比特币系统从第一个区块挖出开始，就再以难以停止，会一直自发运行下去，每时每刻记录着全球用户的账单。</strong></p>
</blockquote>
<p>以下依旧以A、B为例</p>
<h3 id="5-2-AB同时挖出"><a href="#5-2-AB同时挖出" class="headerlink" title="5.2 AB同时挖出"></a>5.2 AB同时挖出</h3><p>这时A、B的区块链账本都是一样长，有人先收到A的区块就会先以A链为准，同理，先收到B的区块会先以B链为准，可以看到A、B的区块链都有人坚持，这个时候区块链就会短暂的分叉成两条一样长的链，直到有一方的队伍又挖出了新块，这个时候另一方看到对方的链更长了，就会马上转而去支持对方，以对方的账本为准继续挖矿。这样就能够保证有一条最长的链作为大家公认的账本。</p>
<blockquote>
<p>只要全网50％以上的算力是诚实的，诚实的算力就能生成一条最长链，可以放心地以这条链为准。</p>
</blockquote>
<h3 id="5-3-”双花“"><a href="#5-3-”双花“" class="headerlink" title="5.3 ”双花“"></a>5.3 ”双花“</h3><p>欸，那如果有人掌握了大于50%的算力该怎么办呢？那他不就可以独自生成最长的链，然后胡作非为了嘛？</p>
<p>实际上，因为区块链账本是要去接收各节点验证的，作恶者如果违反规则、作假账，他的账本就会遭到一致的拒绝，更不会被继续传播，最长链原则是建立在真实基础上的。因为作恶者没有别人的私钥、花不了别人的钱，也破坏不了比特币的规则，<strong>那么他能干的坏事，只有”双花“啦~</strong></p>
<p>双花是怎么进行的呢？假如说作恶者有10个比特币，他把这10个比特币给商家，买到了商品，那么这个付款信息就会被记录到区块链里。<strong>正常情况下，在同一条链上，是不可能进行双花的，因为花出去的比特币会被记录在区块链上，用过就没有了。</strong>但是，作恶者他拥有全网过半的算力，那么他在记录他付款信息的区块前面，重新开始挖矿，就能够制造出一条更长的链，而这条链他没有违反比特币规则或者做”假账“，所以大家转而会以这条链作为基准（<strong>比特币的程序会根据最长链原则自动切换账本</strong>）。但是在这条链里，作恶者略去了之前的付款记录，把刚才花掉的10个比特币又花了一次，或者转移到自己的另一个地址上，通过这种方式，他原来的付款记录就失效了，那么商家就损失了商品并且也没拿到钱。</p>
<p><img src="https://pic.downk.cc/item/5fa5435e1cd1bbb86bb2dce7.jpg"></p>
<p><strong>作恶者也能够先制造出双花攻击的长链但不广播出去，同时在原链上付款买东西，等到拿到商品之后再放出攻击链逆转原链，这样就能撤销自己的付款。</strong></p>
<p>双花也有可能在作恶者算力不到50％的情况下发生，作恶者运气好的话，有可能多出几个区块，在短时间内领先原链，但是这样做，一旦跑不过原链，自己挖出的区块就没有人承认，白费算力和电力。【从这里可以看出，双花大概率赔了夫人又折兵，作恶者被发现后一定会遭到一致的谴责和惩罚的⛔】</p>
<h4 id="5-3-1-其他人的链呢"><a href="#5-3-1-其他人的链呢" class="headerlink" title="5.3.1 其他人的链呢"></a>5.3.1 其他人的链呢</h4><p>双花只能撤销掉作恶者自己的付款，不会破坏整个比特币系统，因为如果作恶者在他制造出的最长链里，删掉了原链上其他人的账单，也只需要把这些账单重新打包进区块即可。当网络出现严重延迟或者中断时，区块可能同步不及时，通信不畅的节点各自挖矿为政，这样区块链就有可能会发生分叉。如果作恶者发出两笔相冲突的双花账单后，也有可能被不同的节点打包造成双花，当这些账单被打包进区块后，后续确认的区块越多，双花想要逆转该链就更加困难。所以当用户在进行大额交易时，收款方一般需要多等几个区块才能确认。但是，如果是小额支付（如向朋友转账），不需要等到账单被打包进区块，等上几秒让账单传遍全网就可以了。<strong>正常情况下，如果节点收到两笔相冲突的双花账单，那么节点会打包先收到的账单。</strong></p>
<h4 id="5-3-2-现实原则"><a href="#5-3-2-现实原则" class="headerlink" title="5.3.2 现实原则"></a>5.3.2 现实原则</h4><p>比特币允许接受与原链上账单有冲突的双花攻击链，这是因为现实环境是非常复杂的，如果网络可能出现延迟或中断，不同节点获取信息的先后顺序可能不同，比如A收到的攻击链，可能对于B来说就是原链，<strong>如果拒绝攻击链，可能造成区块链分裂而无法统一，甚至作恶者还能够利用网络延迟中断，故意发出两笔有冲突的双花账单，而一旦账单分别被不同的节点打包时，节点互不接受对方的账单，作恶者就可以恶意制造分裂。</strong></p>
<p>而只要以最长链为准的情况下，节点不用知道其他节点的账本情况，不需要管其他节点的工作状态，也不需要任何仲裁机构，只需要做好自己的帐，遵从最长链原则，全网账本就能够自动达成统一，网络延迟中断也只可能导致新挖出的少数区块同步不及时，而之前的账本还是会保持一致。</p>
<blockquote>
<p><strong>这也是比特币设计上的亮点，通过最长链原则，使全世界互不相识的人，在复杂的环境里齐心协力，达成了一致。</strong></p>
</blockquote>
<h3 id="5-4-BCH（比特币现金）与BTC（比特币）"><a href="#5-4-BCH（比特币现金）与BTC（比特币）" class="headerlink" title="5.4 BCH（比特币现金）与BTC（比特币）"></a>5.4 BCH（比特币现金）与BTC（比特币）</h3><p>如前面所说，<strong>如果不同的人对记账有不同做法，就会引起区块链的分叉，分叉前的账本是完全一样的，但分叉后的账本就会随着记账方式的变化而变化。</strong>如果只是因为同时出块造成分叉，在遵循最长链原则的情况下，丢弃一条链，保留一条链，这样就会产生一些难以调和的矛盾，双方无法达成共识，于是各记各的帐，这时候就会产生两条并行发展的两条链，而比特币也就会分裂成了两个版本。<strong>BHC就是这么被分出来的</strong></p>
<ul>
<li><strong>BCH</strong></li>
</ul>
<blockquote>
<p>致力于实现白皮书中”电子现金“的够项，推进零确认支付的发展，试图在BCH上引入更多的拓展功能</p>
</blockquote>
<ul>
<li><strong>BTC</strong></li>
</ul>
<blockquote>
<p>BTC转型为”数字黄金“，因此很多人认为BCH才是真正的比特币</p>
</blockquote>
<p><strong>但这些都不会影响比特币的核心规则，这就是共识的力量</strong></p>
<h3 id="5-5-Core与大区块派"><a href="#5-5-Core与大区块派" class="headerlink" title="5.5 Core与大区块派"></a>5.5 Core与大区块派</h3><blockquote>
<p>比特币起初区块上限为1M，随着用户增多，1M明显不够用了，那么如何扩容呢？</p>
</blockquote>
<h4 id="Core【接替中本聪继续开发】"><a href="#Core【接替中本聪继续开发】" class="headerlink" title="Core【接替中本聪继续开发】"></a><strong>Core【接替中本聪继续开发】</strong></h4><ul>
<li><strong>隔离见证</strong></li>
</ul>
<blockquote>
<p>把签名信息直接移出区块，间接扩容</p>
</blockquote>
<ul>
<li><strong>闪电网络</strong></li>
</ul>
<blockquote>
<p>相当于在主干道上架桥分流交通压力</p>
</blockquote>
<ul>
<li><strong>Core派坚持1M上限不能改，指责大区块派扩大区块会阻碍个人运行比特币的全节点，这样会影响比特币的去中心化，造成比特币社区分裂</strong></li>
</ul>
<blockquote>
<p><strong>全节点保存着比特币的完整账本，进行验证及广播，是比特币网络运行的基础，有些全节点同时也在挖矿，称为挖矿节点；与全节点相对应的是数量更多的轻节点，轻节点只保存与自己相关的信息，依靠全节点运行，普通用户用的轻量级比特币钱包就是轻节点</strong></p>
</blockquote>
<h4 id="大区块派"><a href="#大区块派" class="headerlink" title="大区块派"></a><strong>大区块派</strong></h4><ul>
<li><strong>扩大区块</strong></li>
</ul>
<blockquote>
<p>相当于直接扩宽道路</p>
</blockquote>
<ul>
<li><strong>大区块派指责Core派违背了中本聪隐退前提出过的直接扩大区块的扩容方案，同时也指责了隔离见证和闪电网络扩容效果差，安全性不好</strong></li>
</ul>
<p>因此，扩大了区块的BCH和BTC分道扬镳，以分叉的方式解决了分歧，而比特币现金原先称为BCC，后更名为BCH。</p>
<h3 id="5-6-比特币的发展"><a href="#5-6-比特币的发展" class="headerlink" title="5.6 比特币的发展"></a>5.6 比特币的发展</h3><p>之后，CSW【澳本聪】提出了一系列的激进主张，称要继续扩大BCH的区块，乃至扩展成无限区块，并且索斯BCH的底层协议，做出符合中本聪愿景的比特币，最终<strong>BSV</strong>又从<strong>BCH</strong>中发展了出来。</p>
<p><strong>分叉是比特币自我演变的途径。</strong>如果比特币社区成员一致改变某规则，比特币就相当于进行了一次升级；而如果大家都不更改规则，比特币就不会发生变化；相对应的如果一部分改变规则，比特币就会发生<strong>交叉</strong>。理论上，只要有算力，分叉就能够随便进行，但如果没人买没人卖，那分叉币就相当于自娱自乐，没有经济价值。<strong>市值就是衡量分叉币认可的指标。</strong></p>
<p><strong>现在比特币的三大分支BTC、BCH、BSV，分别代表了谨慎保守、温和渐进、激进发展三个方面，探索不同的道路，也为比特币保留了更多生命的火种。</strong></p>
<p>谁是对的，谁就能得到更多人的支持，就会有更大的市值，这可能就是区块链的魅力所在。</p>
<blockquote>
<p><strong>行动守规则，遇事要商量，谈不拢咱就分叉，用市值来投票。谁做得好，就能得到更多的支持，市值自然也会上涨。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>学习记录--汉诺塔，快排与数组内逆序</title>
    <url>/2021/03/16/%E6%B1%89%E8%AF%BA%E5%A1%94%EF%BC%8C%E5%BF%AB%E6%8E%92%E4%B8%8E%E6%95%B0%E7%BB%84%E5%86%85%E9%80%86%E5%BA%8F/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="一-汉诺塔问题"><a href="#一-汉诺塔问题" class="headerlink" title="一 汉诺塔问题"></a>一 汉诺塔问题</h1><blockquote>
<p>这里没有用指针，之后再更新指针部分      —11.15</p>
</blockquote>
<p>汉诺塔问题一直困扰了我比较久，总结的规律是，递归方式重点在于分为<strong>初始柱【A】、中转柱【B】及目标柱【C】</strong></p>
<p>那么问题其实就在于它的这个过程要怎么转了，一般过程都是最上面的一个整体（以64个圆盘为例，则把最上方的63块看为整体）<code>A-&gt;C-&gt;B</code><strong>【此时中转柱为C】</strong>而后把最后一个大圆盘<code>A-&gt;C</code><strong>【这里不需要中转柱】</strong>，再接着，以A为中转柱，将B上的圆盘全部转移到C上，即<code>B-&gt;A-&gt;C</code></p>
<blockquote>
<p>注意：以上A、B、C柱子是时刻发生变化的，因为这中间圆盘是一个一个取得，则每次这三类柱子得顺序都会发生变化。但如果从宏观上来看，就是三根柱子得大变化。所以，考场上懵的话想想宏观就能很快敲出来了。</p>
</blockquote>
<p>核心算法为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> a, <span class="keyword">char</span> b, <span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c --&gt; %c\n&quot;</span>, a, c);					<span class="comment">//若只剩下一个了，直接转移就行啦</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    move(n<span class="number">-1</span>, a, c, b);									<span class="comment">//此时初始柱为a（不一定是A）						</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c --&gt; %c\n&quot;</span>, a, c);</span><br><span class="line">    move(n<span class="number">-1</span>, b, a, c);									<span class="comment">//此时初试柱为b（不一定是B）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong>在输出的时候，输出的是a，c柱，是当时得初始柱和目标柱，不是A和C柱嗷嗷</p>
</blockquote>
<h1 id="二-快速排序"><a href="#二-快速排序" class="headerlink" title="二 快速排序"></a>二 快速排序</h1><blockquote>
<p>是一道关于分配牛奶得问题，其实用sort直接就出来了，但是因为一直不会快排，内心虚，就学习了下快排怎么写，发现这个分治法有点意思</p>
</blockquote>
<p>因为一开始看快排很容易懵，那么怎么理解会更快呢，把分治法称为<strong>“挖坑填数+分治”</strong>就快啦~</p>
<h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p>总的来说就是，先找到一个基准点<code>通常为最左边s[l],或者最右边s[r]</code>，如果选取最左边<code>s[l]</code>为基准点，那么最先比较的则是最右端<code>s[r]</code>，如果比<code>s[l]</code>大，则跳到下一个<code>s[--r]</code>，若比它小，则<code>s[r]</code>填补<code>s[l]</code>的坑位，然后<code>++i</code>，将右边的坑位与左边的坑位再进行比较；知道<code>i == j</code>为止</p>
<h2 id="2-2-挖坑填数"><a href="#2-2-挖坑填数" class="headerlink" title="2.2 挖坑填数"></a>2.2 挖坑填数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change_loc</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = s[l], i = l, j = r;</span><br><span class="line">        <span class="comment">/*先右端*/</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j] &gt;= x)&#123;          <span class="comment">//注意这个i&lt;j，容易漏，如果减过头了就麻烦了</span></span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)&#123;                          <span class="comment">//有可能i=j，所以还要加判断</span></span><br><span class="line">            s[i] = s[j];                    <span class="comment">//填数</span></span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*再左端*/</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i] &lt;= x)&#123;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">            s[j] = s[i];</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s[i] = x;                               <span class="comment">//当i=j时，填补完毕，可以退出来了</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i;                               <span class="comment">//返回此时中间点得位置，便于i的左端和右端继续排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-分治"><a href="#2-3-分治" class="headerlink" title="2.3 分治"></a>2.3 分治</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">    	<span class="keyword">int</span> i = quick_sort(s, l, r);		<span class="comment">//找到中间点</span></span><br><span class="line">	    quick_sort(s, l, i<span class="number">-1</span>);				<span class="comment">//先左端</span></span><br><span class="line">    	quick_sort(s, i+<span class="number">1</span>, r);				<span class="comment">//再右端</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h2><blockquote>
<p>如果分两个函数来写不够简洁，将<strong>挖坑填数与分治</strong>总结写成：</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = s[l], i = l, j = r;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="comment">/*先让左边与右边比较*/</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; s[j] &gt;= x)&#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                s[i++] = s[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; s[i] &lt;= x)&#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)&#123;</span><br><span class="line">                s[j--] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s[i] = x;</span><br><span class="line">        quick_sort(s, l, i<span class="number">-1</span>);</span><br><span class="line">        quick_sort(s, i+<span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-补充说明–结构体"><a href="#2-5-补充说明–结构体" class="headerlink" title="2.5 补充说明–结构体"></a>2.5 补充说明–结构体</h2><blockquote>
<p>这里我是用来比较结构体的，但是遇到的问题就是怎么传结构体进去，后面发现了我的定性思维的问题</p>
</blockquote>
<p>我在定义结构体时是这么定义的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;Cow[MAX];</span><br></pre></td></tr></table></figure>

<p>这里问题出在我怎么把一个结构体数组传进去进行比较呢，但这样定义结构体没有普遍性，总的来说就是限制的太死了，换成这样定义就好多了</p>
<p><strong>改进：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;Cow;</span><br><span class="line">Cow cow[MAX];</span><br></pre></td></tr></table></figure>

<p>而后在比较时我传值就可以这样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(Cow c[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br></pre></td></tr></table></figure>

<p>在进行比较时，设置中间变量进行交换时，我就可以把x定义为<code>Cow x = c[l]</code>;这样就不会限制的那么死了。</p>
<p>灵感来源于看别人进行sort排序时传进去的是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">sort(cow, cow+m, cmp);			<span class="comment">//其中cow为数组首地址，m为长度，cmp为比较函数</span></span><br></pre></td></tr></table></figure>

<p>然后发现原版的sort可以传结构体数组的话，说明就是我的问题了，后面我就按照结构体来定义了，而不是结构体数组。</p>
<h1 id="三-数组内逆序"><a href="#三-数组内逆序" class="headerlink" title="三 数组内逆序"></a>三 数组内逆序</h1><p>今天卡到的竟然是数组内逆序，我卡了20多分钟，然后用了一种我从没有用过的方法orz…</p>
<p>具体是这样的，我还是定义为<code>l、r</code>，但是改为了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*设数组定义为ElemType a[MAX]*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_loc</span><span class="params">(ElemType a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"> 	<span class="keyword">if</span>(l&lt;r)&#123;									<span class="comment">/*这个判断容易忘记！*/</span></span><br><span class="line">    	<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">			ElemType tmp = a[l];</span><br><span class="line">    		a[l] = a[r];</span><br><span class="line">    		a[r] = tmp;</span><br><span class="line">    		l++; r--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我觉得这样挺好orz..</p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>学习记录--字符串+线索二叉树构建</title>
    <url>/2021/03/16/%E5%AD%97%E7%AC%A6%E4%B8%B2+%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="一-字符串"><a href="#一-字符串" class="headerlink" title="一 字符串"></a>一 字符串</h2><p>今天的上机有几道题提醒了我可能我关于高精度和字符串掌握程度不熟，所以再来回顾一遍</p>
<h3 id="1-1-高精度存值"><a href="#1-1-高精度存值" class="headerlink" title="1.1 高精度存值"></a>1.1 高精度存值</h3><p>这个使输入一个阶乘的值然后用数组来保存，一开始我的方法是：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=str.length()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)&#123;</span><br><span class="line">    sum += (str[i]-<span class="string">&#x27;0&#x27;</span>)*count;</span><br><span class="line">    count *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题在于：依旧相当于直接输出大的值，改善的点是我能输出多位的值了，思路就是错在输出了</p>
</blockquote>
<p>所以，正确的方法应该是用数组去存它们的一个个位的值，这个时候我的问题在于怎么一位一位</p>
<p>地把数存进去，使用的算法是这样的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;			<span class="comment">/*n!*/</span></span><br><span class="line">    <span class="keyword">int</span> a[MAX], tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">cin</span> = <span class="number">0</span>;			<span class="comment">/*每一轮重置一次进位数*/</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;MAX; ++j)&#123;</span><br><span class="line">            tmp = a[j]+<span class="built_in">cin</span>;		<span class="comment">/*把原有的数加上进位*/</span></span><br><span class="line">            <span class="built_in">cin</span> = a[j]/<span class="number">10</span>;</span><br><span class="line">            a[j] = tmp%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i, sum = <span class="number">0</span>, count = <span class="number">1</span>;				<span class="comment">/*记录最大位在哪*/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; MAX<span class="number">-1</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i<span class="number">-1</span>; j&gt;=<span class="number">0</span>; --j)&#123;</span><br><span class="line">        sum += a[j]*count;</span><br><span class="line">        count *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-字符串的一些函数操作"><a href="#1-2-字符串的一些函数操作" class="headerlink" title="1.2 字符串的一些函数操作"></a>1.2 字符串的一些函数操作</h3><h4 id="1-2-1-含有空格的字符串输入"><a href="#1-2-1-含有空格的字符串输入" class="headerlink" title="1.2.1 含有空格的字符串输入"></a>1.2.1 含有空格的字符串输入</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">getline(<span class="built_in">cin</span>, str);</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-字符串的删除与拼接"><a href="#1-2-2-字符串的删除与拼接" class="headerlink" title="1.2.2 字符串的删除与拼接"></a>1.2.2 字符串的删除与拼接</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1, s2;		<span class="comment">//s1原串，s2子串</span></span><br><span class="line"><span class="keyword">while</span>(s1.find(s2) &lt; s1.length())&#123;</span><br><span class="line">	s1 = s.erase(s1.find(s2), s2.length());	<span class="comment">/*erase函数(首地址，删除的长度)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-字符串的公共前缀"><a href="#1-2-3-字符串的公共前缀" class="headerlink" title="1.2.3 字符串的公共前缀"></a>1.2.3 字符串的公共前缀</h4><p>最大问题在输入怎么输入，一般要求输入在一行内如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">global glossory</span><br></pre></td></tr></table></figure>

<p>我是这么输入的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s2;</span><br><span class="line"><span class="comment">/*这样也能达成上述输入的效果，然后处理的时候视为两个字符串处理就好啦~*/</span></span><br></pre></td></tr></table></figure>

<h2 id="二-线索二叉树"><a href="#二-线索二叉树" class="headerlink" title="二 线索二叉树"></a>二 线索二叉树</h2><blockquote>
<p>这个是复习的时候发现没听懂，所以记一下防止期末又忘了</p>
</blockquote>
<p>二叉树的核心在于<strong>线索化</strong>，其作用在于把一颗树转化为双向链表，这样能够判断其前缀和后缀是什么。</p>
<p>其结构体定义为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span>&#123;</span></span><br><span class="line">    ElemType data;							<span class="comment">//结点数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiThrNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span>		<span class="comment">//左右孩子的指针</span></span><br><span class="line">    <span class="keyword">int</span> ltag, rtag;							<span class="comment">//左右孩子的标志</span></span><br><span class="line">&#125;BiThrNode, *BiThrTree;</span><br></pre></td></tr></table></figure>

<p>在我的理解中，难点在于ltag（rtag）是用来做什么的，因为这个我看了很多书都没能理解，在b站上找了懒猫老师的课，听了一边下来感觉大概清楚线索二叉树的线索化是怎么实现的。</p>
<blockquote>
<p>以下仅基于自己的理解，给自己复习的，如果有朋友看，可能你会看不懂qwq</p>
</blockquote>
<h3 id="①-空结点个数"><a href="#①-空结点个数" class="headerlink" title="① 空结点个数"></a>① 空结点个数</h3><p>一开始我们会按照前序、中序后者后序的组合（不能是中序+后序）建立好了一棵二叉树，但是我们在判断一个结点是否有子树时，会设置它的<code>lchild、rchild</code>为<code>NULL</code>，这样会使很多结点浪费掉了，做个计算</p>
<p>设这颗二叉树结点个数为<code>n</code>，它有<code>n-1</code>条边，那么空结点数一共为<br>$$<br>2*n-(n-1) = n+1<br>$$<br>怎么理解呢？一个结点能引出两条边，而树的边两端真正连有结点的一共为<code>n-1</code>条，所以拿<code>2*n-(n-1)</code>就是空结点的个数<br>从<code>n+1</code>看来这个浪费的程度有点大，那么如何利用他们呢？</p>
<h3 id="②-前缀、后缀"><a href="#②-前缀、后缀" class="headerlink" title="② 前缀、后缀"></a>② 前缀、后缀</h3><p>因为我们在建树的过程中，是把原有的顺序拆开的，比如说前序为<code>ABCDEF</code>,中序为<code>CBDAEF</code>,这样搭建出来的树<code>A</code>为根结点，其左孩子为<code>B</code> ，右孩子为 <code>E</code>，但是在中序遍历中，其前缀不为B，后缀为E，也就说明A两端是有子结点的，一般这种情况我们设A的<code>ltag = 0, rtag = 0</code>，表示其有左右孩子，但不一定为其前缀后者后缀形式。</p>
<p>相反的，我们那这棵树的<code>C</code>作为另一种表示，C没有前缀，C的后缀为B，但我们知道，它没有左孩子与右孩子，这个时候我们把它的<code>lchild、rchild</code>指向其前驱和后继。所以在这里我们设置其<code>ltag = 1, rtag = 1</code>，表示其没有左右孩子，这时它的左右孩子的地址指向的是其在某种遍历方式里的前驱和后继。</p>
<p>所以<code>ltag、rtag</code>可以看作是一种判断符，分为<code>1/0</code>的情况</p>
<h3 id="₯③-保存状态结点–pre"><a href="#₯③-保存状态结点–pre" class="headerlink" title="₯③ 保存状态结点–pre"></a>₯③ 保存状态结点–pre</h3><p>那么如何保存其左右结点呢？</p>
<p>我们先来看整个遍历的代码吧，这个是实现创建线索二叉树【中序遍历】的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BiThrTree pre;			<span class="comment">//设置静态变量，让pre在每一次遍历中都能察觉到</span></span><br><span class="line">	<span class="keyword">if</span>(p == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">	InThreding(p-&gt;lchild);			<span class="comment">//先递归到左子树最低点</span></span><br><span class="line">	<span class="keyword">if</span>(!p-&gt;lchild)&#123;					<span class="comment">//如果p没有左孩子</span></span><br><span class="line">		p-&gt;ltag = <span class="number">1</span>;				<span class="comment">//标志其为线索化的结点，即其左子树为其前驱，不是其真实的左孩子</span></span><br><span class="line">		p-&gt;lchild = pre;			<span class="comment">//pre为p上一个节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!pre-&gt;rchild)&#123;</span><br><span class="line">		pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">		pre-&gt;rchild = p;			<span class="comment">//开头在创建的过程中pre会经过两遍</span></span><br><span class="line">	&#125;</span><br><span class="line">	pre = p;</span><br><span class="line">	InThreading(p-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这种方式我们就创建好了一颗线索二叉树</p>
<p>最后，还有主要的是如果我的<code>ltag/rtag = 0</code>呢？那打印的时候我怎么保证遍历到的是其前驱呢？解决办法依旧是不断递归，假如要打印的是前驱</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BiThrTree t)</span></span>&#123;</span><br><span class="line">	BiThrTree p = t-&gt;lchild;			<span class="comment">//p指向t的左子树 </span></span><br><span class="line">	<span class="keyword">while</span>(p-&gt;ltag != <span class="number">0</span>)&#123;</span><br><span class="line">		p = p-&gt;lchild;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">while</span>(p-&gt;rtag &amp;&amp; p-&gt;rchild != t)&#123;	<span class="comment">//防止p指向右孩子出错</span></span><br><span class="line">		p = p-&gt;rchild;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	p = p-&gt;rchild;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>一致性算法【入门级】</title>
    <url>/2021/03/16/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E3%80%90%E5%85%A5%E9%97%A8%E7%BA%A7%E3%80%91/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="一致性算法（Paxos、Raft、ZAB）"><a href="#一致性算法（Paxos、Raft、ZAB）" class="headerlink" title="一致性算法（Paxos、Raft、ZAB）"></a>一致性算法（Paxos、Raft、ZAB）</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table>
<thead>
<tr>
<th align="left">一 什么是一致性</th>
<th align="left">1.1 CAP theorem  1.2 一致性模型</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>二 强一致性算法</strong></td>
<td align="left"><strong>2.1 Paxos  2.2 Raft  2.3  ZAB</strong></td>
</tr>
<tr>
<td align="left"><strong>三 项目实践</strong></td>
<td align="left"><strong>3.1 Zookeeper   3.2 etcd</strong></td>
</tr>
</tbody></table>
<h2 id="一-什么是一致性"><a href="#一-什么是一致性" class="headerlink" title="一 什么是一致性"></a>一 什么是一致性</h2><p><img src="https://i.loli.net/2020/11/29/BJrYnVc6iFxmzRb.jpg" alt="什么是一致性.jpg"></p>
<h3 id="1-1-CAP-Theorem"><a href="#1-1-CAP-Theorem" class="headerlink" title="1.1 CAP Theorem"></a>1.1 CAP Theorem</h3><blockquote>
<p>对于一个分布式系统，不能同时满足以下三点：</p>
<ul>
<li>一致性（Consistency）</li>
<li>可用性（Availability）</li>
<li>分区容错性（Partition Tolerance）</li>
</ul>
</blockquote>
<p><img src="https://i.loli.net/2020/11/29/KmxAkNXEdbI2Oc3.jpg" alt="什么是一致性--CAP.jpg"></p>
<h3 id="1-2-一致性模型"><a href="#1-2-一致性模型" class="headerlink" title="1.2 一致性模型"></a><strong>1.2 一致性模型</strong></h3><ul>
<li>弱一致性<ul>
<li>最终一致性【最终你会读到他的】<ul>
<li>DNS（Domain Name System）</li>
<li>Gossip（Cassandra通信协议）</li>
</ul>
</li>
</ul>
</li>
<li><strong>强一致性【本篇重点】</strong><ul>
<li>同步</li>
<li>Paxos</li>
<li>Raft（multi-paxos）</li>
<li>ZAB（multi-paxos）</li>
</ul>
</li>
</ul>
<p>在进行下一步讲解前，咱们先需要明确下问题：</p>
<blockquote>
<p><strong>数据不能存在单点上。</strong></p>
</blockquote>
<p>分布式系统对<strong>fault tolorence</strong>的一般解决方案为<strong>state machine replication【状态机复制】</strong></p>
<blockquote>
<p>状态机复制听起来很玄学，简单理解为：</p>
<p>state machine可以理解为一个函数，它本身有一个初始状态，加入设置为0，此时如果有一个log（input）进来，让它加5，这个为增加状态，此时它的结束状态是5了；那么这个就是一个state machine；</p>
<p>而分布式系统希望往这个log上写日志，如：日志1，我加了x值；日志2，我删了x值….。而分布式系统的设计一般为把这些logs   replicate（复制）到其他节点上，保证这些log不仅仅存在单个节点上，而是分布在多个节点上的。</p>
</blockquote>
<p>其实我们今天讨论准确的说，应该是<strong>state machine replication</strong>的<strong>共识（consensus）算法</strong></p>
<p>而paxos其实是一个共识算法。系统的最终一致性，不仅需要达成共识，还会取决于client的行为。</p>
<h2 id="二-强一致性算法"><a href="#二-强一致性算法" class="headerlink" title="二 强一致性算法"></a>二 强一致性算法</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><blockquote>
<p>一致性算法有几个派别构建了现在的强一致性算法使用。</p>
</blockquote>
<p><strong>① 主从同步复制</strong></p>
<ol>
<li>Master【主节点】接受写请求</li>
<li>Master复制日志至slave【从节点】</li>
<li>Master等待，直到所有【所有传给子节点的logs】从库返回</li>
</ol>
<p><strong>问题：</strong>一个节点失败，Master阻塞，导致整个集群不可用，虽然保证了一致性，但是可用性却大大降低了。</p>
<p><strong>② 多数派【目前流行的数据库用的思想】</strong></p>
<p>其基本想法为：</p>
<p>每次写都保证写入大于$\frac{N}{2}$，每次都都保证从大于$\frac{N}{2}$个节点中读</p>
<p><strong>但还是不够，其问题在于：</strong>在并发环境下，多数派无法保证系统的正确性，<strong>所以顺序也是非常重要的</strong></p>
<p><img src="https://i.loli.net/2020/11/29/tcjIBXoib9YypeO.jpg" alt="强一致--Quorum.jpg"></p>
<h3 id="2-1-Paxos"><a href="#2-1-Paxos" class="headerlink" title="2.1 Paxos"></a>2.1 Paxos</h3><blockquote>
<p>前提：为了描述Paxos，<strong>Lamport</strong>[latex发明者]虚拟了一个叫Paxos的希腊城邦，这个岛按照议会民主制的政治模式制定法律，但是没有人愿意将自己的全部时间和精力放在这种事，所以无论是议员、议长或者传递纸条的服务员都不能保证别人需要时一定会出现，也无法承诺批准决议或者传递消息的时间。</p>
</blockquote>
<p><strong>分类：</strong></p>
<ul>
<li><strong>Basic Paxos</strong></li>
<li><strong>Multi Paxos</strong></li>
<li><strong>Fast Paxos</strong></li>
</ul>
<h4 id="2-1-1-RPC【Remote-Procedure-Call】"><a href="#2-1-1-RPC【Remote-Procedure-Call】" class="headerlink" title="2.1.1 RPC【Remote Procedure Call】"></a>2.1.1 <a href="%5Bhttps://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8%5D(https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8)">RPC【Remote Procedure Call】</a></h4><blockquote>
<p>分布式计算中，RPC远程过程调用作为计算机网络通信协议，为一种服务器对客户端的模式【Server-Client】。该协议允许程序员在本地调用另一地址【通常为另一台<strong>开放空间下的</strong>计算机】的功能程序，不需要二次编写具体的函数实现。经典实现是一个通过<strong>发送请求-接受请求</strong>的交互系统。</p>
<p>如果涉及的软件采用<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程</a>，那么远程过程调用亦可称作<strong>远程调用</strong>或<strong>远程方法调用</strong>，例：<a href="https://zh.wikipedia.org/wiki/Java_RMI">Java RMI</a>。</p>
<p>RPC是一种<a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1">进程间通信</a>的模式，程序分布在不同的<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4">地址空间</a>里。如果在同一主机里，RPC可以通过不同的<strong>虚拟地址</strong>空间（即便使用相同的物理地址）进行通讯，而在不同的主机间，则通过不同的<strong>物理地址</strong>进行交互。许多技术（常常是不兼容）都是基于这种概念而实现的。</p>
</blockquote>
<h5 id="·-信息传递"><a href="#·-信息传递" class="headerlink" title="· 信息传递"></a>· 信息传递</h5><p>一般为Client向Server发出执行若干过程请求，并用Client提供的参数，将结果返回给Client。</p>
<h5 id="·-具体流程"><a href="#·-具体流程" class="headerlink" title="· 具体流程"></a><strong>· 具体流程</strong></h5><ol>
<li>客户端调用客户端stub（client stub）。这个调用是在<strong>本地</strong>，并将调用参数push到栈（stack）中。</li>
</ol>
<blockquote>
<p>如果数据量较少，使用寄存器就阔以了</p>
<p><strong>stub【桩】：<a href="%5Bhttps://zh.wikipedia.org/wiki/%E6%A1%A9_(%E8%AE%A1%E7%AE%97%E6%9C%BA)%5D(https://zh.wikipedia.org/wiki/%E6%A1%A9_(%E8%AE%A1%E7%AE%97%E6%9C%BA)">维基百科–桩</a></strong></p>
<p><strong>打桩：</strong></p>
<ol>
<li><strong>容易扩展的块。</strong>可以为一个宏，一个函数，或者是数个宏，数个函数的组合；起到辅助作用，与一般的代码块相比，桩在并不是固定的只是一个块在这，类似于面向方面编程的横切点，只不过为<strong>显式插入</strong></li>
<li><strong>√ RPC的代理点。</strong>不真正做事，而是通过PRC或者其他类似的机制由外部完成真正的工作。</li>
</ol>
</blockquote>
<ol start="2">
<li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 <a href="https://zh.wikipedia.org/wiki/Marshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">marshalling</a>【序列化】。（常见方式：<a href="https://zh.wikipedia.org/wiki/XML">XML</a>、<a href="https://zh.wikipedia.org/wiki/JSON">JSON</a>、二进制编码）</li>
<li>客户端本地操作系统发送信息至服务器。（可通过自定义<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">TCP协议</a>或<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>传输）</li>
<li>服务器系统将信息传送至服务端stub（server stub）。</li>
<li>服务端stub（server stub）解析信息。该过程叫 <a href="https://zh.wikipedia.org/wiki/Unmarshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">unmarshalling</a>。</li>
<li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。</li>
</ol>
<h4 id="2-1-2-Basic-Paxos"><a href="#2-1-2-Basic-Paxos" class="headerlink" title="2.1.2 Basic Paxos"></a>2.1.2 Basic Paxos</h4><h5 id="·-角色介绍"><a href="#·-角色介绍" class="headerlink" title="· 角色介绍"></a>· 角色介绍</h5><table>
<thead>
<tr>
<th>Client</th>
<th>系统外部角色，请求发起者。像民众</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Proposer</strong></td>
<td>接受Client请求，向集群提起提议（propose）。并在冲突发生时，起到冲突调节的作用。像议员，替民众提出议案【判断是否达到Quorum】【服务器】</td>
</tr>
<tr>
<td><strong>Acceptor（Voter）</strong></td>
<td>提议投票和接收者，只有在形成法定人数（Quorum，即为多数派）时，提议才会最终被接受。像国会<strong>【分布式存储的独立存储点】</strong>【计算集群】【达到共识的数据库】</td>
</tr>
<tr>
<td><strong>Learner</strong></td>
<td>提议接收者，backup，备份，对集群一致性没什么影响。像记录员，对已经通过的法案做记录【由Acceptor通知】</td>
</tr>
</tbody></table>
<h5 id="·-步骤、阶段【phases】"><a href="#·-步骤、阶段【phases】" class="headerlink" title="· 步骤、阶段【phases】"></a>· 步骤、阶段【phases】</h5><ol>
<li><strong>Phase 1a：Prepare</strong></li>
</ol>
<blockquote>
<p><strong>proposer</strong>提出一个提案，编号为$N$,此$N$<strong>大于</strong>这个<strong>proposer</strong>之前提出的提案编号，请求<strong>acceptors</strong>的<strong>quorum</strong>接受</p>
</blockquote>
<ol start="2">
<li><strong>Phase 1b：Promise</strong></li>
</ol>
<blockquote>
<p>如果$N$大于此acceptors之前接受的任何提案编号则接受，否则拒绝</p>
</blockquote>
<ol start="3">
<li><strong>Phase 2a：Accept</strong></li>
</ol>
<blockquote>
<p>如果达到了quorum，proposer会发出accept的请求。这个请求包含提案编号$N$，以及提案内容</p>
</blockquote>
<ol start="4">
<li><strong>Phase 2b：Accepted</strong></li>
</ol>
<blockquote>
<p>如果此acceptor在此期间没有收到任何编号大于$N$的提案，则接受此提案内容，否则忽略</p>
</blockquote>
<h5 id="·-潜在问题"><a href="#·-潜在问题" class="headerlink" title="· 潜在问题"></a>· 潜在问题</h5><blockquote>
<p><strong>活锁（liveness）</strong>或者<strong>dueling</strong></p>
</blockquote>
<p>用<code>random(timeout)</code>解决，进程冲突，一个进程先等一会。【一般等几秒钟】</p>
<p>其他问题：</p>
<ul>
<li>难实现、效率低（2轮RPC）、活锁</li>
</ul>
<p><img src="https://i.loli.net/2020/11/29/SC8jnlerY25sUDP.jpg" alt="basic paxos基本流程.jpg"></p>
<h3 id="2-2-Multi-Paxos"><a href="#2-2-Multi-Paxos" class="headerlink" title="2.2 Multi-Paxos"></a>2.2 Multi-Paxos</h3><blockquote>
<p>新概念【<strong>Leader</strong>】：唯一的proposer，所有请求都需要经过这个Leader。</p>
</blockquote>
<p><strong>区别</strong>：与basic paxos多proposers相比，其提案唯一确定</p>
<p><strong>特点：</strong>减少角色，进一步简化</p>
<blockquote>
<p>在确定了一个server作为leader后，就不需要像basic paxos每一次propose都需要promise，而是与其他服务器形成了leader-slave的关系，只要不挂机，都仅需<code>Accept!(N,I,Vn)</code>即可</p>
</blockquote>
<p><img src="https://i.loli.net/2020/11/29/C65B2y39TxYQfhL.jpg" alt="multi paxos基本流程.jpg"></p>
<h4 id="2-2-1-Raft【简易版本的Multi-Paxos】"><a href="#2-2-1-Raft【简易版本的Multi-Paxos】" class="headerlink" title="2.2.1 Raft【简易版本的Multi-Paxos】"></a>2.2.1 Raft【简易版本的Multi-Paxos】</h4><blockquote>
<p>Raft is a implementation of distributed consensus，用于解决<code>state machine replication</code>问题</p>
</blockquote>
<ul>
<li><p>将达到共识划分为三个子问题</p>
<ul>
<li><p><strong>Leader Election</strong></p>
<ul>
<li>Only one candidate</li>
</ul>
<blockquote>
<p>Raft通过timeout来控制选举，如果集群中follower没有收到heartbeat【心跳包】，说明其可以竞选leader。当某一follower成为candidate后，它会向集群中的其他followers发送请求，当投票数达到Quorum【该candidate能保证它投它自己+1 vote】，该candidate成为Leader，向集群发送heartbeat。</p>
<p>这个时候，集群中的所有follower在每次接受到heartbeat时，都要刷新一次timeout；并且更新一次<code>Election Term (x+1)</code></p>
</blockquote>
<ul>
<li>Candidates</li>
</ul>
<blockquote>
<p>Raft会产生随机的timeout给candidates，被分到timeout短的成为leader</p>
</blockquote>
</li>
<li><p><strong>Log Replication</strong></p>
<ul>
<li>两个阶段：写日志<code>Log</code>—&gt;提交<code>Commit</code></li>
<li>当Leader知道quorum已经将log写入了后，它就可以提交了；提交后再提醒followers提交</li>
<li><strong>若产生多个集群分区</strong></li>
</ul>
<blockquote>
<p>在这种情况下，一般为$2k+1$个结点，为保证不会出现同时的$2N$票</p>
<p>此时，quorum表示为除了Leaders的所有followers</p>
</blockquote>
</li>
<li><p><strong>Safety【如何保证容错】</strong></p>
<ul>
<li>如果出现宕机，在该机器恢复后，它的状态会与其他机器达成consensus</li>
</ul>
</li>
</ul>
</li>
<li><p>重定义角色：</p>
<ul>
<li>Leader【<strong>整个集群只有一个Leader</strong>】</li>
</ul>
<blockquote>
<p>出现leader后，所有的请求都由leader传给followers</p>
</blockquote>
<ul>
<li>Follower</li>
<li>Candidate【没有leader出现时，由follower经过<strong>timeout</strong>后成为candidate】</li>
</ul>
</li>
<li><p><a href="http://thesecretlivesofdata.com/raft/">原理动画解释</a></p>
</li>
<li><p><a href="https://raft.github.io/">场景测试</a></p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/11/29/zQaAeuF3HpDLCsR.jpg" alt="强一致--主从同步.jpg"></p>
<h4 id="2-2-2-其他问题"><a href="#2-2-2-其他问题" class="headerlink" title="2.2.2 其他问题"></a>2.2.2 其他问题</h4><p><strong>一致性不能代表完全正确性！</strong></p>
<p>因为会出现三个可能的结果：<code>成功</code>,<code>失败</code>,<code>unknown(timeout)</code></p>
<p>举个例子<strong>【Raft 5 Nodes】</strong>：Client写请求，leader问followers同步logs，此时集群中有3个节点失败，2个节点存活，结果会是？</p>
<h3 id="2-3-ZAB-Multi-Paxos"><a href="#2-3-ZAB-Multi-Paxos" class="headerlink" title="2.3 ZAB(Multi-Paxos)"></a>2.3 ZAB(Multi-Paxos)</h3><blockquote>
<p>基本与Raft相同，有些名词在叫法上有些区别；</p>
<p>比如ZAB将某一个Leader的周期称为<code>epoch</code>，而Raft则称之为<code>term</code>；</p>
<p>实际上也有存在着一些区别：如Raft保证log的连续性，Heartbeats方向为<code>Leader --&gt; Follower</code>，ZAB则相反，为<code>Follower --&gt; Leader</code></p>
</blockquote>
<h2 id="三-项目实践"><a href="#三-项目实践" class="headerlink" title="三 项目实践"></a>三 项目实践</h2><ul>
<li>Zookeeper集群搭建和命令行操作</li>
<li>Etcd集群搭建和restful api</li>
</ul>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode--树【递归解题I】</title>
    <url>/2021/03/16/LeetCode%E3%80%90%E6%A0%91%E2%85%A0%E2%85%A1%E3%80%91/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="LeetCode【树Ⅰ】"><a href="#LeetCode【树Ⅰ】" class="headerlink" title="LeetCode【树Ⅰ】"></a>LeetCode【树Ⅰ】</h1><blockquote>
<p>贯穿在树中间的是递归的思想，在树这一块，我们主要讨论递归在解决树型问题时起的作用，解题的重点也在于<strong>分析树的每个节点在做什么，并且相信他会一直这么做下去</strong>。</p>
</blockquote>
<h2 id="P226-翻转二叉树"><a href="#P226-翻转二叉树" class="headerlink" title="P226 翻转二叉树"></a>P226 翻转二叉树</h2><p>来看一下题目：</p>
<img src="https://i.loli.net/2020/11/18/pmsQNlkg5erajCb.png" alt="p226.png" style="zoom:50%;">

<p>根据递归的思路，我们分析一下每个节点在做什么事，可以注意到的是，这个翻转是把每个结点的左孩子和右孩子进行了调换，因此树中每个结点所做的就是把左孩子和右孩子进行调换。</p>
<p><strong>注意：</strong>当结点为空时，这个时候就需要返回空的结点<code>NULL</code>，这个是特殊的条件。由这个条件，我们得到下面代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">	<span class="comment">/*前序遍历代码*/</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">   	TreeNode* tmp = root-&gt;left;            <span class="comment">//通过中间变量tmp来替换</span></span><br><span class="line">    root-&gt;left = root-&gt;right;</span><br><span class="line">    root-&gt;right = tmp;</span><br><span class="line"> 	</span><br><span class="line">    <span class="comment">/*对每个结点进行递归，相信它都会这么做*/</span></span><br><span class="line">    invertTree(root-&gt;left);               <span class="comment">//从左节点开始</span></span><br><span class="line">    invertTree(root-&gt;right);              <span class="comment">//从右节点开始</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P116-填充每个节点的下一个右侧节点指针"><a href="#P116-填充每个节点的下一个右侧节点指针" class="headerlink" title="P116 填充每个节点的下一个右侧节点指针"></a>P116 填充每个节点的下一个右侧节点指针</h2><img src="https://i.loli.net/2020/11/18/chZkdUGrJ2bayIp.png" alt="P116.png" style="zoom: 50%;">



<p>与第一题一样，我们先来分析下每个节点在做什么事。</p>
<p>这么一看，每个节点都指向其右节点<code>这个右指层序遍历的右</code>，而每一层最右边的节点则指向NULL，那么这么一分析，可能会架构出这样的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    root-&gt;left-&gt;next = root-&gt;right;</span><br><span class="line">    root-&gt;right-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">    connect(root-&gt;left);</span><br><span class="line">    connect(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>欸，这个想法差不多了，但是还是缺一点，错在哪里呢，想一下，在<code>root-&gt;right</code>这一部分，如果发生在左子树，按照题目意思应该是<code>root-&gt;left-&gt;right-&gt;next = root-&gt;right-&gt;left</code>;但是我们没有实现这个功能。</p>
<p>该怎么办呢，如果按照题目传入的参数，每次只能传入一个结点，那能做的也只有一个结点的事，这样我两个在原子树没什么关系得结点就找不到联系了呀~</p>
<p>因此，这里我们重新构建一个参数，用来传每个结点的左孩子和右孩子，把三种指向的情况全部实现，最后我们构建的<code>build</code>函数是这样的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;   <span class="comment">//这个注意一下如果没有判断root为空，&#x27;[]&#x27;情况会出错</span></span><br><span class="line">    connect(root-&gt;left, root-&gt;right);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(Node* l, Node* r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == <span class="literal">nullptr</span> || r == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    l-&gt;next = r;</span><br><span class="line">    </span><br><span class="line">    connect(l-&gt;left, l-&gt;right);</span><br><span class="line">    connect(r-&gt;left, r-&gt;right);</span><br><span class="line">    connect(l-&gt;right, l-&gt;left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P114-二叉树展开成链表"><a href="#P114-二叉树展开成链表" class="headerlink" title="P114 二叉树展开成链表"></a>P114 二叉树展开成链表</h2><img src="https://i.loli.net/2020/11/19/EaeBjoYNH8RZKu9.png" alt="p114.png" style="zoom:50%;">

<p>同样的，我们还是来分析节点在做什么事。</p>
<p>分析一下，我们可以看到对某一节点，它是将左子树的节点全部转到右子树，再将原来的右子树节点补到现有的最后一个右节点后，这么说可能不详细【现在还没学会在线画图的废清】，我们举个例子</p>
<p>以第二层左子树节点2为例，将它所做的事分析一下，即为</p>
<p><code>3 &lt;- 2 -&gt; 4</code>，先转成，<code>2-&gt;3</code>，再把<code>4</code>补上，即为<code>NULL &lt;- 2-&gt;3-&gt;4</code>懂了叭~</p>
<p>那么我们将节点所做的事用代码表示，即为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flatten</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    flatten(root-&gt;left);</span><br><span class="line">    flatten(root-&gt;right);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*后序遍历位置，先从最下面一位的节点开始*/</span></span><br><span class="line">    Node* tmp = root-&gt;right;</span><br><span class="line">    Node* tmp1 = root-&gt;right;    <span class="comment">//先保存右孩子的状态</span></span><br><span class="line">    root-&gt;right = root-&gt;left;    <span class="comment">//右孩子指向左孩子</span></span><br><span class="line">    root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        tmp = tmp-&gt;right;        <span class="comment">//遍历到现在右孩子的最后一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    tmp-&gt;right = tmp1;           <span class="comment">//连接上原先的右孩子</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;                 <span class="comment">//返回处理过的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Leetcode【树Ⅱ】"><a href="#Leetcode【树Ⅱ】" class="headerlink" title="Leetcode【树Ⅱ】"></a>Leetcode【树Ⅱ】</h1><blockquote>
<p>这里我们主要讲递归对BST的作用</p>
</blockquote>
<p>同样的，我们在是使用递归前还是需要去分析好每个节点所做的事情是什么，然后相信他，写出递归的代码出来，话不多说，我们开始吧~</p>
<h2 id="P98-验证二叉搜索树"><a href="#P98-验证二叉搜索树" class="headerlink" title="P98 验证二叉搜索树"></a>P98 验证二叉搜索树</h2><img src="https://i.loli.net/2020/11/20/h8XxHJiRUkzBIvb.png" alt="p98.png" style="zoom:50%;">

<p>因为题目要求关于对应节点左子树和右子树的情况为，左孩子小于父节点，右孩子大于父结点，所以我们可以从这个条件入手往下找，那么问题来了，怎么用递归来分开比较左子树和右子树呢？</p>
<p>我们可以使用<code>min</code>和<code>max</code>来保存这些状态，<code>min</code>和<code>max</code>存的都是父结点的值，由此可以一直比较下去，那么怎么比的呢，我们先把整个代码写出来，为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> isValidBST(root, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root, TreeNode* min, TreeNode* max)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(min != <span class="literal">NULL</span> &amp;&amp; root-&gt;left-&gt;val &lt;= min-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(max != <span class="literal">NULL</span> &amp;&amp; root-&gt;right-&gt;val &gt;= max-&gt;val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> isValidBST(root-&gt;left, min, root) &amp;&amp; isValidBST(root-&gt;right, root, max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拆开来讲，对于最后传递的<code>isValidBST(root-&gt;left, min, root) &amp;&amp; isValid(root-&gt;right, max, root)</code>意思是，假如现在传入的<code>root2</code>为<code>root1-&gt;left</code>，此时比较的为【现在举得root为上一个递归值的root1】<code>root1-&gt;left-&gt;left</code>和<code>root1-&gt;left-&gt;right</code>，即<code>root2-&gt;left</code>与<code>root2-&gt;right</code>，这么做就是<strong>判断往下的左节点是否都比最顶级的父结点小，往下的右节点是否都比最顶级的父结点大。</strong></p>
<p>在这里我还是有点疑问，因为在写<code>min</code>和<code>max</code>的时候我发现我好像对于二叉搜索树不是很了解，于是百度得到关于BST的特点总结为：</p>
<ul>
<li>左子树的值一定小于右子树</li>
<li>查找时的处理方式接近于二分查找，时间复杂度为$O(logn)$.</li>
</ul>
<h2 id="P654-最大二叉树"><a href="#P654-最大二叉树" class="headerlink" title="P654 最大二叉树"></a>P654 最大二叉树</h2><img src="https://i.loli.net/2020/11/20/xDMjXr6qINZbWG1.png" alt="p654.png" style="zoom:50%;">

<p>锁定节点需要做的事：找到最大元素后，记录其位置<code>index</code>，后在其左边建树，再在其右边建数，然后将左子树和右子树连在一起，所以这里节点要做的事即为：</p>
<ol>
<li>找到最大节点</li>
<li>建立左子树</li>
<li>建立右子树</li>
</ol>
<p>得到代码为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> build(nums, <span class="number">0</span>, nums.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span> <span class="literal">nullptr</span>;	                      <span class="comment">//这个判断很关键</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>, val = <span class="number">-10000</span>;                 <span class="comment">//index设为-1，保证其不影响递归的加减</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; nums[i])&#123;</span><br><span class="line">            val = nums[i];</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    root-&gt;left = build(nums, l, index<span class="number">-1</span>);</span><br><span class="line">    root-&gt;right = build(nums, index+<span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我这里出错的原因是<code>l&gt;r</code>的判定条件写成了<code>l &lt; 0|| r &gt; nums.size()-1</code>，原因是，在递归时会出现<code>l&gt;r</code>的情况，而如果不判断这个在循环的时候就会出错，过不了了~</p>
<h2 id="P105-前序与中序遍序构造二叉树"><a href="#P105-前序与中序遍序构造二叉树" class="headerlink" title="P105 前序与中序遍序构造二叉树"></a>P105 前序与中序遍序构造二叉树</h2><img src="https://i.loli.net/2020/11/20/4qSxJUemIYBuavl.png" alt="p105.png" style="zoom:50%;">

<p>在构造树最关键的应该是，找到三种遍历间的关系，在我做二叉树关于三种遍历时我都是这么来想的，以<code>左-中-右</code>来表示左孩子、父结点、右孩子，它们遍历的顺序为：</p>
<ul>
<li><strong>前序遍历</strong>：<code>左-中-右</code>，第一个元素为<strong>根节点</strong>，最后一个结点为右子树最后一个结点</li>
<li><strong>中序遍历</strong>：<code>左-中-右</code>，第一个元素为左子树的最小结点，最后一个结点为右子树最后一个节点</li>
<li><strong>后序遍历</strong>：<code>左-右-中</code>，第一个元素为左子树的最小结点，最后一个节点为<strong>根节点</strong></li>
</ul>
<p>对于前序和中序遍历得出的二叉树，我们可以找到以下关系</p>
<ul>
<li>前序第一个结点为根节点，记为<code>root</code></li>
<li>对中序顺序表遍历找到<code>root</code>对应的<code>index</code>值，然后关于<code>index</code>左边为BST的左子树，右边则为右子树，然后关于这两边建树</li>
</ul>
<p><strong>怎么建树呢？</strong></p>
<ul>
<li>同样通过递归来建树，或者也可以看成是通过前序遍历来建树的一个逆推过程，那么关键就是找到每一个小树的根节点<code>root</code>，后面递归下去找<code>root-&gt;left</code>和<code>root-&gt;right</code></li>
</ul>
<p>代码写为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> build(preorder, <span class="number">0</span>, preorder.size()<span class="number">-1</span>, inorder, <span class="number">0</span>, inorder.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; preorder, <span class="keyword">int</span> preStart, <span class="keyword">int</span> preEnd, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>, val = preorder[preStart];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inorder[i] == val)&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> leftSize = index - inStart;</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    root-&gt;left = build(preorder, preStart+<span class="number">1</span>, preStart+leftSize, inorder, inStart, index<span class="number">-1</span>);</span><br><span class="line">    root-&gt;right = build(preorder, preStart+<span class="number">1</span>+leftSize, preEnd, inorder, index+<span class="number">1</span>, inEnd);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关键在于：找到前序和中序左子树和右子树建树的位置，即根节点，然后按照往左往右递归地深入下去建树。</p>
</blockquote>
<h2 id="P106-中序与后序遍历构造二叉树"><a href="#P106-中序与后序遍历构造二叉树" class="headerlink" title="P106 中序与后序遍历构造二叉树"></a>P106 中序与后序遍历构造二叉树</h2><img src="https://i.loli.net/2020/11/20/WuI8DT5AiNy6Q2z.png" alt="p106.png" style="zoom:50%;">

<p>与上题类似，这道题我们需要找到中序和后序的关系，分析知道：</p>
<ul>
<li>后序顺序表遍历的<strong>最后一个元素</strong>为BST的根节点<code>root</code></li>
<li>中序遍历找到BST的根节点<code>root</code>后，<code>root</code>左边为左子树，<code>root</code>右边为右子树</li>
<li>找到中序遍历<code>inorder[]</code>中<code>root</code>的<code>index</code>位置后，得到<code>leftSize = index-inStart </code>，与上一题不同，在后序遍历<code>postorder[]</code>中，其**左子树的元素在顺序表中的顺序应该为<code>[postStart, postStart+leftSize-1]</code>**，这里要注意一下，我就是在这里debug了好久</li>
</ul>
<p>通过这道题提醒自己一个知识点：</p>
<p><strong>只有“前序+中序”//“中序+后序”能够确定唯一一颗二叉树awa</strong></p>
<p>根据上述分析，我们的代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> build(inorder, <span class="number">0</span>, inorder.size()<span class="number">-1</span>, postorder, <span class="number">0</span>, postorder.size()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">build</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; inorder, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; postorder, <span class="keyword">int</span> postStart, <span class="keyword">int</span> postEnd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(postStart &gt; postEnd) <span class="keyword">return</span> <span class="literal">nullptr</span>;	<span class="comment">//这里inStart&gt;inEnd也是可以滴</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>, val = postorder[postEnd];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = inStart; i &lt;= inEnd; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(inorder[i] == val)&#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> leftSize = index - inStart; </span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">    root-&gt;left = build(inorder, inStart, index<span class="number">-1</span>, postorder, postStart, postStart+leftSize<span class="number">-1</span>);</span><br><span class="line">    root-&gt;right = build(inorder, index+<span class="number">1</span>, inEnd, postorder, postStart+leftSize, postEnd<span class="number">-1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>复盘的时候，发现自己避开了<code>postStart+leftSize-1</code>的问题，却没有避开在<code>root-&gt;right</code>中postorder[]应该停止在<code>postEnd-1</code>的位置😄【蠢死自己了】</p>
</blockquote>
<p>过完了BST的基本问题，我们要往更深的地方迈入啦，冲鸭~</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce I</title>
    <url>/2021/03/16/MapReduce%E3%80%90%E2%85%A0%E3%80%91/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="MapReduce【Ⅰ】"><a href="#MapReduce【Ⅰ】" class="headerlink" title="MapReduce【Ⅰ】"></a>MapReduce【Ⅰ】</h1><blockquote>
<p>因为是第一次读MapReduce，并且也是第一次接触到分布式，所以不懂得地方会很多，如果有想要找到相关部分的朋友，可以点对应的索引栏查找，如果没有找到你的问题，欢迎评论，我会及时回复你~</p>
</blockquote>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><h3 id="lt-1-gt-什么是MapReduce"><a href="#lt-1-gt-什么是MapReduce" class="headerlink" title="&lt;1&gt;什么是MapReduce"></a>&lt;1&gt;什么是MapReduce</h3><ul>
<li>MapReduce为一个programming model</li>
<li>同时也是一个实现了处理和生成超大数据集的算法模型</li>
</ul>
<h3 id="lt-2-gt-Basic-Implemation"><a href="#lt-2-gt-Basic-Implemation" class="headerlink" title="&lt;2&gt;Basic Implemation"></a>&lt;2&gt;Basic Implemation</h3><p>用户首先创建一个<code>Map</code>函数来处理一个基于<code>key/value pair</code>的数据模型，输出中间的基于<code>key/value</code>的数据集合，然后再创建一个Reduce函数来合并所有具有相同<code>intemediate key</code>的<code>intermediate value</code>。</p>
<h3 id="lt-3-gt-特点"><a href="#lt-3-gt-特点" class="headerlink" title="&lt;3&gt;特点"></a>&lt;3&gt;特点</h3><ul>
<li>MapReduce架构的程序能够在大量的普通配置的计算机<strong>【commodity machines】</strong>上实行并行化<strong>【parallelized】</strong>处理</li>
</ul>
<p>这个<code>run-time system</code>仅关心：</p>
<ul>
<li>如何<strong>分割</strong>输入数据【<strong>partitioning the input data</strong>】</li>
<li>在大量计算机组成的集群上的<strong>调度</strong>【<strong>scheduling the program’s execution accross machines</strong>】</li>
<li>集群中计算机的错误处理<strong>【handling machines failures】</strong></li>
<li>管理集群中计算机之间必要的通信【<strong>managing the required communication</strong>】</li>
</ul>
<blockquote>
<p>一个典型的MapReduce计算往往由几千台机器组成、处理以TB计算的数据<strong>【Highly scalable】</strong></p>
</blockquote>
<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h2><h3 id="1-1-为什么提出了MapReduce"><a href="#1-1-为什么提出了MapReduce" class="headerlink" title="1.1 为什么提出了MapReduce"></a>1.1 为什么提出了MapReduce</h3><p><strong>To compute various kinds of derived data【衍生数据】</strong>，例如爬虫爬取的网面数量汇总、每天被请求的最多的查询集合等等。因为输入的数据量巨大，如果要在可接受的时间内完成运算，需要把这些<code>data</code>分布在成百上千的主机上。</p>
<p>而我们前面提到的如何处理并行运算、如何分发数据、如何处理错误，这些问题综合在一起，需要大量的代码处理，但是这么综合解决需要大量的代码，那么怎么简单处理呢？</p>
<h3 id="1-2-解决复杂问题"><a href="#1-2-解决复杂问题" class="headerlink" title="1.2 解决复杂问题"></a>1.2 解决复杂问题</h3><p>为了解决这些<code>complexity</code>，我们设计一个<code>new abstraction to express the simple computation</code><strong>【只用表述执行简单的运算】</strong>，不用去关心并行计算<strong>（parallelization）</strong>、容错<strong>（fault-tolerance）</strong>、数据分布<strong>（data distribution）</strong>、负载均衡<strong>（load balancing）</strong>等复杂的细节，而现在这些问题都被封装到了一个库里面，设计这个抽象模型的灵感来源于<code>Lisp</code>和其他函数式语言的<code>Map</code>和<code>Reduce</code>的原语。</p>
<p>而大多数的运算都包含着这样的操作：</p>
<ul>
<li>先在输入数据的“逻辑”记录上应用<code>Map</code>操作得出一个中间<code>key/value pair</code>集合</li>
<li>之后对所有具有相同<code>key</code>值的<code>value</code>值上应用<code>Reduce</code>操作，从而达到<strong>合并中间的数据</strong>，得到一个想要的结果的目的</li>
<li>而后使用<code>MapReduce</code>模型，结合用户实现的<code>Map</code>和<code>Reduce</code>函数，从而能较为容易地实现大规模并行化计算</li>
</ul>
<p>而通过<code>MapReduce</code>模型自带的<code>re-execution</code>【<strong>“再次执行”</strong>】功能，也提供了初级的容错【<strong>fault tolerance</strong>】实现方案</p>
<h3 id="1-3-Major-Contribution"><a href="#1-3-Major-Contribution" class="headerlink" title="1.3 Major Contribution"></a>1.3 Major Contribution</h3><blockquote>
<p>这个工作【<strong>实现一个MapReduce框架模型</strong>】的主要贡献是通过简单的接口来实现<strong>自动的并行化和大规模的分布式计算</strong>，通过使用MapReduce模型接口实现在大量普通的PC机上<strong>高性能计算</strong></p>
</blockquote>
<blockquote>
<p>PC机：个人计算机</p>
</blockquote>
<p>接下来几个部分将会讲述：</p>
<ul>
<li><strong>Section 2：</strong>Basic programming model and gives examples</li>
<li><strong>Section 3：</strong>描述了一个经过裁剪的、适合于基于集群的计算环境中的MapReduce实现</li>
<li><strong>Section 4：</strong>描述 一些在MapReduce编程模型中实用的技巧</li>
<li><strong>Section 5：</strong>Performance measurements【<strong>测量性能</strong>】 of variety of tasks’ implementation.</li>
<li><strong>Section 6：</strong>谷歌内部用MapReduce作为基础重写的索引系统产品，以及其他一些使用<strong>MapReduce的经验</strong></li>
<li><strong>Section 7：</strong>Related and future work.</li>
</ul>
<h2 id="2-Progrmming-Model-编程模型"><a href="#2-Progrmming-Model-编程模型" class="headerlink" title="2 Progrmming Model [编程模型]"></a>2 Progrmming Model [编程模型]</h2><h3 id="Intro-–-MapReduce原理"><a href="#Intro-–-MapReduce原理" class="headerlink" title="Intro – MapReduce原理"></a>Intro – MapReduce原理</h3><p>Takes a set of input <code>key/value pairs</code>，produce a set of output <code>key/value pairs</code>.MapReduce的library groups<strong>【用户】</strong>用两个函数来表达该计算：<code>Map</code>and<code>Reduce</code>。</p>
<p>用户自定义的<code>Map</code>函数接受一个输入的<code>key\value pairs</code>，然后产生一个中间<code>key/value</code>值的集合，<code>MapReduce</code>库把所有具有相同中间<code>key</code>值Ⅰ和相关的一个<code>value</code>值集合在一起传递给<code>reduce</code>函数；</p>
<p>而用户定义的<code>Reduce</code>函数接受一个中间<code>key</code>的值Ⅰ和一个相关的<code>value</code>值的集合，<code>Reduce</code>函数合并这些<code>value</code>值，形成一个较小的<code>value</code>值的集合。一般的，每个<code>Reduce</code>函数调用只产生$0$或$1$个输出<code>value</code>值。通常我们通过一个迭代器把中间<code>value</code>值提供给<code>Redece</code>函数，这样我们就能够处理无法全部放入内存中的大量<code>value</code>值的集合。</p>
<h3 id="2-1-例子"><a href="#2-1-例子" class="headerlink" title="2.1 例子"></a>2.1 例子</h3><p>以计算一个大的文档集合中包含每个单词出现的次数，伪代码为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(String Key, String value)&#123;</span><br><span class="line">    <span class="comment">//Key---doucument name</span></span><br><span class="line">    <span class="comment">//Value---documents content</span></span><br><span class="line">    <span class="keyword">for</span> each word w in value:</span><br><span class="line">    	EmitIntermediate(w, <span class="string">&quot;l&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reduce(String key, Ste=ing)&#123;</span><br><span class="line">    <span class="comment">//key: a word</span></span><br><span class="line">    <span class="comment">//values: a list of counts</span></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>；</span><br><span class="line">    <span class="keyword">for</span> each v in values:</span><br><span class="line">    	result += ParseInt(v);</span><br><span class="line">   	Emit(AsString(result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中， <code>Map</code>函数输出文档中的每个词，以及这个词的出现次数（在这个例子失踪）</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitee/Git 上传文件</title>
    <url>/2021/03/16/GiteeGit-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p>想着之后用gitee托管代码会比较方便，kexueshangwang对于懒癌来说目前除了翻墙找“学习”资源浪费学习时间外，没什么必要。</p>
<p>但是git怎么上传文件，我也琢磨了好久，这是在上传时的步骤和中间出现的一些问题</p>
</blockquote>
<p><strong>在建立了项目的文件夹后，点开这个文件夹，在文件夹目录这块<code>git bash</code></strong></p>
<ul>
<li><strong>Ⅰ 建立远程连接</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin <span class="string">&#x27;xxx&#x27;</span>   //这个xxx是你的仓库地址，在<span class="built_in">clone</span>(克隆/下载)那里直接复制paste在这就ok了</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Ⅱ 将文件夹连接到分支【上传文件到缓存区必做的一步】</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Ⅲ 添加文件至缓冲区</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Ⅳ 将缓冲区的文件上传至master分支</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>最后你就能够发现你的仓库文件已经更新啦~</p>
<p><strong>小问题：</strong></p>
<ul>
<li>在与远程仓库建立连接的过程中你会看到，原先仓库里的文件也会到你的文件夹中，我觉得是因为在<code>git pull</code>的时候<code>fetch</code>操作也加进来了，但因为我在上传过程中出现了几个bug，后续确认下是否是这样，<strong>欢迎指正鸭</strong></li>
<li><strong>注意：</strong>在<code>git push</code>过程中如果单单在项目文件加了一个空文件夹外，其他什么都没有，<code>git push</code>会报<code>error</code>的~~【我就是这么过来的orz】</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2021/03/16/About%20Me/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote>
<p><strong>平稳、健康、幸福(●ˇ∀ˇ●)</strong></p>
</blockquote>
<hr>
<p><strong>Name：</strong> <strong>王清 / Zoris Wang</strong></p>
<p><strong>Address：</strong> <strong>陕西西安，广西北海</strong></p>
<p><strong>邮箱：</strong><a href="mailto:&#x57;&#97;&#x72;&#x6d;&#99;&#x68;&#97;&#121;&#64;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;">&#x57;&#97;&#x72;&#x6d;&#99;&#x68;&#97;&#121;&#64;&#x31;&#54;&#x33;&#46;&#99;&#111;&#109;</a></p>
<p><strong>CSDN：</strong> <a href="https://blog.csdn.net/Shea111?spm=1010.2135.3001.5113">Warmchay</a></p>
<p><strong>博客园：</strong><a href="https://home.cnblogs.com/u/Warmchay">Warmchay</a>【已停更，懒癌日常= v =】</p>
<p><img src="https://i.loli.net/2020/11/06/WGPKHfjqIn4FrZx.png" alt="aboutme.png"></p>
]]></content>
  </entry>
</search>
